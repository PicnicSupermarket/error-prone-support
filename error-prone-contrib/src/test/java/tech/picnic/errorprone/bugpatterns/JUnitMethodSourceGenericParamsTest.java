package tech.picnic.errorprone.bugpatterns;

import com.google.errorprone.CompilationTestHelper;
import org.junit.jupiter.api.Test;

final class JUnitMethodSourceGenericParamsTest {
  @Test
  void identification() {
    CompilationTestHelper.newInstance(JUnitMethodSourceGenericParams.class, getClass())
        .addSourceLines(
            "A.java",
            "import static org.junit.jupiter.params.provider.Arguments.argumentSet;",
            "import static org.junit.jupiter.params.provider.Arguments.arguments;",
            "",
            "import com.google.common.collect.ImmutableCollection;",
            "import com.google.common.collect.ImmutableList;",
            "import java.util.stream.Stream;",
            "import org.junit.jupiter.params.ParameterizedTest;",
            "import org.junit.jupiter.params.provider.Arguments;",
            "import org.junit.jupiter.params.provider.MethodSource;",
            "",
            "class A {",
            "  private static Stream<Arguments> argumentSetNoIdentificationTestCases() {",
            "    return Stream.of(argumentSet(\"Ignore me\", 1, ImmutableList.of(\"1\")));",
            "  }",
            "",
            "  private static Arguments[] arrayWithoutInitializersTestCases() {",
            "    return new Arguments[1];",
            "  }",
            "",
            "  private static Stream<Arguments> extraArgsTestCases() {",
            "    return Stream.of(arguments(1, ImmutableList.of(\"1\"), 2));",
            "  }",
            "",
            "  private static Stream<Arguments> identificationTestCases() {",
            "    return Stream.of(Arguments.of(1, ImmutableList.of(\"1\")), arguments(2, ImmutableList.of(2)));",
            "  }",
            "",
            "  private static Arguments[] identificationWithParensTestCases() {",
            "    return new Arguments[] {arguments(1, ImmutableList.of(1))};",
            "  }",
            "",
            "  private static Stream<Arguments> methodProviderIdentificationTestCases() {",
            "    return getMethodProviderIdentificationTestCases();",
            "  }",
            "",
            "  private static Stream<Arguments> multipleReturnsTestCases() {",
            "    if (true) {",
            "      return Stream.of(arguments(1, ImmutableList.of(\"1\")));",
            "    } else {",
            "      return Stream.of(arguments(2, ImmutableList.of(2)));",
            "    }",
            "  }",
            "",
            "  private static Stream<Arguments> noIdentificationStreamTestCases() {",
            "    return Stream.of(",
            "        Arguments.of(1, ImmutableList.of(\"1\")), arguments(2, ImmutableList.<Object>of()));",
            "  }",
            "",
            "  private static ImmutableCollection<Arguments> noIdentificationCollectionTestCases() {",
            "    return ImmutableList.of(",
            "        Arguments.of(1, ImmutableList.of(\"1\")), arguments(2, ImmutableList.<Object>of()));",
            "  }",
            "",
            "  private static Stream<Arguments> runtimeValueTestCases() {",
            "    int a = 1;",
            "    return Stream.of(arguments(a, ImmutableList.of(a)));",
            "  }",
            "",
            "  private static Stream<Arguments> streamChainTestCases() {",
            "    return Stream.of(1, 2).map(Arguments::arguments);",
            "  }",
            "",
            "  @ParameterizedTest",
            "  @MethodSource({",
            "    \"argumentSetNoIdentificationTestCases\",",
            "    \"arrayWithoutInitializersTestCases\",",
            "    \"extraArgsTestCases\",",
            "    \"identificationTestCases\",",
            "    \"identificationWithParensTestCases\",",
            "    \"methodProviderIdentificationTestCases\",",
            "    \"multipleReturnsTestCases\",",
            "    \"noIdentificationStreamTestCases\",",
            "    \"runtimeValueTestCases\",",
            "    \"streamChainTestCases\"",
            "  })",
            "  // BUG: Diagnostic contains: identificationTestCases, identificationWithParensTestCases,",
            "  // methodProviderIdentificationTestCases, multipleReturnsTestCases, runtimeValueTestCases",
            "  void identification(String num, ImmutableList<String> strList) {}",
            "",
            "  private static Stream<Arguments> genericsNoIdentificationTestCases() {",
            "    return Stream.of(arguments(ImmutableList.of(1)), arguments(ImmutableList.<Object>of()));",
            "  }",
            "",
            "  @ParameterizedTest",
            "  @MethodSource(\"genericsNoIdentificationTestCases\")",
            "  void subTypeNoIdentification(ImmutableList<? extends Number> numberList) {}",
            "",
            "  @ParameterizedTest",
            "  @MethodSource(\"genericsNoIdentificationTestCases\")",
            "  void wildcardNoIdentification(ImmutableList<?> numberList) {}",
            "",
            "  private static Stream<Arguments> superTypeNoIdentificationTestCases() {",
            "    return Stream.of(arguments(ImmutableList.<Number>of(1)), arguments(ImmutableList.<Object>of()));",
            "  }",
            "",
            "  @ParameterizedTest",
            "  @MethodSource(\"superTypeNoIdentificationTestCases\")",
            "  void superTypeNoIdentification(ImmutableList<? super Integer> numberList) {}",
            "",
            "  static class Foo {",
            "    private static int num = 1;",
            "",
            "    Stream<Arguments> fooIdentificationTestCases() {",
            "      return Stream.of(arguments(ImmutableList.of(1)));",
            "    }",
            "",
            "    static class Bar {",
            "      Stream<Arguments> barIdentificationTestCases() {",
            "        return Stream.of(arguments(ImmutableList.of(1)));",
            "      }",
            "    }",
            "  }",
            "",
            "  @ParameterizedTest",
            "  @MethodSource({",
            "    \"tech.picnic.errorprone.Foo#fooIdentificationTestCases\",",
            "    \"tech.picnic.errorprone.Foo.Bar#barIdentificationTestCases\"",
            "  })",
            "  // BUG: Diagnostic contains: fooIdentificationTestCases, barIdentificationTestCases",
            "  void staticMethodReference(ImmutableList<String> strList) {}",
            "",
            "  private static Stream<Arguments> getMethodProviderIdentificationTestCases() {",
            "    return Stream.of(",
            "        argumentSet(\"Ignore me\", 1, ImmutableList.of(1)),",
            "        arguments(1, ImmutableList.of(1)),",
            "        Arguments.of(2, ImmutableList.of(2)),",
            "        getArguments());",
            "  }",
            "",
            "  private static Arguments getArguments() {",
            "    return arguments(3, ImmutableList.of(3));",
            "  }",
            "}")
        .doTest();
  }
}
