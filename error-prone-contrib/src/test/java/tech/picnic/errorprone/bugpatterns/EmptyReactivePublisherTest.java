package tech.picnic.errorprone.bugpatterns;

import com.google.errorprone.CompilationTestHelper;
import org.junit.jupiter.api.Test;

final class EmptyReactivePublisherTest {
  @Test
  void identification() {
    CompilationTestHelper.newInstance(EmptyReactivePublisher.class, getClass())
        .addSourceLines(
            "A.java",
            "import com.google.common.collect.ImmutableSet;",
            "import reactor.core.publisher.Flux;",
            "import reactor.core.publisher.Mono;",
            "import reactor.util.context.Context;",
            "",
            "class A {",
            "  void m() {",
            "    Mono.just(1).doOnNext(i -> {});",
            "    Mono.just(2).filter(i -> true);",
            "    Mono.just(3).flatMap(Mono::just);",
            "    Mono.just(4).flatMapMany(Flux::just);",
            "    Mono.just(5).flatMapIterable(ImmutableSet::of);",
            "    Mono.just(6).handle((i, j) -> {});",
            "    Mono.just(7).map(i -> i);",
            "",
            "    // BUG: Diagnostic contains: doOnNext",
            "    Mono.empty().doOnNext(i -> {});",
            "    // BUG: Diagnostic contains: filter",
            "    Mono.empty().filter(i -> true);",
            "    // BUG: Diagnostic contains: flatMap",
            "    Mono.empty().flatMap(Mono::just);",
            "    // BUG: Diagnostic contains: flatMapMany",
            "    Mono.empty().flatMapMany(Flux::just);",
            "    // BUG: Diagnostic contains: flatMapIterable",
            "    Mono.empty().flatMapIterable(ImmutableSet::of);",
            "    // BUG: Diagnostic contains: handle",
            "    Mono.empty().handle((i, j) -> {});",
            "    // BUG: Diagnostic contains: map",
            "    Mono.empty().map(i -> i);",
            "",
            "    // BUG: Diagnostic contains: doOnNext",
            "    Flux.empty().doOnNext(i -> {});",
            "    // BUG: Diagnostic contains: filter",
            "    Flux.empty().filter(i -> true);",
            "    // BUG: Diagnostic contains: concatMap",
            "    Flux.empty().concatMap(Mono::just);",
            "    // BUG: Diagnostic contains: flatMap",
            "    Flux.empty().flatMap(Mono::just);",
            "    // BUG: Diagnostic contains: flatMapSequential",
            "    Flux.empty().flatMapSequential(Flux::just);",
            "    // BUG: Diagnostic contains: flatMapIterable",
            "    Flux.empty().flatMapIterable(ImmutableSet::of);",
            "    // BUG: Diagnostic contains: handle",
            "    Flux.empty().handle((i, j) -> {});",
            "    // BUG: Diagnostic contains: map",
            "    Flux.empty().map(i -> i);",
            "",
            "    // BUG: Diagnostic contains: doOnNext",
            "    Mono.just(8).then().doOnNext(i -> {});",
            "    // BUG: Diagnostic contains: filter",
            "    Mono.just(9).then().filter(i -> true);",
            "    // BUG: Diagnostic contains: flatMap",
            "    Mono.just(10).then().flatMap(Mono::just);",
            "    // BUG: Diagnostic contains: flatMapMany",
            "    Mono.just(11).then().flatMapMany(Flux::just);",
            "    // BUG: Diagnostic contains: flatMapIterable",
            "    Mono.just(12).then().flatMapIterable(ImmutableSet::of);",
            "    // BUG: Diagnostic contains: handle",
            "    Mono.just(13).then().handle((i, j) -> {});",
            "    // BUG: Diagnostic contains: map",
            "    Mono.just(14).then().map(i -> i);",
            "",
            "    Mono.just(15).subscribe();",
            "    Mono.just(16).subscribe(null, t -> {});",
            "",
            "    // BUG: Diagnostic contains:",
            "    Mono.just(17).then().subscribe(i -> {});",
            "    // BUG: Diagnostic contains:",
            "    Mono.just(18).then().subscribe(i -> {}, t -> {});",
            "    // BUG: Diagnostic contains:",
            "    Mono.just(19).then().subscribe(i -> {}, t -> {}, () -> {});",
            "    // BUG: Diagnostic contains:",
            "    Mono.just(20).then().subscribe(i -> {}, t -> {}, () -> {}, j -> {});",
            "    // BUG: Diagnostic contains:",
            "    Mono.just(21).then().subscribe(i -> {}, t -> {}, () -> {}, Context.empty());",
            "  }",
            "}")
        .doTest();
  }
}
