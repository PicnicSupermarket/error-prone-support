package tech.picnic.errorprone.bugpatterns;

import com.google.errorprone.BugCheckerRefactoringTestHelper;
import com.google.errorprone.BugCheckerRefactoringTestHelper.TestMode;
import com.google.errorprone.CompilationTestHelper;
import org.junit.jupiter.api.Test;

final class MockitoVerifyNoInteractionsUsageTest {
  private final BugCheckerRefactoringTestHelper refactoringTestHelper =
      BugCheckerRefactoringTestHelper.newInstance(
          MockitoVerifyNoInteractionsUsage.class, getClass());

  @Test
  void identification() {
    CompilationTestHelper.newInstance(MockitoVerifyNoInteractionsUsage.class, getClass())
        .addSourceLines(
            "A.java",
            "import static org.assertj.core.api.Assertions.assertThat;",
            "import static org.mockito.Mockito.mock;",
            "import static org.mockito.Mockito.verifyNoInteractions;",
            "import static org.mockito.Mockito.when;",
            "",
            "import org.junit.jupiter.api.Test;",
            "",
            "class A {",
            "  @Test",
            "  void a() {}",
            "",
            "  @Test",
            "  void b() {",
            "    Object mock = mock(Object.class);",
            "    verifyNoInteractions(mock);",
            "  }",
            "",
            "  @Test",
            "  void c() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "    verifyNoInteractions(mock1, mock2);",
            "  }",
            "",
            "  @Test",
            "  // BUG: Diagnostic contains:",
            "  void d() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "    verifyNoInteractions(mock1);",
            "    verifyNoInteractions(mock2);",
            "  }",
            "",
            "  @Test",
            "  // BUG: Diagnostic contains:",
            "  void e() {",
            "    Object mock1 = mock(Object.class);",
            "    verifyNoInteractions(mock1);",
            "    Object mock2 = mock(Object.class);",
            "    verifyNoInteractions(mock2);",
            "  }",
            "",
            "  @Test",
            "  // BUG: Diagnostic contains:",
            "  void f() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "    when(mock1.toString()).thenReturn(\"test\");",
            "    Object mock3 = mock(Object.class);",
            "    verifyNoInteractions(mock2, mock3);",
            "    Object mock4 = mock(Object.class);",
            "    String str = mock1.toString();",
            "    Object mock5 = mock(Object.class);",
            "    verifyNoInteractions(mock4);",
            "    assertThat(str).isEqualTo(\"test\");",
            "    verifyNoInteractions(mock5);",
            "  }",
            "",
            "  void testNonTestMethod() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "    verifyNoInteractions(mock1);",
            "    verifyNoInteractions(mock2);",
            "  }",
            "}")
        .addSourceLines(
            "B.java",
            "import static org.assertj.core.api.Assertions.assertThat;",
            "import static org.mockito.Mockito.mock;",
            "import static org.mockito.Mockito.when;",
            "",
            "import org.junit.jupiter.api.Test;",
            "import org.mockito.Mockito;",
            "",
            "class B {",
            "  private static void verifyNoInteractions(Object... objects) {}",
            "",
            "  @Test",
            "  void a() {",
            "    Object mock = mock(Object.class);",
            "    verifyNoInteractions(mock);",
            "  }",
            "",
            "  @Test",
            "  void b() {",
            "    Object mock = mock(Object.class);",
            "    Mockito.verifyNoInteractions(mock);",
            "  }",
            "",
            "  @Test",
            "  void c() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "    verifyNoInteractions(mock1, mock2);",
            "  }",
            "",
            "  @Test",
            "  void d() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "    verifyNoInteractions(mock1);",
            "    verifyNoInteractions(mock2);",
            "  }",
            "",
            "  @Test",
            "  void e() {",
            "    Object mock1 = mock(Object.class);",
            "    verifyNoInteractions(mock1);",
            "    Object mock2 = mock(Object.class);",
            "    verifyNoInteractions(mock2);",
            "  }",
            "",
            "  @Test",
            "  void f() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "    verifyNoInteractions(mock1);",
            "    Mockito.verifyNoInteractions(mock2);",
            "  }",
            "",
            "  @Test",
            "  // BUG: Diagnostic contains:",
            "  void g() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "    Mockito.verifyNoInteractions(mock1);",
            "    Mockito.verifyNoInteractions(mock2);",
            "  }",
            "",
            "  @Test",
            "  // BUG: Diagnostic contains:",
            "  void h() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "    when(mock1.toString()).thenReturn(\"test\");",
            "    Object mock3 = mock(Object.class);",
            "    Mockito.verifyNoInteractions(mock2, mock3);",
            "    Object mock4 = mock(Object.class);",
            "    String str = mock1.toString();",
            "    Object mock5 = mock(Object.class);",
            "    Mockito.verifyNoInteractions(mock4);",
            "    assertThat(str).isEqualTo(\"test\");",
            "    verifyNoInteractions(mock5);",
            "  }",
            "",
            "  void testNonTestMethod() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "    Mockito.verifyNoInteractions(mock1);",
            "    Mockito.verifyNoInteractions(mock2);",
            "  }",
            "}")
        .doTest();
  }

  @Test
  void replaceSequentialCalls() {
    refactoringTestHelper
        .addInputLines(
            "A.java",
            "import static org.mockito.Mockito.mock;",
            "import static org.mockito.Mockito.verifyNoInteractions;",
            "",
            "import org.junit.jupiter.api.Test;",
            "",
            "class A {",
            "  @Test",
            "  void m() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "    verifyNoInteractions(mock1);",
            "    verifyNoInteractions(mock2);",
            "  }",
            "}")
        .addOutputLines(
            "A.java",
            "import static org.mockito.Mockito.mock;",
            "import static org.mockito.Mockito.verifyNoInteractions;",
            "",
            "import org.junit.jupiter.api.Test;",
            "",
            "class A {",
            "  @Test",
            "  void m() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "",
            "    verifyNoInteractions(mock1, mock2);",
            "  }",
            "}")
        .doTest(TestMode.TEXT_MATCH);
  }

  @Test
  void replaceNonSequentialCalls() {
    refactoringTestHelper
        .addInputLines(
            "A.java",
            "import static org.mockito.Mockito.mock;",
            "import static org.mockito.Mockito.verifyNoInteractions;",
            "",
            "import org.junit.jupiter.api.Test;",
            "",
            "class A {",
            "  @Test",
            "  void m() {",
            "    Object mock1 = mock(Object.class);",
            "    verifyNoInteractions(mock1);",
            "    Object mock2 = mock(Object.class);",
            "    verifyNoInteractions(mock2);",
            "  }",
            "}")
        .addOutputLines(
            "A.java",
            "import static org.mockito.Mockito.mock;",
            "import static org.mockito.Mockito.verifyNoInteractions;",
            "",
            "import org.junit.jupiter.api.Test;",
            "",
            "class A {",
            "  @Test",
            "  void m() {",
            "    Object mock1 = mock(Object.class);",
            "",
            "    Object mock2 = mock(Object.class);",
            "    verifyNoInteractions(mock1, mock2);",
            "  }",
            "}")
        .doTest(TestMode.TEXT_MATCH);
  }

  @Test
  void replaceComplexCalls() {
    refactoringTestHelper
        .addInputLines(
            "A.java",
            "import static org.assertj.core.api.Assertions.assertThat;",
            "import static org.mockito.Mockito.mock;",
            "import static org.mockito.Mockito.verifyNoInteractions;",
            "import static org.mockito.Mockito.when;",
            "",
            "import org.junit.jupiter.api.Test;",
            "",
            "class A {",
            "  @Test",
            "  void m() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "    when(mock1.toString()).thenReturn(\"test\");",
            "    Object mock3 = mock(Object.class);",
            "    verifyNoInteractions(mock2, mock3);",
            "    Object mock4 = mock(Object.class);",
            "    String str = mock1.toString();",
            "    Object mock5 = mock(Object.class);",
            "    verifyNoInteractions(mock4);",
            "    assertThat(str).isEqualTo(\"test\");",
            "    verifyNoInteractions(mock5);",
            "  }",
            "}")
        .addOutputLines(
            "A.java",
            "import static org.assertj.core.api.Assertions.assertThat;",
            "import static org.mockito.Mockito.mock;",
            "import static org.mockito.Mockito.verifyNoInteractions;",
            "import static org.mockito.Mockito.when;",
            "",
            "import org.junit.jupiter.api.Test;",
            "",
            "class A {",
            "  @Test",
            "  void m() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "    when(mock1.toString()).thenReturn(\"test\");",
            "    Object mock3 = mock(Object.class);",
            "",
            "    Object mock4 = mock(Object.class);",
            "    String str = mock1.toString();",
            "    Object mock5 = mock(Object.class);",
            "",
            "    assertThat(str).isEqualTo(\"test\");",
            "    verifyNoInteractions(mock2, mock3, mock4, mock5);",
            "  }",
            "}")
        .doTest(TestMode.TEXT_MATCH);
  }

  @Test
  void replaceStaticCalls() {
    refactoringTestHelper
        .addInputLines(
            "A.java",
            "import static org.mockito.Mockito.mock;",
            "",
            "import org.junit.jupiter.api.Test;",
            "import org.mockito.Mockito;",
            "",
            "class A {",
            "  @Test",
            "  void m() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "    Mockito.verifyNoInteractions(mock1);",
            "    Mockito.verifyNoInteractions(mock2);",
            "  }",
            "}")
        .addOutputLines(
            "A.java",
            "import static org.mockito.Mockito.mock;",
            "",
            "import org.junit.jupiter.api.Test;",
            "import org.mockito.Mockito;",
            "",
            "class A {",
            "  @Test",
            "  void m() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "",
            "    Mockito.verifyNoInteractions(mock1, mock2);",
            "  }",
            "}")
        .doTest(TestMode.TEXT_MATCH);
  }

  @Test
  void replaceComplexStaticCalls() {
    refactoringTestHelper
        .addInputLines(
            "A.java",
            "import static org.assertj.core.api.Assertions.assertThat;",
            "import static org.mockito.Mockito.mock;",
            "import static org.mockito.Mockito.when;",
            "",
            "import org.junit.jupiter.api.Test;",
            "import org.mockito.Mockito;",
            "",
            "class A {",
            "  private static void verifyNoInteractions(Object... objects) {}",
            "",
            "  @Test",
            "  void m() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "    when(mock1.toString()).thenReturn(\"test\");",
            "    Object mock3 = mock(Object.class);",
            "    Mockito.verifyNoInteractions(mock2, mock3);",
            "    Object mock4 = mock(Object.class);",
            "    String str = mock1.toString();",
            "    Object mock5 = mock(Object.class);",
            "    Mockito.verifyNoInteractions(mock4);",
            "    assertThat(str).isEqualTo(\"test\");",
            "    verifyNoInteractions(mock5);",
            "  }",
            "}")
        .addOutputLines(
            "A.java",
            "import static org.assertj.core.api.Assertions.assertThat;",
            "import static org.mockito.Mockito.mock;",
            "import static org.mockito.Mockito.when;",
            "",
            "import org.junit.jupiter.api.Test;",
            "import org.mockito.Mockito;",
            "",
            "class A {",
            "  private static void verifyNoInteractions(Object... objects) {}",
            "",
            "  @Test",
            "  void m() {",
            "    Object mock1 = mock(Object.class);",
            "    Object mock2 = mock(Object.class);",
            "    when(mock1.toString()).thenReturn(\"test\");",
            "    Object mock3 = mock(Object.class);",
            "",
            "    Object mock4 = mock(Object.class);",
            "    String str = mock1.toString();",
            "    Object mock5 = mock(Object.class);",
            "    Mockito.verifyNoInteractions(mock2, mock3, mock4);",
            "    assertThat(str).isEqualTo(\"test\");",
            "    verifyNoInteractions(mock5);",
            "  }",
            "}")
        .doTest(TestMode.TEXT_MATCH);
  }
}
