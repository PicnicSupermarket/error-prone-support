package tech.picnic.errorprone.bugpatterns;

import com.google.common.collect.ImmutableList;
import com.google.errorprone.BugCheckerRefactoringTestHelper;
import com.google.errorprone.BugCheckerRefactoringTestHelper.TestMode;
import com.google.errorprone.CompilationTestHelper;
import org.junit.jupiter.api.Test;

final class DuplicateAnnotationAttributeListingTest {
  @Test
  void identification() {
    CompilationTestHelper.newInstance(DuplicateAnnotationAttributeListing.class, getClass())
        .addSourceLines(
            "A.java",
            "import static java.math.RoundingMode.DOWN;",
            "import static java.math.RoundingMode.UP;",
            "",
            "import java.math.RoundingMode;",
            "",
            "interface A {",
            "  @interface Foo {",
            "    String[] value() default {};",
            "",
            "    int[] ints() default {};",
            "",
            "    Class<?>[] cls() default {};",
            "",
            "    RoundingMode[] enums() default {};",
            "",
            "    Bar[] anns() default {};",
            "  }",
            "",
            "  @interface Bar {",
            "    String[] value() default {};",
            "  }",
            "",
            "  @Foo({})",
            "  A noString();",
            "",
            "  @Foo({\"a\"})",
            "  A oneString();",
            "",
            "  @Foo({\"a\", \"b\"})",
            "  A distinctStrings();",
            "",
            "  @Foo({\"a\", \"A\"})",
            "  A distinctStringCaseInsensitive();",
            "",
            "  // BUG: Diagnostic contains:",
            "  @Foo({\"a\", \"a\"})",
            "  A duplicateString();",
            "",
            "  @Foo(ints = {})",
            "  A noInts();",
            "",
            "  @Foo(ints = {0})",
            "  A oneInt();",
            "",
            "  @Foo(ints = {0, 1})",
            "  A distinctInts();",
            "",
            "  // BUG: Diagnostic contains:",
            "  @Foo(ints = {0, 0})",
            "  A duplicateInts();",
            "",
            "  @Foo(cls = {})",
            "  A noClasses();",
            "",
            "  @Foo(cls = {int.class})",
            "  A oneClass();",
            "",
            "  @Foo(cls = {int.class, long.class})",
            "  A distinctClasses();",
            "",
            "  // BUG: Diagnostic contains:",
            "  @Foo(cls = {int.class, int.class})",
            "  A duplicateClasses();",
            "",
            "  @Foo(enums = {})",
            "  A noEnums();",
            "",
            "  @Foo(enums = {DOWN})",
            "  A oneEnum();",
            "",
            "  @Foo(enums = {DOWN, UP})",
            "  A distinctEnums();",
            "",
            "  // BUG: Diagnostic contains:",
            "  @Foo(enums = {DOWN, DOWN})",
            "  A duplicateEnums();",
            "",
            "  @Foo(anns = {})",
            "  A noAnns();",
            "",
            "  @Foo(anns = {@Bar(\"a\")})",
            "  A oneAnn();",
            "",
            "  @Foo(anns = {@Bar(\"a\"), @Bar(\"b\")})",
            "  A distinctAnns();",
            "",
            "  // BUG: Diagnostic contains:",
            "  @Foo(anns = {@Bar(\"a\"), @Bar(\"a\")})",
            "  A duplicateAnns();",
            "",
            "  // BUG: Diagnostic contains:",
            "  @Foo(anns = {@Bar({\"a\", \"a\"}), @Bar({\"b\", \"b\"})})",
            "  A duplicateListingsInnerAnns();",
            "",
            "  // BUG: Diagnostic contains:",
            "  @Foo(anns = {@Bar({\"a\", \"b\"}), @Bar({\"a\", \"b\"})})",
            "  A duplicateInnerAnns();",
            "",
            "  @Foo({\"a=foo\", \"a.b=bar\", \"a.b=baz\"})",
            "  A hierarchicallyDuplicate();",
            "}")
        .doTest();
  }

  @Test
  void replacement() {
    BugCheckerRefactoringTestHelper.newInstance(
            DuplicateAnnotationAttributeListing.class, getClass())
        .addInputLines(
            "A.java",
            "import static java.math.RoundingMode.DOWN;",
            "",
            "import java.math.RoundingMode;",
            "",
            "interface A {",
            "  @interface Foo {",
            "    String[] value() default {};",
            "",
            "    Class<?>[] cls() default {};",
            "",
            "    RoundingMode[] enums() default {};",
            "",
            "    Bar[] anns() default {};",
            "  }",
            "",
            "  @interface Bar {",
            "    String[] value() default {};",
            "  }",
            "",
            "  @Foo({\"\", \" \", \"a\", \"a\"})",
            "  A duplicateString();",
            "",
            "  @Foo(cls = {A.class, A.class})",
            "  A duplicateClasses();",
            "",
            "  @Foo(enums = {DOWN, DOWN})",
            "  A duplicateEnums();",
            "",
            "  @Foo(anns = {@Bar(\"a\"), @Bar(\"a\")})",
            "  A duplicateAnns();",
            "",
            "  @Foo(anns = {@Bar({\"a\", \"a\"}), @Bar({\"b\", \"b\"})})",
            "  A duplicateListingsInnerAnns();",
            "}")
        .addOutputLines(
            "A.java",
            "import static java.math.RoundingMode.DOWN;",
            "",
            "import java.math.RoundingMode;",
            "",
            "interface A {",
            "  @interface Foo {",
            "    String[] value() default {};",
            "",
            "    Class<?>[] cls() default {};",
            "",
            "    RoundingMode[] enums() default {};",
            "",
            "    Bar[] anns() default {};",
            "  }",
            "",
            "  @interface Bar {",
            "    String[] value() default {};",
            "  }",
            "",
            "  @Foo({\"\", \" \", \"a\"})",
            "  A duplicateString();",
            "",
            "  @Foo(cls = {A.class})",
            "  A duplicateClasses();",
            "",
            "  @Foo(enums = {DOWN})",
            "  A duplicateEnums();",
            "",
            "  @Foo(anns = {@Bar(\"a\")})",
            "  A duplicateAnns();",
            "",
            "  @Foo(anns = {@Bar(\"a\"), @Bar(\"b\")})",
            "  A duplicateListingsInnerAnns();",
            "}")
        .doTest(TestMode.TEXT_MATCH);
  }

  @Test
  void filtering() {
    /* Some violations are not flagged because they are not in- or excluded. */
    CompilationTestHelper.newInstance(DuplicateAnnotationAttributeListing.class, getClass())
        .setArgs(
            ImmutableList.of(
                "-XepOpt:DuplicateAnnotationAttributeListing:Includes=pkg.A.Foo,pkg.A.Bar",
                "-XepOpt:DuplicateAnnotationAttributeListing:Excludes=pkg.A.Bar#value"))
        .addSourceLines(
            "pkg/A.java",
            "package pkg;",
            "",
            "interface A {",
            "  @interface Foo {",
            "    String[] value() default {};",
            "",
            "    String[] value2() default {};",
            "  }",
            "",
            "  @interface Bar {",
            "    String[] value() default {};",
            "",
            "    String[] value2() default {};",
            "  }",
            "",
            "  @interface Baz {",
            "    String[] value() default {};",
            "",
            "    String[] value2() default {};",
            "  }",
            "",
            "  // BUG: Diagnostic contains:",
            "  @Foo({\"a\", \"a\"})",
            "  A fooValue();",
            "",
            "  // BUG: Diagnostic contains:",
            "  @Foo(value2 = {\"a\", \"a\"})",
            "  A fooValue2();",
            "",
            "  @Bar({\"a\", \"a\"})",
            "  A barValue();",
            "",
            "  // BUG: Diagnostic contains:",
            "  @Bar(value2 = {\"a\", \"a\"})",
            "  A barValue2();",
            "",
            "  @Baz({\"a\", \"a\"})",
            "  A bazValue();",
            "",
            "  @Baz(value2 = {\"a\", \"a\"})",
            "  A bazValue2();",
            "}")
        .doTest();
  }
}
