package tech.picnic.errorprone.refaster.matchers;

import static com.google.errorprone.BugPattern.SeverityLevel.ERROR;

import com.google.errorprone.BugPattern;
import com.google.errorprone.CompilationTestHelper;
import com.google.errorprone.bugpatterns.BugChecker;
import org.junit.jupiter.api.Test;

final class IsEmptyTest {
  @Test
  void matches() {
    CompilationTestHelper.newInstance(MatcherTestChecker.class, getClass())
        .addSourceLines(
            "A.java",
            "import static com.google.common.collect.ImmutableList.toImmutableList;",
            "",
            "import com.google.common.collect.ImmutableList;",
            "import com.google.common.collect.ImmutableListMultimap;",
            "import com.google.common.collect.ImmutableMap;",
            "import com.google.common.collect.ImmutableSet;",
            "import com.google.common.collect.ImmutableSetMultimap;",
            "import java.util.ArrayList;",
            "import java.util.Collection;",
            "import java.util.Collections;",
            "import java.util.Comparator;",
            "import java.util.HashMap;",
            "import java.util.HashSet;",
            "import java.util.Iterator;",
            "import java.util.LinkedHashMap;",
            "import java.util.LinkedHashSet;",
            "import java.util.LinkedList;",
            "import java.util.List;",
            "import java.util.Map;",
            "import java.util.Optional;",
            "import java.util.OptionalDouble;",
            "import java.util.OptionalInt;",
            "import java.util.OptionalLong;",
            "import java.util.Random;",
            "import java.util.Set;",
            "import java.util.Spliterator;",
            "import java.util.Spliterators;",
            "import java.util.Stack;",
            "import java.util.TreeMap;",
            "import java.util.TreeSet;",
            "import java.util.Vector;",
            "import java.util.stream.DoubleStream;",
            "import java.util.stream.IntStream;",
            "import java.util.stream.LongStream;",
            "import java.util.stream.Stream;",
            "import reactor.core.publisher.Flux;",
            "import reactor.core.publisher.Mono;",
            "import reactor.util.context.Context;",
            "import reactor.util.context.ContextView;",
            "",
            "class A {",
            "  int[] negative1() {",
            "    return new int[1];",
            "  }",
            "",
            "  int[][] negative2() {",
            "    return new int[1][0];",
            "  }",
            "",
            "  int[] negative3() {",
            "    return new int[] {0};",
            "  }",
            "",
            "  int[][] negative4() {",
            "    return new int[][] {{0}};",
            "  }",
            "",
            "  int[] negative5() {",
            "    int i = hashCode();",
            "    return new int[i];",
            "  }",
            "",
            "  Random negative6() {",
            "    return new Random();",
            "  }",
            "",
            "  List<Integer> negative7() {",
            "    return new ArrayList<>(ImmutableList.of(1));",
            "  }",
            "",
            "  Map<Integer, Integer> negative8() {",
            "    return new HashMap<>(ImmutableMap.of(1, 2));",
            "  }",
            "",
            "  Set<Integer> negative9() {",
            "    return new HashSet<>(ImmutableList.of(1));",
            "  }",
            "",
            "  Map<Integer, Integer> negative10() {",
            "    return new LinkedHashMap<>(ImmutableMap.of(1, 2));",
            "  }",
            "",
            "  Set<Integer> negative11() {",
            "    return new LinkedHashSet<>(ImmutableList.of(1));",
            "  }",
            "",
            "  List<Integer> negative12() {",
            "    return new LinkedList<>(ImmutableList.of(1));",
            "  }",
            "",
            "  Map<Integer, Integer> negative13() {",
            "    return new HashMap<>(ImmutableMap.of(1, 2));",
            "  }",
            "",
            "  Set<Integer> negative14() {",
            "    return new HashSet<>(ImmutableList.of(1));",
            "  }",
            "",
            "  List<Integer> negative15() {",
            "    return new Vector<>(ImmutableList.of(1));",
            "  }",
            "",
            "  Stream<Integer> negative16() {",
            "    return Stream.of(1);",
            "  }",
            "",
            "  DoubleStream negative17() {",
            "    return DoubleStream.of(1);",
            "  }",
            "",
            "  IntStream negative18() {",
            "    return IntStream.of(1);",
            "  }",
            "",
            "  LongStream negative19() {",
            "    return LongStream.of(1);",
            "  }",
            "",
            "  List<Integer> negative20() {",
            "    return List.of(1);",
            "  }",
            "",
            "  ImmutableList<Integer> negative21() {",
            "    return ImmutableList.of(1);",
            "  }",
            "",
            "  Set<Integer> negative22() {",
            "    return Set.of(1);",
            "  }",
            "",
            "  ImmutableSet<Integer> negative23() {",
            "    return ImmutableSet.of(1);",
            "  }",
            "",
            "  Map<Integer, Integer> negative24() {",
            "    return Map.of(1, 2);",
            "  }",
            "",
            "  Map<Integer, Integer> negative25() {",
            "    return Map.ofEntries(Map.entry(1, 2));",
            "  }",
            "",
            "  ImmutableMap<Integer, Integer> negative26() {",
            "    return ImmutableMap.of(1, 2);",
            "  }",
            "",
            "  ImmutableMap<Integer, Integer> negative27() {",
            "    return ImmutableMap.ofEntries(Map.entry(1, 2));",
            "  }",
            "",
            "  ImmutableSetMultimap<Integer, Integer> negative28() {",
            "    return ImmutableSetMultimap.of(1, 2);",
            "  }",
            "",
            "  Optional<Integer> negative29() {",
            "    return Optional.of(1);",
            "  }",
            "",
            "  OptionalDouble negative30() {",
            "    return OptionalDouble.of(1);",
            "  }",
            "",
            "  OptionalInt negative31() {",
            "    return OptionalInt.of(1);",
            "  }",
            "",
            "  OptionalLong negative32() {",
            "    return OptionalLong.of(1);",
            "  }",
            "",
            "  Flux<Integer> negative33() {",
            "    return Flux.just(1);",
            "  }",
            "",
            "  Mono<Integer> negative34() {",
            "    return Mono.just(1);",
            "  }",
            "",
            "  Context negative35() {",
            "    return Context.of(1, 2);",
            "  }",
            "",
            "  List<Integer> negative36() {",
            "    return Collections.singletonList(1);",
            "  }",
            "",
            "  Spliterator<Integer> negative37() {",
            "    return Spliterators.spliterator(new int[] {1}, 0);",
            "  }",
            "",
            "  Iterable<Integer> negative38() {",
            "    return (Iterable<Integer>) ImmutableList.of(1);",
            "  }",
            "",
            "  Iterable<Integer> negative39() {",
            "    return (ImmutableList.of(1));",
            "  }",
            "",
            "  Stream<Integer> negative40() {",
            "    return Optional.of(1).stream();",
            "  }",
            "",
            "  DoubleStream negative41() {",
            "    return OptionalDouble.of(1).stream();",
            "  }",
            "",
            "  IntStream negative42() {",
            "    return OptionalInt.of(1).stream();",
            "  }",
            "",
            "  LongStream negative43() {",
            "    return OptionalLong.of(1).stream();",
            "  }",
            "",
            "  ImmutableList<Integer> negative44() {",
            "    return ImmutableList.of(1).reverse();",
            "  }",
            "",
            "  Iterator<Integer> negative45() {",
            "    return ImmutableList.of(1).iterator();",
            "  }",
            "",
            "  Map<Integer, Collection<Integer>> negative46() {",
            "    return ImmutableListMultimap.of(1, 2).asMap();",
            "  }",
            "",
            "  ImmutableSetMultimap<Integer, Integer> negative47() {",
            "    return ImmutableSetMultimap.of(1, 2).inverse();",
            "  }",
            "",
            "  Optional<Integer> negative48() {",
            "    return Stream.of(1).findAny();",
            "  }",
            "",
            "  OptionalDouble negative49() {",
            "    return DoubleStream.of(1).min();",
            "  }",
            "",
            "  OptionalInt negative50() {",
            "    return IntStream.of(1).max();",
            "  }",
            "",
            "  OptionalLong negative51() {",
            "    return LongStream.of(1).findFirst();",
            "  }",
            "",
            "  Spliterator<Integer> negative52() {",
            "    return ImmutableList.of(1).spliterator();",
            "  }",
            "",
            "  Object[] negative53() {",
            "    return ImmutableList.of(1).toArray();",
            "  }",
            "",
            "  Integer[] negative54() {",
            "    return ImmutableList.of(1).toArray(Integer[]::new);",
            "  }",
            "",
            "  List<String> negative55() {",
            "    // BUG: Diagnostic contains:",
            "    return ImmutableList.<List<String>>of()",
            "        // NO BUG: The following invocation is not flagged.",
            "        .get(0);",
            "  }",
            "",
            "  ImmutableList<String> negative56() {",
            "    // BUG: Diagnostic contains:",
            "    return Stream.<String>empty()",
            "        // NO BUG: The following invocation is not flagged. (But perhaps it should be.)",
            "        .collect(toImmutableList());",
            "  }",
            "",
            "  Flux<Integer> negative57() {",
            "    // BUG: Diagnostic contains:",
            "    return Flux.<Integer>empty()",
            "        // NO BUG: The following invocation is not flagged.",
            "        .concatWithValues(1);",
            "  }",
            "",
            "  Mono<Integer> negative58() {",
            "    // BUG: Diagnostic contains:",
            "    return Mono.<Integer>empty()",
            "        // NO BUG: The following invocation is not flagged.",
            "        .thenReturn(1);",
            "  }",
            "",
            "  Context negative59() {",
            "    // BUG: Diagnostic contains:",
            "    return Context.empty()",
            "        // NO BUG: The following invocation is not flagged.",
            "        .put(1, 2);",
            "  }",
            "",
            "  int[] positive1() {",
            "    // BUG: Diagnostic contains:",
            "    return new int[0];",
            "  }",
            "",
            "  int[][] positive2() {",
            "    // BUG: Diagnostic contains:",
            "    return new int[0][1];",
            "  }",
            "",
            "  int[] positive3() {",
            "    // BUG: Diagnostic contains:",
            "    return new int[] {};",
            "  }",
            "",
            "  int[][] positive4() {",
            "    // BUG: Diagnostic contains:",
            "    return new int[][] {};",
            "  }",
            "",
            "  List<Integer> positive5() {",
            "    // BUG: Diagnostic contains:",
            "    return new ArrayList<>();",
            "  }",
            "",
            "  List<String> positive6() {",
            "    // BUG: Diagnostic contains:",
            "    return new ArrayList<>(1);",
            "  }",
            "",
            "  List<String> positive7() {",
            "    // BUG: Diagnostic contains:",
            "    return new ArrayList<>(",
            "        // BUG: Diagnostic contains:",
            "        ImmutableList.of());",
            "  }",
            "",
            "  Map<String, String> positive8() {",
            "    // BUG: Diagnostic contains:",
            "    return new HashMap<>();",
            "  }",
            "",
            "  Map<String, String> positive9() {",
            "    // BUG: Diagnostic contains:",
            "    return new HashMap<>(1);",
            "  }",
            "",
            "  Map<String, String> positive10() {",
            "    // BUG: Diagnostic contains:",
            "    return new HashMap<>(1, 1.0F);",
            "  }",
            "",
            "  Map<String, String> positive11() {",
            "    // BUG: Diagnostic contains:",
            "    return new HashMap<>(",
            "        // BUG: Diagnostic contains:",
            "        ImmutableMap.of());",
            "  }",
            "",
            "  Set<Integer> positive12() {",
            "    // BUG: Diagnostic contains:",
            "    return new HashSet<>();",
            "  }",
            "",
            "  Set<Integer> positive13() {",
            "    // BUG: Diagnostic contains:",
            "    return new HashSet<>(1);",
            "  }",
            "",
            "  Set<Integer> positive14() {",
            "    // BUG: Diagnostic contains:",
            "    return new HashSet<>(1, 1.0F);",
            "  }",
            "",
            "  Set<Integer> positive15() {",
            "    // BUG: Diagnostic contains:",
            "    return new HashSet<>(",
            "        // BUG: Diagnostic contains:",
            "        ImmutableList.of());",
            "  }",
            "",
            "  Map<String, String> positive16() {",
            "    // BUG: Diagnostic contains:",
            "    return new LinkedHashMap<>();",
            "  }",
            "",
            "  Map<String, String> positive17() {",
            "    // BUG: Diagnostic contains:",
            "    return new LinkedHashMap<>(1);",
            "  }",
            "",
            "  Map<String, String> positive18() {",
            "    // BUG: Diagnostic contains:",
            "    return new LinkedHashMap<>(1, 1.0F);",
            "  }",
            "",
            "  Map<String, String> positive19() {",
            "    // BUG: Diagnostic contains:",
            "    return new LinkedHashMap<>(1, 1.0F, false);",
            "  }",
            "",
            "  Map<String, String> positive20() {",
            "    // BUG: Diagnostic contains:",
            "    return new LinkedHashMap<>(",
            "        // BUG: Diagnostic contains:",
            "        ImmutableMap.of());",
            "  }",
            "",
            "  Set<Integer> positive21() {",
            "    // BUG: Diagnostic contains:",
            "    return new LinkedHashSet<>();",
            "  }",
            "",
            "  Set<Integer> positive22() {",
            "    // BUG: Diagnostic contains:",
            "    return new LinkedHashSet<>(1);",
            "  }",
            "",
            "  Set<Integer> positive23() {",
            "    // BUG: Diagnostic contains:",
            "    return new LinkedHashSet<>(1, 1.0F);",
            "  }",
            "",
            "  Set<Integer> positive24() {",
            "    // BUG: Diagnostic contains:",
            "    return new LinkedHashSet<>(",
            "        // BUG: Diagnostic contains:",
            "        ImmutableList.of());",
            "  }",
            "",
            "  List<Integer> positive25() {",
            "    // BUG: Diagnostic contains:",
            "    return new LinkedList<>();",
            "  }",
            "",
            "  List<String> positive26() {",
            "    // BUG: Diagnostic contains:",
            "    return new LinkedList<>(",
            "        // BUG: Diagnostic contains:",
            "        ImmutableList.of());",
            "  }",
            "",
            "  List<Integer> positive27() {",
            "    // BUG: Diagnostic contains:",
            "    return new Stack<>();",
            "  }",
            "",
            "  Map<String, String> positive28() {",
            "    // BUG: Diagnostic contains:",
            "    return new TreeMap<>();",
            "  }",
            "",
            "  Map<String, String> positive29() {",
            "    // BUG: Diagnostic contains:",
            "    return new TreeMap<>(Comparator.naturalOrder());",
            "  }",
            "",
            "  Map<String, String> positive30() {",
            "    // BUG: Diagnostic contains:",
            "    return new TreeMap<>(",
            "        // BUG: Diagnostic contains:",
            "        ImmutableMap.of());",
            "  }",
            "",
            "  Set<Integer> positive31() {",
            "    // BUG: Diagnostic contains:",
            "    return new TreeSet<>();",
            "  }",
            "",
            "  Set<Integer> positive32() {",
            "    // BUG: Diagnostic contains:",
            "    return new TreeSet<>(Comparator.naturalOrder());",
            "  }",
            "",
            "  Set<Integer> positive33() {",
            "    // BUG: Diagnostic contains:",
            "    return new TreeSet<>(",
            "        // BUG: Diagnostic contains:",
            "        ImmutableList.of());",
            "  }",
            "",
            "  List<Integer> positive34() {",
            "    // BUG: Diagnostic contains:",
            "    return new Vector<>();",
            "  }",
            "",
            "  List<Integer> positive35() {",
            "    // BUG: Diagnostic contains:",
            "    return new Vector<>(1);",
            "  }",
            "",
            "  List<Integer> positive36() {",
            "    // BUG: Diagnostic contains:",
            "    return new Vector<>(1, 2);",
            "  }",
            "",
            "  List<Integer> positive37() {",
            "    // BUG: Diagnostic contains:",
            "    return new Vector<>(",
            "        // BUG: Diagnostic contains:",
            "        ImmutableList.of());",
            "  }",
            "",
            "  List<Integer> positive38() {",
            "    // BUG: Diagnostic contains:",
            "    return Collections.EMPTY_LIST;",
            "  }",
            "",
            "  Map<String, String> positive39() {",
            "    // BUG: Diagnostic contains:",
            "    return Collections.EMPTY_MAP;",
            "  }",
            "",
            "  Set<Integer> positive40() {",
            "    // BUG: Diagnostic contains:",
            "    return Collections.EMPTY_SET;",
            "  }",
            "",
            "  Stream<Integer> positive41() {",
            "    // BUG: Diagnostic contains:",
            "    return Stream.empty();",
            "  }",
            "",
            "  Stream<Integer> positive42() {",
            "    // BUG: Diagnostic contains:",
            "    return Stream.of();",
            "  }",
            "",
            "  DoubleStream positive43() {",
            "    // BUG: Diagnostic contains:",
            "    return DoubleStream.empty();",
            "  }",
            "",
            "  DoubleStream positive44() {",
            "    // BUG: Diagnostic contains:",
            "    return DoubleStream.of();",
            "  }",
            "",
            "  IntStream positive45() {",
            "    // BUG: Diagnostic contains:",
            "    return IntStream.empty();",
            "  }",
            "",
            "  IntStream positive46() {",
            "    // BUG: Diagnostic contains:",
            "    return IntStream.of();",
            "  }",
            "",
            "  LongStream positive47() {",
            "    // BUG: Diagnostic contains:",
            "    return LongStream.empty();",
            "  }",
            "",
            "  LongStream positive48() {",
            "    // BUG: Diagnostic contains:",
            "    return LongStream.of();",
            "  }",
            "",
            "  List<Integer> positive49() {",
            "    // BUG: Diagnostic contains:",
            "    return List.of();",
            "  }",
            "",
            "  ImmutableList<Integer> positive50() {",
            "    // BUG: Diagnostic contains:",
            "    return ImmutableList.of();",
            "  }",
            "",
            "  Set<Integer> positive51() {",
            "    // BUG: Diagnostic contains:",
            "    return Set.of();",
            "  }",
            "",
            "  ImmutableSet<Integer> positive52() {",
            "    // BUG: Diagnostic contains:",
            "    return ImmutableSet.of();",
            "  }",
            "",
            "  Map<String, String> positive53() {",
            "    // BUG: Diagnostic contains:",
            "    return Map.of();",
            "  }",
            "",
            "  Map<Integer, Integer> positive54() {",
            "    // BUG: Diagnostic contains:",
            "    return Map.ofEntries();",
            "  }",
            "",
            "  ImmutableMap<String, Integer> positive55() {",
            "    // BUG: Diagnostic contains:",
            "    return ImmutableMap.of();",
            "  }",
            "",
            "  ImmutableMap<String, Integer> positive56() {",
            "    // BUG: Diagnostic contains:",
            "    return ImmutableMap.ofEntries();",
            "  }",
            "",
            "  ImmutableSetMultimap<String, Integer> positive57() {",
            "    // BUG: Diagnostic contains:",
            "    return ImmutableSetMultimap.of();",
            "  }",
            "",
            "  Optional<Integer> positive58() {",
            "    // BUG: Diagnostic contains:",
            "    return Optional.empty();",
            "  }",
            "",
            "  OptionalDouble positive59() {",
            "    // BUG: Diagnostic contains:",
            "    return OptionalDouble.empty();",
            "  }",
            "",
            "  OptionalInt positive60() {",
            "    // BUG: Diagnostic contains:",
            "    return OptionalInt.empty();",
            "  }",
            "",
            "  OptionalLong positive61() {",
            "    // BUG: Diagnostic contains:",
            "    return OptionalLong.empty();",
            "  }",
            "",
            "  Flux<Integer> positive62() {",
            "    // BUG: Diagnostic contains:",
            "    return Flux.empty();",
            "  }",
            "",
            "  Flux<Integer> positive63() {",
            "    // BUG: Diagnostic contains:",
            "    return Flux.just();",
            "  }",
            "",
            "  Mono<Integer> positive64() {",
            "    // BUG: Diagnostic contains:",
            "    return Mono.empty();",
            "  }",
            "",
            "  Context positive65() {",
            "    // BUG: Diagnostic contains:",
            "    return Context.empty();",
            "  }",
            "",
            "  List<Integer> positive66() {",
            "    // BUG: Diagnostic contains:",
            "    return Collections.emptyList();",
            "  }",
            "",
            "  Map<String, String> positive67() {",
            "    // BUG: Diagnostic contains:",
            "    return Collections.emptyMap();",
            "  }",
            "",
            "  Set<Integer> positive68() {",
            "    // BUG: Diagnostic contains:",
            "    return Collections.emptySet();",
            "  }",
            "",
            "  Spliterator<Integer> positive69() {",
            "    // BUG: Diagnostic contains:",
            "    return Spliterators.emptySpliterator();",
            "  }",
            "",
            "  Spliterator.OfDouble positive70() {",
            "    // BUG: Diagnostic contains:",
            "    return Spliterators.emptyDoubleSpliterator();",
            "  }",
            "",
            "  Spliterator.OfInt positive71() {",
            "    // BUG: Diagnostic contains:",
            "    return Spliterators.emptyIntSpliterator();",
            "  }",
            "",
            "  Spliterator.OfLong positive72() {",
            "    // BUG: Diagnostic contains:",
            "    return Spliterators.emptyLongSpliterator();",
            "  }",
            "",
            "  Iterable<Integer> positive73() {",
            "    // BUG: Diagnostic contains:",
            "    return (Iterable<Integer>)",
            "        // BUG: Diagnostic contains:",
            "        ImmutableList.<Integer>of();",
            "  }",
            "",
            "  Iterable<Integer> positive74() {",
            "    // BUG: Diagnostic contains:",
            "    return (",
            "    // BUG: Diagnostic contains:",
            "    ImmutableList.<Integer>of());",
            "  }",
            "",
            "  Stream<Integer> positive75() {",
            "    // BUG: Diagnostic contains:",
            "    return Optional.<Integer>empty()",
            "        // BUG: Diagnostic contains:",
            "        .stream();",
            "  }",
            "",
            "  DoubleStream positive76() {",
            "    // BUG: Diagnostic contains:",
            "    return OptionalDouble.empty()",
            "        // BUG: Diagnostic contains:",
            "        .stream();",
            "  }",
            "",
            "  IntStream positive77() {",
            "    // BUG: Diagnostic contains:",
            "    return OptionalInt.empty()",
            "        // BUG: Diagnostic contains:",
            "        .stream();",
            "  }",
            "",
            "  LongStream positive78() {",
            "    // BUG: Diagnostic contains:",
            "    return OptionalLong.empty()",
            "        // BUG: Diagnostic contains:",
            "        .stream();",
            "  }",
            "",
            "  ImmutableList<Integer> positive79() {",
            "    // BUG: Diagnostic contains:",
            "    return ImmutableList.<Integer>of()",
            "        // BUG: Diagnostic contains:",
            "        .reverse();",
            "  }",
            "",
            "  Iterator<Integer> positive80() {",
            "    // BUG: Diagnostic contains:",
            "    return ImmutableList.<Integer>of()",
            "        // BUG: Diagnostic contains:",
            "        .iterator();",
            "  }",
            "",
            "  Map<Integer, Collection<Integer>> positive81() {",
            "    // BUG: Diagnostic contains:",
            "    return ImmutableListMultimap.<Integer, Integer>of()",
            "        // BUG: Diagnostic contains:",
            "        .asMap();",
            "  }",
            "",
            "  ImmutableSetMultimap<Integer, Integer> positive82() {",
            "    // BUG: Diagnostic contains:",
            "    return ImmutableSetMultimap.<Integer, Integer>of()",
            "        // BUG: Diagnostic contains:",
            "        .inverse();",
            "  }",
            "",
            "  Optional<Integer> positive83() {",
            "    // BUG: Diagnostic contains:",
            "    return Stream.<Integer>empty()",
            "        // BUG: Diagnostic contains:",
            "        .findAny();",
            "  }",
            "",
            "  OptionalDouble positive84() {",
            "    // BUG: Diagnostic contains:",
            "    return DoubleStream.empty()",
            "        // BUG: Diagnostic contains:",
            "        .min();",
            "  }",
            "",
            "  OptionalInt positive85() {",
            "    // BUG: Diagnostic contains:",
            "    return IntStream.empty()",
            "        // BUG: Diagnostic contains:",
            "        .max();",
            "  }",
            "",
            "  OptionalDouble positive86() {",
            "    // BUG: Diagnostic contains:",
            "    return DoubleStream.empty()",
            "        // BUG: Diagnostic contains:",
            "        .findFirst();",
            "  }",
            "",
            "  Spliterator<Integer> positive87() {",
            "    // BUG: Diagnostic contains:",
            "    return ImmutableList.<Integer>of()",
            "        // BUG: Diagnostic contains:",
            "        .spliterator();",
            "  }",
            "",
            "  Object[] positive88() {",
            "    // BUG: Diagnostic contains:",
            "    return ImmutableList.<Integer>of()",
            "        // BUG: Diagnostic contains:",
            "        .toArray();",
            "  }",
            "",
            "  Integer[] positive89() {",
            "    // BUG: Diagnostic contains:",
            "    return ImmutableList.<Integer>of()",
            "        // BUG: Diagnostic contains:",
            "        .toArray(Integer[]::new);",
            "  }",
            "",
            "  ContextView positive90() {",
            "    // BUG: Diagnostic contains:",
            "    return Context.empty()",
            "        // BUG: Diagnostic contains:",
            "        .readOnly();",
            "  }",
            "",
            "  Context positive91() {",
            "    // BUG: Diagnostic contains:",
            "    return Context.empty()",
            "        // BUG: Diagnostic contains:",
            "        .delete(1);",
            "  }",
            "}")
        .doTest();
  }

  /** A {@link BugChecker} that simply delegates to {@link IsEmpty}. */
  @BugPattern(summary = "Flags expressions matched by `IsEmpty`", severity = ERROR)
  public static final class MatcherTestChecker extends AbstractMatcherTestChecker {
    private static final long serialVersionUID = 1L;

    // XXX: This is a false positive reported by Checkstyle. See
    // https://github.com/checkstyle/checkstyle/issues/10161#issuecomment-1242732120.
    @SuppressWarnings("RedundantModifier")
    public MatcherTestChecker() {
      super(new IsEmpty());
    }
  }
}
