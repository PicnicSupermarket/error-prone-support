--- a/pom.xml
+++ b/pom.xml
@@ -383,6 +383,12 @@
       <version>1.4.4</version>
       <scope>test</scope>
     </dependency>
+    <dependency>
+      <groupId>org.assertj</groupId>
+      <artifactId>assertj-core</artifactId>
+      <version>3.27.6<!-- Renovate: org.assertj:assertj-bom --></version>
+      <scope>test</scope>
+    </dependency>
     <dependency>
       <groupId>nl.jqno.equalsverifier</groupId>
       <artifactId>equalsverifier</artifactId>
@@ -2574,6 +2580,8 @@
                     <arg>
                       -Xplugin:ErrorProne ${error-prone.configuration-args}
                     </arg>
+                    <arg>-Xmaxwarns</arg>
+                    <arg>1000000</arg>
                   </compilerArgs>
                   <annotationProcessorPaths>
                     <path>
@@ -2586,6 +2594,11 @@
                       <artifactId>error-prone-contrib</artifactId>
                       <version>${error-prone-support.version}</version>
                     </path>
+                    <path>
+                      <groupId>tech.picnic.error-prone-support</groupId>
+                      <artifactId>refaster-runner</artifactId>
+                      <version>${error-prone-support.version}</version>
+                    </path>
                   </annotationProcessorPaths>
                 </configuration>
               </execution>
@@ -2627,11 +2640,14 @@
                     <arg>--should-stop=ifError=FLOW</arg>
                     <arg>-Xpkginfo:always</arg>
                     <arg>-XDcompilePolicy=simple</arg>
+                    <!-- XXX: Drop this flag once the project uses Error Prone 2.36.0+ by default. -->
+                    <arg>--should-stop=ifError=FLOW</arg>
                     <arg>
                       -Xplugin:ErrorProne \
-                      -XepExcludedPaths:.*[\\/]resources[\\/].* \
                       ${error-prone.configuration-args}
                     </arg>
+                    <arg>-Xmaxwarns</arg>
+                    <arg>1000000</arg>
                   </compilerArgs>
                   <annotationProcessorPaths>
                     <path>
@@ -2644,6 +2660,11 @@
                       <artifactId>error-prone-contrib</artifactId>
                       <version>${error-prone-support.version}</version>
                     </path>
+                    <path>
+                      <groupId>tech.picnic.error-prone-support</groupId>
+                      <artifactId>refaster-runner</artifactId>
+                      <version>${error-prone-support.version}</version>
+                    </path>
                   </annotationProcessorPaths>
                 </configuration>
               </execution>
--- a/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule21filename/FileNameTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter2filebasic/rule21filename/FileNameTest.java
@@ -23,6 +23,8 @@ import org.junit.jupiter.api.Test;
 
 import com.google.checkstyle.test.base.AbstractGoogleModuleTestSupport;
 
+// This class is referenced from another package.
+@SuppressWarnings("JUnitClassModifiers")
 public class FileNameTest extends AbstractGoogleModuleTestSupport {
 
     @Override
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3sourcefile/SourceFileStructureTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3sourcefile/SourceFileStructureTest.java
@@ -23,6 +23,8 @@ import org.junit.jupiter.api.Test;
 
 import com.google.checkstyle.test.base.AbstractGoogleModuleTestSupport;
 
+// This class is referenced from another package.
+@SuppressWarnings("JUnitClassModifiers")
 public class SourceFileStructureTest extends AbstractGoogleModuleTestSupport {
 
     @Override
--- a/src/it/java/com/google/checkstyle/test/chapter3filestructure/toolongpackagetotestcoveragegooglesjavastylerule/PackageStatementTest.java
+++ b/src/it/java/com/google/checkstyle/test/chapter3filestructure/toolongpackagetotestcoveragegooglesjavastylerule/PackageStatementTest.java
@@ -23,6 +23,8 @@ import org.junit.jupiter.api.Test;
 
 import com.google.checkstyle.test.base.AbstractGoogleModuleTestSupport;
 
+// This class is referenced from another package.
+@SuppressWarnings("JUnitClassModifiers")
 public class PackageStatementTest extends AbstractGoogleModuleTestSupport {
 
     @Override
--- a/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DetailNodeTreeStringPrinter.java
@@ -62,6 +62,8 @@ public final class DetailNodeTreeStringPrinter {
      * @return DetailNode tree
      * @throws IllegalArgumentException if there is an error parsing the Javadoc.
      */
+    // Invoking `getParseErrorMessage` requires that `status.getParseErrorMessage()` is `null`.
+    @SuppressWarnings("CheckArgumentWithMessage")
     public static DetailNode parseJavadocAsDetailNode(DetailAST blockComment) {
         final JavadocDetailNodeParser parser = new JavadocDetailNodeParser();
         final ParseStatus status = parser.parseJavadocComment(blockComment);
--- a/src/main/java/com/puppycrawl/tools/checkstyle/SarifLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/SarifLogger.java
@@ -327,6 +327,9 @@ public class SarifLogger extends AbstractAutomaticBean implements AuditListener
      * @param report report content where replace should happen
      * @return a version string based on the package implementation version
      */
+    // Here `version` may be `null`, while `String#replace` requires non-`null` arguments.
+    // XXX: Investigate better nullness handling by `IdentityConversion`.
+    @SuppressWarnings("IdentityConversion")
     private static String replaceVersionString(String report) {
         final String version = SarifLogger.class.getPackage().getImplementationVersion();
         return report.replace(VERSION_PLACEHOLDER, String.valueOf(version));
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java
@@ -509,6 +509,10 @@ public final class IllegalTypeCheck extends AbstractCheck {
      * @param importAst {@link TokenTypes#IMPORT Import}
      * @return Imported canonical type's name.
      */
+    // XXX: The Refaster `CharSequenceIsEmpty` rule unconditionally assumes
+    // Java 15 runtime compatibility when suggesting use of
+    // `StringBuilder#isEmpty()`, while this project targets Java 11.
+    @SuppressWarnings("CharSequenceIsEmpty")
     private static String getImportedTypeCanonicalName(DetailAST importAst) {
         final StringBuilder canonicalNameBuilder = new StringBuilder(256);
         DetailAST toVisit = importAst;
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
@@ -658,6 +658,10 @@ public class VisibilityModifierCheck
      * @param type DetailAST {@link TokenTypes#TYPE TYPE} node.
      * @return canonical type's name
      */
+    // XXX: The Refaster `CharSequenceIsEmpty` rule unconditionally assumes
+    // Java 15 runtime compatibility when suggesting use of
+    // `StringBuilder#isEmpty()`, while this project targets Java 11.
+    @SuppressWarnings("CharSequenceIsEmpty")
     private static String getCanonicalName(DetailAST type) {
         final StringBuilder canonicalNameBuilder = new StringBuilder(256);
         DetailAST toVisit = type;
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java
@@ -143,6 +143,10 @@ public class IndentLevel {
     }
 
     @Override
+    // XXX: The Refaster `CharSequenceIsEmpty` rule unconditionally assumes
+    // Java 15 runtime compatibility when suggesting use of
+    // `StringBuilder#isEmpty()`, while this project targets Java 11.
+    @SuppressWarnings("CharSequenceIsEmpty")
     public String toString() {
         final String result;
         if (levels.cardinality() == 1) {
--- a/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java
@@ -98,6 +98,8 @@ import de.thetaphi.forbiddenapis.SuppressForbidden;
  * @noinspectionreason ClassWithTooManyDependencies - complex tests require a large number
  *      of imports
  */
+// This class is referenced from another package.
+@SuppressWarnings("JUnitClassModifiers")
 public class CheckerTest extends AbstractModuleTestSupport {
 
     @TempDir
--- a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
@@ -50,6 +50,8 @@ import com.puppycrawl.tools.checkstyle.internal.utils.TestUtil;
 /**
  * Unit test for ConfigurationLoader.
  */
+// This class is referenced from another package.
+@SuppressWarnings("JUnitClassModifiers")
 public class ConfigurationLoaderTest extends AbstractPathTestSupport {
 
     @Override
--- a/src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java
@@ -113,6 +113,8 @@ public class PackageObjectFactoryTest {
     public void testCtorNullPackageException1() {
         final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
         try {
+            // XXX: Don't suggest `ImmutableSet.of(elem)` for nullable `elem`.
+            @SuppressWarnings("ImmutableSetOf1")
             final Object test = new PackageObjectFactory(Collections.singleton(null), classLoader);
             assertWithMessage("Exception is expected but got " + test).fail();
         }
@@ -141,6 +143,8 @@ public class PackageObjectFactoryTest {
     public void testCtorNullPackageException3() {
         final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
         try {
+            // XXX: Don't suggest `ImmutableSet.of(elem)` for nullable `elem`.
+            @SuppressWarnings("ImmutableSetOf1")
             final Object test = new PackageObjectFactory(Collections.singleton(null), classLoader,
                     TRY_IN_ALL_REGISTERED_PACKAGES);
             assertWithMessage("Exception is expected but got " + test).fail();
--- a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
@@ -84,6 +84,8 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
  * @noinspectionreason ClassWithTooManyDependencies - complex tests require a
  *      large number of imports
  */
+// This class is referenced from another package.
+@SuppressWarnings("JUnitClassModifiers")
 public class TreeWalkerTest extends AbstractModuleTestSupport {
 
     @TempDir
--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsJavaDocsTest.java
@@ -220,6 +220,10 @@ public class XdocsJavaDocsTest extends AbstractModuleTestSupport {
         }
     }
 
+    // XXX: The Refaster `CharSequenceIsEmpty` rule unconditionally assumes
+    // Java 15 runtime compatibility when suggesting use of
+    // `StringBuilder#isEmpty()`, while this project targets Java 11.
+    @SuppressWarnings("CharSequenceIsEmpty")
     private static boolean shouldAppendSpace(StringBuilder text, char firstCharToAppend) {
         final boolean result;
 
--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsPagesTest.java
@@ -1638,6 +1638,10 @@ public class XdocsPagesTest {
         return result;
     }
 
+    // XXX: The Refaster `CharSequenceIsEmpty` rule unconditionally assumes
+    // Java 15 runtime compatibility when suggesting use of
+    // `StringBuilder#isEmpty()`, while this project targets Java 11.
+    @SuppressWarnings("CharSequenceIsEmpty")
     private static void validateViolationSection(String fileName, String sectionName,
                                                  Node subSection,
                                                  Object instance) throws Exception {
--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/utils/CheckUtil.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/utils/CheckUtil.java
@@ -290,6 +290,10 @@ public final class CheckUtil {
         return checkMessage;
     }
 
+    // XXX: The Refaster `CharSequenceIsEmpty` rule unconditionally assumes
+    // Java 15 runtime compatibility when suggesting use of
+    // `StringBuilder#isEmpty()`, while this project targets Java 11.
+    @SuppressWarnings("CharSequenceIsEmpty")
     public static String getTokenText(int[] tokens, int... subtractions) {
         final String tokenText;
         if (subtractions.length == 0 && Arrays.equals(tokens, TokenUtil.getAllTokenIds())) {
@@ -342,6 +346,10 @@ public final class CheckUtil {
         return result;
     }
 
+    // XXX: The Refaster `CharSequenceIsEmpty` rule unconditionally assumes
+    // Java 15 runtime compatibility when suggesting use of
+    // `StringBuilder#isEmpty()`, while this project targets Java 11.
+    @SuppressWarnings("CharSequenceIsEmpty")
     public static String getJavadocTokenText(int[] tokens, int... subtractions) {
         final StringBuilder result = new StringBuilder(50);
         boolean first = true;
--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/CheckUtilTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/CheckUtilTest.java
@@ -47,6 +47,8 @@ import com.puppycrawl.tools.checkstyle.checks.coding.NestedIfDepthCheck;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck;
 import com.puppycrawl.tools.checkstyle.checks.naming.AccessModifierOption;
 
+// This class is referenced from another package.
+@SuppressWarnings("JUnitClassModifiers")
 public class CheckUtilTest extends AbstractModuleTestSupport {
 
     @Override
