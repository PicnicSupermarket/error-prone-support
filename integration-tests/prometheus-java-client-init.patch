--- a/pom.xml
+++ b/pom.xml
@@ -128,7 +128,6 @@
         <dependency>
             <groupId>com.google.guava</groupId>
             <artifactId>guava</artifactId>
-            <scope>test</scope>
         </dependency>
         <dependency>
             <groupId>org.slf4j</groupId>
@@ -370,13 +369,24 @@
                             -Xep:LongDoubleConversion:OFF
                             -Xep:StringSplitter:OFF
                             -XepExcludedPaths:.*/generated/.*
+                            ${error-prone.configuration-args}
                         </arg>
                     </compilerArgs>
                     <annotationProcessorPaths>
                         <path>
                             <groupId>com.google.errorprone</groupId>
                             <artifactId>error_prone_core</artifactId>
-                            <version>2.36.0</version>
+                            <version>${error-prone.version}</version>
+                        </path>
+                        <path>
+                            <groupId>tech.picnic.error-prone-support</groupId>
+                            <artifactId>error-prone-contrib</artifactId>
+                            <version>${error-prone-support.version}</version>
+                        </path>
+                        <path>
+                            <groupId>tech.picnic.error-prone-support</groupId>
+                            <artifactId>refaster-runner</artifactId>
+                            <version>${error-prone-support.version}</version>
                         </path>
                         <!-- Other annotation processors go here.
 
--- a/prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/registry/MetricNameFilter.java
+++ b/prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/registry/MetricNameFilter.java
@@ -8,6 +8,8 @@ import java.util.Collection;
 import java.util.function.Predicate;
 
 /** Filter samples (i.e. time series) by name. */
+// XXX: Don't suggest changes when there are local methods with the same name.
+@SuppressWarnings("ExplicitArgumentEnumeration")
 public class MetricNameFilter implements Predicate<String> {
 
   /** For convenience, a filter that allows all names. */
--- a/prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/Quantiles.java
+++ b/prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/Quantiles.java
@@ -41,6 +41,8 @@ public class Quantiles implements Iterable<Quantile> {
    * Create a new Quantiles instance. You can either create Quantiles with one of the static {@code
    * Quantiles.of(...)} methods, or you can use the {@link Quantiles#builder()}.
    */
+  // XXX: Don't suggest changes when there are local methods with the same name.
+  @SuppressWarnings("ExplicitArgumentEnumeration")
   public static Quantiles of(Quantile... quantiles) {
     return of(Arrays.asList(quantiles));
   }
--- a/prometheus-metrics-model/src/test/java/io/prometheus/metrics/model/snapshots/MetricSnapshotTest.java
+++ b/prometheus-metrics-model/src/test/java/io/prometheus/metrics/model/snapshots/MetricSnapshotTest.java
@@ -7,6 +7,8 @@ import org.junit.jupiter.api.Test;
 
 class MetricSnapshotTest {
 
+  // XXX: Investigate the `satisfies` and how to rewrite this.
+  @SuppressWarnings("AssertThatThrownBy")
   @Test
   public void testDuplicateLabels() {
     assertThatExceptionOfType(DuplicateLabelsException.class)
--- a/prometheus-metrics-model/src/test/java/io/prometheus/metrics/model/snapshots/PrometheusNamingTest.java
+++ b/prometheus-metrics-model/src/test/java/io/prometheus/metrics/model/snapshots/PrometheusNamingTest.java
@@ -6,6 +6,8 @@ import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 
 import org.junit.jupiter.api.Test;
 
+// XXX: Fix this edge case in the `JUnitMethodDeclaration` check.
+@SuppressWarnings("JUnitMethodDeclaration")
 class PrometheusNamingTest {
 
   @Test
