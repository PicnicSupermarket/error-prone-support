--- a/src/it/java/com/google/checkstyle/test/base/AbstractIndentationTestSupport.java
+++ b/src/it/java/com/google/checkstyle/test/base/AbstractIndentationTestSupport.java
@@ -19,6 +19,8 @@
 
 package com.google.checkstyle.test.base;
 
+import static com.google.common.base.Preconditions.checkState;
+
 import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -81,30 +83,28 @@ public abstract class AbstractIndentationTestSupport extends AbstractGoogleModul
           final int indentInComment = getIndentFromComment(comment);
           final int actualIndent = getLineStart(line, tabWidth);
 
-          if (actualIndent != indentInComment) {
-            throw new IllegalStateException(
-                String.format(
-                    Locale.ROOT,
-                    "File \"%1$s\" has incorrect indentation in comment."
-                        + "Line %2$d: comment:%3$d, actual:%4$d.",
-                    aFileName,
-                    lineNumber,
-                    indentInComment,
-                    actualIndent));
-          }
+          checkState(
+              actualIndent == indentInComment,
+              String.format(
+                  Locale.ROOT,
+                  "File \"%1$s\" has incorrect indentation in comment."
+                      + "Line %2$d: comment:%3$d, actual:%4$d.",
+                  aFileName,
+                  lineNumber,
+                  indentInComment,
+                  actualIndent));
 
           if (isWarnComment(comment)) {
             result.add(lineNumber);
           }
 
-          if (!isCommentConsistent(comment)) {
-            throw new IllegalStateException(
-                String.format(
-                    Locale.ROOT,
-                    "File \"%1$s\" has inconsistent comment on line %2$d",
-                    aFileName,
-                    lineNumber));
-          }
+          checkState(
+              isCommentConsistent(comment),
+              String.format(
+                  Locale.ROOT,
+                  "File \"%1$s\" has inconsistent comment on line %2$d",
+                  aFileName,
+                  lineNumber));
         } else if (NONEMPTY_LINE_REGEX.matcher(line).matches()) {
           throw new IllegalStateException(
               String.format(
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAbbreviationAsWordInNameTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAbbreviationAsWordInNameTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.naming.AbbreviationAsWordInNameCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -53,7 +53,7 @@ public class XpathRegressionAbbreviationAsWordInNameTest extends AbstractXpathTe
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionAbbreviationAsWordInNameAnnotation']]"
                 + "/OBJBLOCK/ANNOTATION_DEF/IDENT[@text='ANNOTATION']");
@@ -79,7 +79,7 @@ public class XpathRegressionAbbreviationAsWordInNameTest extends AbstractXpathTe
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/ANNOTATION_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionAbbreviationAsWordInNameAnnotationField']]"
                 + "/OBJBLOCK/ANNOTATION_FIELD_DEF/IDENT[@text='ANNOTATION_FIELD']");
@@ -105,7 +105,7 @@ public class XpathRegressionAbbreviationAsWordInNameTest extends AbstractXpathTe
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionAbbreviationAsWordInNameClass']]"
                 + "/OBJBLOCK/CLASS_DEF/IDENT[@text='CLASS']");
@@ -131,7 +131,7 @@ public class XpathRegressionAbbreviationAsWordInNameTest extends AbstractXpathTe
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionAbbreviationAsWordInNameEnum']]"
                 + "/OBJBLOCK/ENUM_DEF/IDENT[@text='ENUMERATION']");
@@ -157,7 +157,7 @@ public class XpathRegressionAbbreviationAsWordInNameTest extends AbstractXpathTe
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionAbbreviationAsWordInNameField']]"
                 + "/OBJBLOCK/VARIABLE_DEF/IDENT[@text='FIELD']");
@@ -183,7 +183,7 @@ public class XpathRegressionAbbreviationAsWordInNameTest extends AbstractXpathTe
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionAbbreviationAsWordInNameInterface']]"
                 + "/OBJBLOCK/INTERFACE_DEF/IDENT[@text='INTERFACE']");
@@ -209,7 +209,7 @@ public class XpathRegressionAbbreviationAsWordInNameTest extends AbstractXpathTe
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/INTERFACE_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionAbbreviationAsWordInNameMethod']]"
                 + "/OBJBLOCK/METHOD_DEF/IDENT[@text='METHOD']");
@@ -235,7 +235,7 @@ public class XpathRegressionAbbreviationAsWordInNameTest extends AbstractXpathTe
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/INTERFACE_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionAbbreviationAsWordInNameParameter']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='method']]"
@@ -262,7 +262,7 @@ public class XpathRegressionAbbreviationAsWordInNameTest extends AbstractXpathTe
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionAbbreviationAsWordInNameVariable']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='method']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAnnotationUseStyleTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAnnotationUseStyleTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationUseStyleCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -154,7 +154,7 @@ public class XpathRegressionAnnotationUseStyleTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionAnnotationUseStyleFour']]"
                 + "/MODIFIERS/ANNOTATION[./IDENT[@text='SuppressWarnings']]"
@@ -281,7 +281,7 @@ public class XpathRegressionAnnotationUseStyleTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionAnnotationUseStyleEight']]"
                 + "/MODIFIERS/ANNOTATION[./IDENT[@text='SuppressWarnings']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionArrayTrailingCommaTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionArrayTrailingCommaTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.ArrayTrailingCommaCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -73,7 +73,7 @@ public class XpathRegressionArrayTrailingCommaTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionArrayTrailingCommaTwo']]"
                 + "/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='d2']]/ASSIGN/EXPR/LITERAL_NEW"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionArrayTypeStyleTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionArrayTypeStyleTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.ArrayTypeStyleCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -45,7 +45,7 @@ public class XpathRegressionArrayTypeStyleTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionArrayTypeStyleVariable']]"
                 + "/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='strings']]/TYPE["
@@ -66,7 +66,7 @@ public class XpathRegressionArrayTypeStyleTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionArrayTypeStyleMethodDef']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='getData']]/TYPE/ARRAY_DECLARATOR");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidInlineConditionalsTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidInlineConditionalsTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.AvoidInlineConditionalsCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -77,7 +77,7 @@ public class XpathRegressionAvoidInlineConditionalsTest extends AbstractXpathTes
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text='"
                 + "SuppressionXpathRegressionAvoidInlineConditionalsAssign']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='setB']]/SLIST"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidNestedBlocksTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidNestedBlocksTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.blocks.AvoidNestedBlocksCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -48,7 +48,7 @@ public class XpathRegressionAvoidNestedBlocksTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionAvoidNestedBlocksEmpty']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='empty']]/SLIST/SLIST");
@@ -70,7 +70,7 @@ public class XpathRegressionAvoidNestedBlocksTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionAvoidNestedBlocksVariable']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='varAssign']]/SLIST/SLIST");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidNoArgumentSuperConstructorCallTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidNoArgumentSuperConstructorCallTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.AvoidNoArgumentSuperConstructorCallCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -49,7 +49,7 @@ public class XpathRegressionAvoidNoArgumentSuperConstructorCallTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionAvoidNoArgumentSuperConstructorCall']]"
                 + "/OBJBLOCK/CTOR_DEF[./IDENT["
@@ -73,7 +73,7 @@ public class XpathRegressionAvoidNoArgumentSuperConstructorCallTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text="
                 + "'SuppressionXpathRegressionAvoidNoArgumentSuperConstructorCallInnerClass']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidStarImportTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidStarImportTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.imports.AvoidStarImportCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -47,7 +47,7 @@ public class XpathRegressionAvoidStarImportTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/STATIC_IMPORT/DOT");
+        ImmutableList.of("/COMPILATION_UNIT/STATIC_IMPORT/DOT");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -62,8 +62,7 @@ public class XpathRegressionAvoidStarImportTest extends AbstractXpathTestSupport
       "4:15: " + getCheckMessage(CLASS, AvoidStarImportCheck.MSG_KEY, "java.io.*"),
     };
 
-    final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/IMPORT/DOT");
+    final List<String> expectedXpathQueries = ImmutableList.of("/COMPILATION_UNIT/IMPORT/DOT");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidStaticImportTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionAvoidStaticImportTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.imports.AvoidStaticImportCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -48,7 +48,7 @@ public class XpathRegressionAvoidStaticImportTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/STATIC_IMPORT/DOT");
+        ImmutableList.of("/COMPILATION_UNIT/STATIC_IMPORT/DOT");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -66,8 +66,7 @@ public class XpathRegressionAvoidStaticImportTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
-            "/COMPILATION_UNIT/STATIC_IMPORT/DOT[./IDENT[@text='createTempFile']]");
+        ImmutableList.of("/COMPILATION_UNIT/STATIC_IMPORT/DOT[./IDENT[@text='createTempFile']]");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionBooleanExpressionComplexityTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionBooleanExpressionComplexityTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.metrics.BooleanExpressionComplexityCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -51,7 +51,7 @@ public class XpathRegressionBooleanExpressionComplexityTest extends AbstractXpat
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionBooleanExpressionComplexityOne']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='methodOne']]/SLIST"
@@ -79,7 +79,7 @@ public class XpathRegressionBooleanExpressionComplexityTest extends AbstractXpat
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionBooleanExpressionComplexityTwo']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='methodTwo']]/SLIST/VARIABLE_DEF"
@@ -106,7 +106,7 @@ public class XpathRegressionBooleanExpressionComplexityTest extends AbstractXpat
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionBooleanExpressionComplexityThree']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='methodThree']]/SLIST/LITERAL_IF");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionCatchParameterNameTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionCatchParameterNameTest.java
@@ -21,10 +21,10 @@ package org.checkstyle.suppressionxpathfilter;
 
 import static com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.MSG_INVALID_PATTERN;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.naming.CatchParameterNameCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -50,7 +50,7 @@ public class XpathRegressionCatchParameterNameTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionCatchParameterNameSimple']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='method']]"
@@ -73,7 +73,7 @@ public class XpathRegressionCatchParameterNameTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionCatchParameterNameNested']]"
                 + "/OBJBLOCK/CLASS_DEF[./IDENT[@text='NestedClass']]"
@@ -99,7 +99,7 @@ public class XpathRegressionCatchParameterNameTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionCatchParameterNameStaticInit']]"
                 + "/OBJBLOCK/STATIC_INIT/SLIST"
@@ -124,7 +124,7 @@ public class XpathRegressionCatchParameterNameTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionCatchParameterNameAnonymous']]"
                 + "/OBJBLOCK/CLASS_DEF[./IDENT[@text='InnerClass']]"
@@ -151,7 +151,7 @@ public class XpathRegressionCatchParameterNameTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionCatchParameterNameLambda']]"
                 + "/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='lambdaFunction']]"
@@ -178,7 +178,7 @@ public class XpathRegressionCatchParameterNameTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/ENUM_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionCatchParameterNameEnum']]"
                 + "/OBJBLOCK/ENUM_CONSTANT_DEF[./IDENT[@text='VALUE']]"
@@ -204,7 +204,7 @@ public class XpathRegressionCatchParameterNameTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/INTERFACE_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionCatchParameterNameInterface']]"
                 + "/OBJBLOCK/INTERFACE_DEF[./IDENT[@text='InnerInterface']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionCommentsIndentationTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionCommentsIndentationTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -48,7 +48,7 @@ public class XpathRegressionCommentsIndentationTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionCommentsIndentationSingleLine']]"
                 + "/OBJBLOCK/SINGLE_LINE_COMMENT[./COMMENT_CONTENT[@text=' Comment // warn\\n']]");
@@ -69,7 +69,7 @@ public class XpathRegressionCommentsIndentationTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionCommentsIndentationBlock']]/OBJBLOCK/"
                 + "VARIABLE_DEF[./IDENT[@text='f']]/TYPE/BLOCK_COMMENT_BEGIN[./COMMENT_CONTENT"
@@ -92,7 +92,7 @@ public class XpathRegressionCommentsIndentationTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionCommentsIndentationSeparator']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo']]/MODIFIERS/SINGLE_LINE_COMMENT"
@@ -116,7 +116,7 @@ public class XpathRegressionCommentsIndentationTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionCommentsIndentationDistributedStatement']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo']]/SLIST/SINGLE_LINE_COMMENT"
@@ -138,7 +138,7 @@ public class XpathRegressionCommentsIndentationTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionCommentsIndentationSingleLineBlock']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo']]/SLIST/SINGLE_LINE_COMMENT"
@@ -161,7 +161,7 @@ public class XpathRegressionCommentsIndentationTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionCommentsIndentationNonEmptyCase']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo']]/SLIST/LITERAL_SWITCH/"
@@ -184,7 +184,7 @@ public class XpathRegressionCommentsIndentationTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionCommentsIndentationEmptyCase']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo']]/SLIST/LITERAL_SWITCH/"
@@ -208,7 +208,7 @@ public class XpathRegressionCommentsIndentationTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionCommentsIndentationWithinBlockStatement']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo']]/SLIST/VARIABLE_DEF"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionConstantNameTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionConstantNameTest.java
@@ -21,10 +21,10 @@ package org.checkstyle.suppressionxpathfilter;
 
 import static com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.MSG_INVALID_PATTERN;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.naming.ConstantNameCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -51,7 +51,7 @@ public class XpathRegressionConstantNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionConstantNameLowercase']]"
                 + "/OBJBLOCK/VARIABLE_DEF/IDENT[@text='number']");
@@ -71,7 +71,7 @@ public class XpathRegressionConstantNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionConstantNameCamelCase']]"
                 + "/OBJBLOCK/VARIABLE_DEF/IDENT[@text='badConstant']");
@@ -91,7 +91,7 @@ public class XpathRegressionConstantNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionConstantNameWithBeginningUnderscore']]"
                 + "/OBJBLOCK/VARIABLE_DEF/IDENT[@text='_CONSTANT']");
@@ -111,7 +111,7 @@ public class XpathRegressionConstantNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionConstantNameWithTwoUnderscores']]"
                 + "/OBJBLOCK/VARIABLE_DEF/IDENT[@text='BAD__NAME']");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionCovariantEqualsTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionCovariantEqualsTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.CovariantEqualsCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -47,7 +47,7 @@ public class XpathRegressionCovariantEqualsTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionCovariantEqualsInClass']]"
                 + "/OBJBLOCK/METHOD_DEF/IDENT[@text='equals']");
@@ -67,7 +67,7 @@ public class XpathRegressionCovariantEqualsTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/ENUM_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionCovariantEqualsInEnum']]"
                 + "/OBJBLOCK/METHOD_DEF/IDENT[@text='equals']");
@@ -87,7 +87,7 @@ public class XpathRegressionCovariantEqualsTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/RECORD_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionCovariantEqualsInRecord']]"
                 + "/OBJBLOCK/METHOD_DEF/IDENT[@text='equals']");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionCustomImportOrderTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionCustomImportOrderTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.imports.CustomImportOrderCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -54,7 +54,7 @@ public class XpathRegressionCustomImportOrderTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/STATIC_IMPORT[./DOT/IDENT[@text='PI']]");
+        ImmutableList.of("/COMPILATION_UNIT/STATIC_IMPORT[./DOT/IDENT[@text='PI']]");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -76,7 +76,7 @@ public class XpathRegressionCustomImportOrderTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='File']]");
+        ImmutableList.of("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='File']]");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -98,7 +98,7 @@ public class XpathRegressionCustomImportOrderTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/STATIC_IMPORT[./DOT/IDENT[@text='PI']]");
+        ImmutableList.of("/COMPILATION_UNIT/STATIC_IMPORT[./DOT/IDENT[@text='PI']]");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -120,7 +120,7 @@ public class XpathRegressionCustomImportOrderTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='DetailAST']]");
+        ImmutableList.of("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='DetailAST']]");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -143,7 +143,7 @@ public class XpathRegressionCustomImportOrderTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/STATIC_IMPORT[./DOT/IDENT[@text='PI']]");
+        ImmutableList.of("/COMPILATION_UNIT/STATIC_IMPORT[./DOT/IDENT[@text='PI']]");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -168,7 +168,7 @@ public class XpathRegressionCustomImportOrderTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='DetailAST']]");
+        ImmutableList.of("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='DetailAST']]");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDefaultComesLastTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionDefaultComesLastTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.DefaultComesLastCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -77,7 +77,7 @@ public class XpathRegressionDefaultComesLastTest extends AbstractXpathTestSuppor
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionDefaultComesLastTwo']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='test']]/SLIST/LITERAL_SWITCH/CASE_GROUP"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionEmptyBlockTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionEmptyBlockTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.blocks.EmptyBlockCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -43,7 +43,7 @@ public class XpathRegressionEmptyBlockTest extends AbstractXpathTestSupport {
       "5:38: " + getCheckMessage(EmptyBlockCheck.class, EmptyBlockCheck.MSG_KEY_BLOCK_EMPTY, "for"),
     };
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionEmptyBlockEmpty']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='emptyLoop']]"
@@ -59,7 +59,7 @@ public class XpathRegressionEmptyBlockTest extends AbstractXpathTestSupport {
       "5:38: " + getCheckMessage(EmptyBlockCheck.class, EmptyBlockCheck.MSG_KEY_BLOCK_NO_STATEMENT),
     };
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionEmptyBlockEmpty']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='emptyLoop']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionEmptyCatchBlockTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionEmptyCatchBlockTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.blocks.EmptyCatchBlockCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -46,7 +46,7 @@ public class XpathRegressionEmptyCatchBlockTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionEmptyCatchBlock1']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='main']]"
@@ -66,7 +66,7 @@ public class XpathRegressionEmptyCatchBlockTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionEmptyCatchBlock2']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='main']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionEmptyLineSeparatorTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionEmptyLineSeparatorTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -124,7 +124,7 @@ public class XpathRegressionEmptyLineSeparatorTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionEmptyLineSeparator4']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo1']]/SLIST/RCURLY");
@@ -148,7 +148,7 @@ public class XpathRegressionEmptyLineSeparatorTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionEmptyLineSeparator5']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo1']]/SLIST/LITERAL_TRY/SLIST"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionEmptyStatementTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionEmptyStatementTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.EmptyStatementCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -43,7 +43,7 @@ public class XpathRegressionEmptyStatementTest extends AbstractXpathTestSupport
       "5:36: " + getCheckMessage(EmptyStatementCheck.class, EmptyStatementCheck.MSG_KEY),
     };
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionEmptyStatement1']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo']]"
@@ -59,7 +59,7 @@ public class XpathRegressionEmptyStatementTest extends AbstractXpathTestSupport
       "6:19: " + getCheckMessage(EmptyStatementCheck.class, EmptyStatementCheck.MSG_KEY),
     };
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionEmptyStatement2']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionExplicitInitializationTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionExplicitInitializationTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.ExplicitInitializationCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -49,7 +49,7 @@ public class XpathRegressionExplicitInitializationTest extends AbstractXpathTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionExplicitInitializationOne']]"
                 + "/OBJBLOCK/VARIABLE_DEF/IDENT[@text='a']");
@@ -74,7 +74,7 @@ public class XpathRegressionExplicitInitializationTest extends AbstractXpathTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionExplicitInitializationTwo']]"
                 + "/OBJBLOCK/VARIABLE_DEF/IDENT[@text='bar']");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionFinalLocalVariableTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionFinalLocalVariableTest.java
@@ -19,6 +19,7 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.FinalLocalVariableCheck;
 import java.io.File;
@@ -47,7 +48,7 @@ public class XpathRegressionFinalLocalVariableTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionFinalLocalVariable1']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='testMethod']]"
@@ -69,7 +70,7 @@ public class XpathRegressionFinalLocalVariableTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionFinalLocalVariable2']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='method2']]/SLIST/"
@@ -91,7 +92,7 @@ public class XpathRegressionFinalLocalVariableTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionFinalLocalVariable3']]"
                 + "/OBJBLOCK/CLASS_DEF[./IDENT[@text='InnerClass']]"
@@ -115,7 +116,7 @@ public class XpathRegressionFinalLocalVariableTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionFinalLocalVariable4']]"
                 + "/OBJBLOCK/CLASS_DEF[./IDENT[@text='InnerClass']]"
@@ -139,7 +140,7 @@ public class XpathRegressionFinalLocalVariableTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionFinalLocalVariable5']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='method']]"
@@ -162,7 +163,7 @@ public class XpathRegressionFinalLocalVariableTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionFinalLocalVariable6']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='method1']]"
@@ -185,7 +186,7 @@ public class XpathRegressionFinalLocalVariableTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionFinalLocalVariable7']]"
                 + "/OBJBLOCK/CTOR_DEF[./IDENT"
@@ -209,7 +210,7 @@ public class XpathRegressionFinalLocalVariableTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionFinalLocalVariable8']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='checkCodeBlock']]"
@@ -231,7 +232,7 @@ public class XpathRegressionFinalLocalVariableTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionFinalLocalVariable9']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='checkCodeBlock']]/SLIST/LITERAL_TRY"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionFinalParametersTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionFinalParametersTest.java
@@ -19,6 +19,7 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.FinalParametersCheck;
 import java.io.File;
@@ -46,7 +47,7 @@ public class XpathRegressionFinalParametersTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionFinalParameters1']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='method']]"
@@ -85,7 +86,7 @@ public class XpathRegressionFinalParametersTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionFinalParameters2']]"
                 + "/OBJBLOCK/CTOR_DEF[./IDENT["
@@ -129,7 +130,7 @@ public class XpathRegressionFinalParametersTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionFinalParameters3']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='createClass']]/SLIST/"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionGenericWhitespaceTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionGenericWhitespaceTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -50,7 +50,7 @@ public class XpathRegressionGenericWhitespaceTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionGenericWhitespaceEnd']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='bad']]"
@@ -74,7 +74,7 @@ public class XpathRegressionGenericWhitespaceTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionGenericWhitespaceNestedGenericsOne']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='bad']]/TYPE_PARAMETERS"
@@ -98,7 +98,7 @@ public class XpathRegressionGenericWhitespaceTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionGenericWhitespaceNestedGenericsTwo']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='bad']]/TYPE_PARAMETERS"
@@ -122,7 +122,7 @@ public class XpathRegressionGenericWhitespaceTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionGenericWhitespaceNestedGenericsThree']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='bad']]/TYPE_PARAMETERS"
@@ -146,7 +146,7 @@ public class XpathRegressionGenericWhitespaceTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionGenericWhitespaceSingleGenericOne']]"
                 + "/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='bad']]/ASSIGN/EXPR/METHOD_CALL"
@@ -170,7 +170,7 @@ public class XpathRegressionGenericWhitespaceTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionGenericWhitespaceSingleGenericTwo']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='bad']]/TYPE_PARAMETERS/GENERIC_END");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionHiddenFieldTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionHiddenFieldTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.HiddenFieldCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -46,7 +46,7 @@ public class XpathRegressionHiddenFieldTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionHiddenFieldOne']]/OBJBLOCK"
                 + "/INSTANCE_INIT/SLIST/EXPR/METHOD_CALL/ELIST/LAMBDA/PARAMETERS"
@@ -66,7 +66,7 @@ public class XpathRegressionHiddenFieldTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionHiddenFieldTwo']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='method']]/PARAMETERS/PARAMETER_DEF"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalCatchTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalCatchTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.IllegalCatchCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -47,7 +47,7 @@ public class XpathRegressionIllegalCatchTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionIllegalCatchOne']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='fun']]/SLIST"
@@ -69,7 +69,7 @@ public class XpathRegressionIllegalCatchTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionIllegalCatchTwo']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='methodTwo']]/SLIST"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalIdentifierNameTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalIdentifierNameTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck;
 import com.puppycrawl.tools.checkstyle.checks.naming.IllegalIdentifierNameCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -56,7 +56,7 @@ public class XpathRegressionIllegalIdentifierNameTest extends AbstractXpathTestS
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/RECORD_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionIllegalIdentifierNameTestOne'"
                 + "]]/RECORD_COMPONENTS/RECORD_COMPONENT_DEF/IDENT[@text='yield']");
@@ -84,7 +84,7 @@ public class XpathRegressionIllegalIdentifierNameTest extends AbstractXpathTestS
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionIllegalIdentifierNameTestTwo']"
                 + "]/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo']]/PARAMETERS/PARAMETER_DEF"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalImportTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalImportTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.imports.IllegalImportCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -44,7 +44,7 @@ public class XpathRegressionIllegalImportTest extends AbstractXpathTestSupport {
       "3:1: "
           + getCheckMessage(IllegalImportCheck.class, IllegalImportCheck.MSG_KEY, "java.util.List"),
     };
-    final List<String> expectedXpathQueries = Collections.singletonList("/COMPILATION_UNIT/IMPORT");
+    final List<String> expectedXpathQueries = ImmutableList.of("/COMPILATION_UNIT/IMPORT");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -61,8 +61,7 @@ public class XpathRegressionIllegalImportTest extends AbstractXpathTestSupport {
           + getCheckMessage(
               IllegalImportCheck.class, IllegalImportCheck.MSG_KEY, "java.lang.Math.pow"),
     };
-    final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/STATIC_IMPORT");
+    final List<String> expectedXpathQueries = ImmutableList.of("/COMPILATION_UNIT/STATIC_IMPORT");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalThrowsTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalThrowsTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.IllegalThrowsCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -48,7 +48,7 @@ public class XpathRegressionIllegalThrowsTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionIllegalThrowsOne']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='sayHello']]/LITERAL_THROWS"
@@ -70,7 +70,7 @@ public class XpathRegressionIllegalThrowsTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionIllegalThrowsTwo']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='methodTwo']]/LITERAL_THROWS"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalTokenTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalTokenTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -43,7 +43,7 @@ public class XpathRegressionIllegalTokenTest extends AbstractXpathTestSupport {
       "5:10: " + getCheckMessage(IllegalTokenCheck.class, IllegalTokenCheck.MSG_KEY, "outer:"),
     };
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionIllegalToken1']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='myTest']]"
@@ -63,7 +63,7 @@ public class XpathRegressionIllegalTokenTest extends AbstractXpathTestSupport {
       "4:10: " + getCheckMessage(IllegalTokenCheck.class, IllegalTokenCheck.MSG_KEY, "native"),
     };
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionIllegalToken2']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='myTest']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalTokenTextTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalTokenTextTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -102,7 +102,7 @@ public class XpathRegressionIllegalTokenTextTest extends AbstractXpathTestSuppor
               IllegalTokenTextCheck.class, IllegalTokenTextCheck.MSG_KEY, "invalidIdentifier"),
     };
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/INTERFACE_DEF[./IDENT[@text='SuppressionXpathRegressionIllegalTokenText3']]"
                 + "/OBJBLOCK/METHOD_DEF/IDENT[@text='invalidIdentifier']");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalTypeTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIllegalTypeTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -45,7 +45,7 @@ public class XpathRegressionIllegalTypeTest extends AbstractXpathTestSupport {
           + getCheckMessage(IllegalTypeCheck.class, IllegalTypeCheck.MSG_KEY, "java.util.HashSet"),
     };
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionIllegalTypeOne']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='typeParam']]/TYPE_PARAMETERS/TYPE_PARAMETER"
@@ -66,7 +66,7 @@ public class XpathRegressionIllegalTypeTest extends AbstractXpathTestSupport {
       "6:20: " + getCheckMessage(IllegalTypeCheck.class, IllegalTypeCheck.MSG_KEY, "Boolean"),
     };
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionIllegalTypeTwo']"
                 + "]/OBJBLOCK/METHOD_DEF[./IDENT[@text='typeParam']]/TYPE_PARAMETERS/"
                 + "TYPE_PARAMETER[./IDENT[@text='T']]/TYPE_UPPER_BOUNDS/IDENT[@text='Boolean']");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionImportControlTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionImportControlTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.imports.ImportControlCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -49,7 +49,7 @@ public class XpathRegressionImportControlTest extends AbstractXpathTestSupport {
               ImportControlCheck.class, ImportControlCheck.MSG_DISALLOWED, "java.util.Scanner"),
     };
 
-    final List<String> expectedXpathQueries = Collections.singletonList("/COMPILATION_UNIT/IMPORT");
+    final List<String> expectedXpathQueries = ImmutableList.of("/COMPILATION_UNIT/IMPORT");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -103,7 +103,7 @@ public class XpathRegressionImportControlTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='Scanner']]");
+        ImmutableList.of("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='Scanner']]");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionImportOrderTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionImportOrderTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.imports.ImportOrderCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -46,7 +46,7 @@ public class XpathRegressionImportOrderTest extends AbstractXpathTestSupport {
           + getCheckMessage(ImportOrderCheck.class, ImportOrderCheck.MSG_ORDERING, "java.util.Set"),
     };
 
-    final List<String> expectedXpathQueries = Collections.singletonList("/COMPILATION_UNIT/IMPORT");
+    final List<String> expectedXpathQueries = ImmutableList.of("/COMPILATION_UNIT/IMPORT");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -64,7 +64,7 @@ public class XpathRegressionImportOrderTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='Set']]");
+        ImmutableList.of("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='Set']]");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -83,7 +83,7 @@ public class XpathRegressionImportOrderTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/IMPORT[./DOT/DOT/IDENT[@text='org']]");
+        ImmutableList.of("/COMPILATION_UNIT/IMPORT[./DOT/DOT/IDENT[@text='org']]");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -101,8 +101,7 @@ public class XpathRegressionImportOrderTest extends AbstractXpathTestSupport {
               ImportOrderCheck.class, ImportOrderCheck.MSG_ORDERING, "java.lang.Math.PI"),
     };
 
-    final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/STATIC_IMPORT");
+    final List<String> expectedXpathQueries = ImmutableList.of("/COMPILATION_UNIT/STATIC_IMPORT");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -121,7 +120,7 @@ public class XpathRegressionImportOrderTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='Date']]");
+        ImmutableList.of("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='Date']]");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIndentationTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionIndentationTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -160,7 +160,7 @@ public class XpathRegressionIndentationTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionIndentationLambdaTest1"
                 + "']]/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/SLIST/VARIABLE_DEF"
@@ -195,7 +195,7 @@ public class XpathRegressionIndentationTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionIndentationLambdaTest2']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/SLIST/VARIABLE_DEF["
@@ -226,7 +226,7 @@ public class XpathRegressionIndentationTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionIndentationIfWithoutCurly']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/SLIST/LITERAL_IF/EXPR/"
@@ -258,7 +258,7 @@ public class XpathRegressionIndentationTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionIndentationElseWithoutCurly']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/SLIST/LITERAL_IF/LITERAL_ELSE"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionInnerAssignmentTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionInnerAssignmentTest.java
@@ -19,6 +19,7 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.InnerAssignmentCheck;
 import java.io.File;
@@ -46,7 +47,7 @@ public class XpathRegressionInnerAssignmentTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionInnerAssignment1']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='testMethod']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionInvalidJavadocPositionTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionInvalidJavadocPositionTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.InvalidJavadocPositionCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -48,7 +48,7 @@ public class XpathRegressionInvalidJavadocPositionTest extends AbstractXpathTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionInvalidJavadocPositionOne']]"
                 + "/MODIFIERS/BLOCK_COMMENT_BEGIN[./COMMENT_CONTENT"
@@ -70,7 +70,7 @@ public class XpathRegressionInvalidJavadocPositionTest extends AbstractXpathTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionInvalidJavadocPositionTwo']]"
                 + "/OBJBLOCK/BLOCK_COMMENT_BEGIN[./COMMENT_CONTENT"
@@ -92,7 +92,7 @@ public class XpathRegressionInvalidJavadocPositionTest extends AbstractXpathTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionInvalidJavadocPositionThree']]/"
                 + "OBJBLOCK/BLOCK_COMMENT_BEGIN[./COMMENT_CONTENT"
@@ -114,7 +114,7 @@ public class XpathRegressionInvalidJavadocPositionTest extends AbstractXpathTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionInvalidJavadocPositionFour']]"
                 + "/OBJBLOCK/BLOCK_COMMENT_BEGIN[./COMMENT_CONTENT"
@@ -136,7 +136,7 @@ public class XpathRegressionInvalidJavadocPositionTest extends AbstractXpathTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionInvalidJavadocPositionFive']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo']]"
@@ -159,7 +159,7 @@ public class XpathRegressionInvalidJavadocPositionTest extends AbstractXpathTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionInvalidJavadocPositionSix']]"
                 + "/OBJBLOCK/BLOCK_COMMENT_BEGIN[./COMMENT_CONTENT"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionJavaNCSSTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionJavaNCSSTest.java
@@ -19,6 +19,7 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.metrics.JavaNCSSCheck;
 import java.io.File;
@@ -46,7 +47,7 @@ public class XpathRegressionJavaNCSSTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionJavaNCSSOne']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]",
@@ -73,7 +74,7 @@ public class XpathRegressionJavaNCSSTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionJavaNCSSTwo']]",
             "/COMPILATION_UNIT/CLASS_DEF"
@@ -98,7 +99,7 @@ public class XpathRegressionJavaNCSSTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        List.of("/COMPILATION_UNIT", "/COMPILATION_UNIT/PACKAGE_DEF");
+        ImmutableList.of("/COMPILATION_UNIT", "/COMPILATION_UNIT/PACKAGE_DEF");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionJavadocContentLocationTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionJavadocContentLocationTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocContentLocationCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -50,7 +50,7 @@ public class XpathRegressionJavadocContentLocationTest extends AbstractXpathTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/INTERFACE_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionJavadocContentLocationOne']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/TYPE/BLOCK_COMMENT_BEGIN"
@@ -76,7 +76,7 @@ public class XpathRegressionJavadocContentLocationTest extends AbstractXpathTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/INTERFACE_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionJavadocContentLocationTwo']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/TYPE/BLOCK_COMMENT_BEGIN"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionJavadocMethodTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionJavadocMethodTest.java
@@ -22,11 +22,11 @@ package org.checkstyle.suppressionxpathfilter;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.MSG_EXPECTED_TAG;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck.MSG_INVALID_INHERIT_DOC;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -76,7 +76,7 @@ public class XpathRegressionJavadocMethodTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionJavadocMethodTwo']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='checkParam']]/PARAMETERS"
@@ -125,7 +125,7 @@ public class XpathRegressionJavadocMethodTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionJavadocMethodFour']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo']]"
@@ -153,7 +153,7 @@ public class XpathRegressionJavadocMethodTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionJavadocMethodFive']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='bar']]/SLIST"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionLambdaBodyLengthTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionLambdaBodyLengthTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.sizes.LambdaBodyLengthCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -45,7 +45,7 @@ public class XpathRegressionLambdaBodyLengthTest extends AbstractXpathTestSuppor
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionLambdaBodyLength1']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/SLIST"
@@ -65,7 +65,7 @@ public class XpathRegressionLambdaBodyLengthTest extends AbstractXpathTestSuppor
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionLambdaBodyLength2']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/SLIST"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionLambdaParameterNameTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionLambdaParameterNameTest.java
@@ -19,12 +19,12 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck;
 import com.puppycrawl.tools.checkstyle.checks.naming.LambdaParameterNameCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -55,7 +55,7 @@ public class XpathRegressionLambdaParameterNameTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionLambdaParameterName1']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/SLIST/VARIABLE_DEF["
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionLeftCurlyTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionLeftCurlyTest.java
@@ -19,12 +19,12 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck;
 import com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyOption;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -90,7 +90,7 @@ public class XpathRegressionLeftCurlyTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionLeftCurlyThree']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='sample']]/SLIST/LITERAL_IF/SLIST");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMagicNumberTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMagicNumberTest.java
@@ -19,6 +19,7 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.MagicNumberCheck;
 import java.io.File;
@@ -96,7 +97,7 @@ public class XpathRegressionMagicNumberTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionMagicNumberAnotherVariable']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='performOperation']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMatchXpathTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMatchXpathTest.java
@@ -19,12 +19,12 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenCheck;
 import com.puppycrawl.tools.checkstyle.checks.coding.MatchXpathCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -75,7 +75,7 @@ public class XpathRegressionMatchXpathTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionMatchXpathTwo']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='func1']]"
@@ -428,7 +428,7 @@ public class XpathRegressionMatchXpathTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionMatchXpathThree']]"
                 + "/OBJBLOCK/RCURLY");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMemberNameTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMemberNameTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck;
 import com.puppycrawl.tools.checkstyle.checks.naming.MemberNameCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -50,7 +50,7 @@ public class XpathRegressionMemberNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text"
                 + "='SuppressionXpathRegressionMemberName1']]"
@@ -75,7 +75,7 @@ public class XpathRegressionMemberNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text"
                 + "='SuppressionXpathRegressionMemberName2']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMethodNameTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMethodNameTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck;
 import com.puppycrawl.tools.checkstyle.checks.naming.MethodNameCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -53,7 +53,7 @@ public class XpathRegressionMethodNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text"
                 + "='SuppressionXpathRegressionMethodName1']]"
@@ -76,7 +76,7 @@ public class XpathRegressionMethodNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text"
                 + "='SuppressionXpathRegressionMethodName2']]"
@@ -102,7 +102,7 @@ public class XpathRegressionMethodNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/INTERFACE_DEF[./IDENT[@text='Check']]"
                 + "/OBJBLOCK/METHOD_DEF/IDENT[@text='ThirdMethod']");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMethodParamPadTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMethodParamPadTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -48,7 +48,7 @@ public class XpathRegressionMethodParamPadTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionMethodParamPadOne']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='InputMethodParamPad']]/LPAREN");
@@ -69,7 +69,7 @@ public class XpathRegressionMethodParamPadTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionMethodParamPadTwo']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='sayHello']]/LPAREN");
@@ -92,7 +92,7 @@ public class XpathRegressionMethodParamPadTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionMethodParamPadThree']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='sayHello']]/LPAREN");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMissingSwitchDefaultTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMissingSwitchDefaultTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.MissingSwitchDefaultCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -47,7 +47,7 @@ public class XpathRegressionMissingSwitchDefaultTest extends AbstractXpathTestSu
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionMissingSwitchDefaultOne']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test1']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionModifierOrderTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionModifierOrderTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.modifier.ModifierOrderCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -74,7 +74,7 @@ public class XpathRegressionModifierOrderTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionModifierOrderVariable']]"
                 + "/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='var']]/MODIFIERS/LITERAL_PRIVATE");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMultipleStringLiteralsTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionMultipleStringLiteralsTest.java
@@ -21,11 +21,11 @@ package org.checkstyle.suppressionxpathfilter;
 
 import static com.puppycrawl.tools.checkstyle.checks.coding.MultipleStringLiteralsCheck.MSG_KEY;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.MultipleStringLiteralsCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -76,7 +76,7 @@ public class XpathRegressionMultipleStringLiteralsTest extends AbstractXpathTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionMultipleStringLiteralsAllowDuplicates']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='myTest']]/SLIST/VARIABLE_DEF"
@@ -99,7 +99,7 @@ public class XpathRegressionMultipleStringLiteralsTest extends AbstractXpathTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionMultipleStringLiteralsIgnoreRegexp']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='myTest']]/SLIST/VARIABLE_DEF"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNPathComplexityTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNPathComplexityTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.metrics.NPathComplexityCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -77,7 +77,7 @@ public class XpathRegressionNPathComplexityTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNPathComplexityTwo']]"
                 + "/OBJBLOCK/STATIC_INIT");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNeedBracesTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNeedBracesTest.java
@@ -21,10 +21,10 @@ package org.checkstyle.suppressionxpathfilter;
 
 import static com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck.MSG_KEY_NEED_BRACES;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.blocks.NeedBracesCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -47,7 +47,7 @@ public class XpathRegressionNeedBracesTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNeedBracesDo']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/SLIST/LITERAL_DO");
@@ -68,7 +68,7 @@ public class XpathRegressionNeedBracesTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNeedBracesSingleLine']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/SLIST/LITERAL_IF");
@@ -90,7 +90,7 @@ public class XpathRegressionNeedBracesTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNeedBracesSingleLineLambda']]"
                 + "/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='r3']]/ASSIGN/LAMBDA");
@@ -110,7 +110,7 @@ public class XpathRegressionNeedBracesTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNeedBracesEmptyLoopBody']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]/SLIST/LITERAL_WHILE");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedForDepthTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedForDepthTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.NestedForDepthCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -46,7 +46,7 @@ public class XpathRegressionNestedForDepthTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNestedForDepth']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='test']]/SLIST/LITERAL_FOR"
@@ -68,7 +68,7 @@ public class XpathRegressionNestedForDepthTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNestedForDepthMax']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedIfDepthTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedIfDepthTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.NestedIfDepthCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -46,7 +46,7 @@ public class XpathRegressionNestedIfDepthTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNestedIfDepth']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='test']]/SLIST/LITERAL_IF"
@@ -67,7 +67,7 @@ public class XpathRegressionNestedIfDepthTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNestedIfDepthMax']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedTryDepthTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNestedTryDepthTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.NestedTryDepthCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -46,7 +46,7 @@ public class XpathRegressionNestedTryDepthTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNestedTryDepth']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='test']]/SLIST/LITERAL_TRY/SLIST"
@@ -68,7 +68,7 @@ public class XpathRegressionNestedTryDepthTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNestedTryDepthMax']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNoArrayTrailingCommaTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNoArrayTrailingCommaTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.NoArrayTrailingCommaCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -48,7 +48,7 @@ public class XpathRegressionNoArrayTrailingCommaTest extends AbstractXpathTestSu
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionNoArrayTrailingCommaOne']]"
                 + "/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='t1']]/ASSIGN/EXPR"
@@ -70,7 +70,7 @@ public class XpathRegressionNoArrayTrailingCommaTest extends AbstractXpathTestSu
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNoArrayTrailingCommaTwo']]"
                 + "/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='t4']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNoEnumTrailingCommaTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNoEnumTrailingCommaTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.NoEnumTrailingCommaCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -47,7 +47,7 @@ public class XpathRegressionNoEnumTrailingCommaTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNoEnumTrailingCommaOne']]"
                 + "/OBJBLOCK/ENUM_DEF[./IDENT[@text='Foo3']]/OBJBLOCK/COMMA[2]");
@@ -67,7 +67,7 @@ public class XpathRegressionNoEnumTrailingCommaTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNoEnumTrailingCommaTwo']]"
                 + "/OBJBLOCK/ENUM_DEF[./IDENT[@text='Foo6']]/OBJBLOCK/COMMA[2]");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNoWhitespaceAfterTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNoWhitespaceAfterTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -73,7 +73,7 @@ public class XpathRegressionNoWhitespaceAfterTest extends AbstractXpathTestSuppo
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNoWhitespaceAfterTokens']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNoWhitespaceBeforeCaseDefaultColonTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNoWhitespaceBeforeCaseDefaultColonTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCaseDefaultColonCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -53,7 +53,7 @@ public class XpathRegressionNoWhitespaceBeforeCaseDefaultColonTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text="
                 + "'SuppressionXpathRegressionNoWhitespaceBeforeCaseDefaultColonOne']]"
                 + "/OBJBLOCK/INSTANCE_INIT/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_CASE/COLON");
@@ -78,7 +78,7 @@ public class XpathRegressionNoWhitespaceBeforeCaseDefaultColonTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text="
                 + "'SuppressionXpathRegressionNoWhitespaceBeforeCaseDefaultColonTwo']]"
                 + "/OBJBLOCK/INSTANCE_INIT/SLIST/LITERAL_SWITCH/CASE_GROUP"
@@ -104,7 +104,7 @@ public class XpathRegressionNoWhitespaceBeforeCaseDefaultColonTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text="
                 + "'SuppressionXpathRegressionNoWhitespaceBeforeCaseDefaultColonThree']]"
                 + "/OBJBLOCK/INSTANCE_INIT/SLIST/LITERAL_SWITCH/CASE_GROUP"
@@ -130,7 +130,7 @@ public class XpathRegressionNoWhitespaceBeforeCaseDefaultColonTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text="
                 + "'SuppressionXpathRegressionNoWhitespaceBeforeCaseDefaultColonFour']]"
                 + "/OBJBLOCK/INSTANCE_INIT/SLIST/LITERAL_SWITCH/CASE_GROUP"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNoWhitespaceBeforeTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionNoWhitespaceBeforeTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -48,7 +48,7 @@ public class XpathRegressionNoWhitespaceBeforeTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNoWhitespaceBefore']]/OBJBLOCK"
                 + "/VARIABLE_DEF[./IDENT[@text='bad']]/SEMI");
@@ -70,7 +70,7 @@ public class XpathRegressionNoWhitespaceBeforeTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNoWhitespaceBeforeTokens']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]"
@@ -94,7 +94,7 @@ public class XpathRegressionNoWhitespaceBeforeTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionNoWhitespaceBeforeLineBreaks']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionOneStatementPerLineTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionOneStatementPerLineTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -47,7 +47,7 @@ public class XpathRegressionOneStatementPerLineTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionOneStatementPerLineOne']]/OBJBLOCK"
                 + "/VARIABLE_DEF[./IDENT[@text='j']]/SEMI");
@@ -67,7 +67,7 @@ public class XpathRegressionOneStatementPerLineTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionOneStatementPerLineTwo']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='foo5']]/SLIST/LITERAL_FOR/SLIST/SEMI[2]");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionOperatorWrapTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionOperatorWrapTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -47,7 +47,7 @@ public class XpathRegressionOperatorWrapTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text"
                 + "='SuppressionXpathRegressionOperatorWrapNewLine']]"
@@ -73,7 +73,7 @@ public class XpathRegressionOperatorWrapTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionOperatorWrapPreviousLine']]"
                 + "/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='b']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionPackageNameTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionPackageNameTest.java
@@ -21,10 +21,10 @@ package org.checkstyle.suppressionxpathfilter;
 
 import static com.puppycrawl.tools.checkstyle.checks.naming.PackageNameCheck.MSG_KEY;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.naming.PackageNameCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -57,7 +57,7 @@ public class XpathRegressionPackageNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/PACKAGE_DEF/DOT"
                 + "[./IDENT[@text='packagename']]/DOT"
                 + "[./IDENT[@text='suppressionxpathfilter']]"
@@ -86,7 +86,7 @@ public class XpathRegressionPackageNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/PACKAGE_DEF/DOT[./IDENT"
                 + "[@text='PACKAGENAME']]/DOT[./IDENT"
                 + "[@text='suppressionxpathfilter']]"
@@ -115,7 +115,7 @@ public class XpathRegressionPackageNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/PACKAGE_DEF/DOT"
                 + "[./IDENT[@text='packagename']]/DOT"
                 + "[./IDENT[@text='suppressionxpathfilter']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionParameterNameTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionParameterNameTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck;
 import com.puppycrawl.tools.checkstyle.checks.naming.ParameterNameCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -51,7 +51,7 @@ public class XpathRegressionParameterNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text"
                 + "='SuppressionXpathRegressionParameterNameDefaultPattern']]"
@@ -76,7 +76,7 @@ public class XpathRegressionParameterNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text"
                 + "='SuppressionXpathRegressionParameterNameDifferentPattern']]"
@@ -101,7 +101,7 @@ public class XpathRegressionParameterNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text"
                 + "='SuppressionXpathRegressionParameterNameIgnoreOverridden']]"
@@ -127,7 +127,7 @@ public class XpathRegressionParameterNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text"
                 + "='SuppressionXpathRegressionParameterNameAccessModifier']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionParameterNumberTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionParameterNumberTest.java
@@ -21,10 +21,10 @@ package org.checkstyle.suppressionxpathfilter;
 
 import static com.puppycrawl.tools.checkstyle.checks.sizes.ParameterNumberCheck.MSG_KEY;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.sizes.ParameterNumberCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -47,7 +47,7 @@ public class XpathRegressionParameterNumberTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionParameterNumberDefault']]"
                 + "/OBJBLOCK/METHOD_DEF/IDENT[@text='myMethod']");
@@ -69,7 +69,7 @@ public class XpathRegressionParameterNumberTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionParameterNumberMethods']]"
                 + "/OBJBLOCK/METHOD_DEF/IDENT[@text='myMethod']");
@@ -91,7 +91,7 @@ public class XpathRegressionParameterNumberTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionParameterNumberIgnoreOverriddenMethods']]"
                 + "/OBJBLOCK/CTOR_DEF/IDENT"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionParenPadTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionParenPadTest.java
@@ -19,12 +19,12 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.AbstractParenPadCheck;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.PadOption;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -49,7 +49,7 @@ public class XpathRegressionParenPadTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionParenPadLeftFollowed']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='method']]/SLIST/LITERAL_IF/LPAREN");
@@ -71,7 +71,7 @@ public class XpathRegressionParenPadTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionParenPadLeftNotFollowed']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='method']]/SLIST/LITERAL_IF/LPAREN");
@@ -91,7 +91,7 @@ public class XpathRegressionParenPadTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionParenPadRightPreceded']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='method']]/SLIST/LITERAL_IF/RPAREN");
@@ -113,7 +113,7 @@ public class XpathRegressionParenPadTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionParenPadRightNotPreceded']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='method']]/SLIST/LITERAL_IF/RPAREN");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionPatternVariableNameTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionPatternVariableNameTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck;
 import com.puppycrawl.tools.checkstyle.checks.naming.PatternVariableNameCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -54,7 +54,7 @@ public class XpathRegressionPatternVariableNameTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionPatternVariableName1']]"
                 + "/OBJBLOCK/CTOR_DEF[./IDENT[@text='MyClass']]/SLIST/LITERAL_IF/EXPR/"
@@ -84,7 +84,7 @@ public class XpathRegressionPatternVariableNameTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionPatternVariableName2']]"
                 + "/OBJBLOCK/CTOR_DEF[./IDENT[@text='MyClass']]/SLIST/LITERAL_IF/EXPR/"
@@ -114,7 +114,7 @@ public class XpathRegressionPatternVariableNameTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionPatternVariableName3']]"
                 + "/OBJBLOCK/CTOR_DEF[./IDENT[@text='MyClass']]/SLIST/LITERAL_IF/"
@@ -144,7 +144,7 @@ public class XpathRegressionPatternVariableNameTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionPatternVariableName1']]"
                 + "/OBJBLOCK/CTOR_DEF[./IDENT[@text='MyClass']]/SLIST/LITERAL_IF/EXPR/"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRecordComponentNameTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRecordComponentNameTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck;
 import com.puppycrawl.tools.checkstyle.checks.naming.RecordComponentNameCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -53,7 +53,7 @@ public class XpathRegressionRecordComponentNameTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/RECORD_DEF[./IDENT[@text='SuppressionXpathRecordComponentName1']]"
                 + "/RECORD_COMPONENTS/RECORD_COMPONENT_DEF/IDENT[@text='_value']");
 
@@ -78,7 +78,7 @@ public class XpathRegressionRecordComponentNameTest extends AbstractXpathTestSup
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRecordComponentName2']]/OBJBLOCK"
                 + "/RECORD_DEF[./IDENT[@text='MyRecord']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRedundantImportTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRedundantImportTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.imports.RedundantImportCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -47,7 +47,7 @@ public class XpathRegressionRedundantImportTest extends AbstractXpathTestSupport
               "org.checkstyle.suppressionxpathfilter"
                   + ".redundantimport.SuppressionXpathRegressionRedundantImport1"),
     };
-    final List<String> expectedXpathQueries = Collections.singletonList("/COMPILATION_UNIT/IMPORT");
+    final List<String> expectedXpathQueries = ImmutableList.of("/COMPILATION_UNIT/IMPORT");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -61,7 +61,7 @@ public class XpathRegressionRedundantImportTest extends AbstractXpathTestSupport
           + getCheckMessage(
               RedundantImportCheck.class, RedundantImportCheck.MSG_LANG, "java.lang.String"),
     };
-    final List<String> expectedXpathQueries = Collections.singletonList("/COMPILATION_UNIT/IMPORT");
+    final List<String> expectedXpathQueries = ImmutableList.of("/COMPILATION_UNIT/IMPORT");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -79,7 +79,7 @@ public class XpathRegressionRedundantImportTest extends AbstractXpathTestSupport
               "java.util.Scanner"),
     };
     final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='Scanner']]");
+        ImmutableList.of("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='Scanner']]");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRequireThisTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRequireThisTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.RequireThisCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -47,7 +47,7 @@ public class XpathRegressionRequireThisTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionRequireThisOne']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='changeAge']]/SLIST/EXPR/ASSIGN"
@@ -68,7 +68,7 @@ public class XpathRegressionRequireThisTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionRequireThisTwo']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='method2']]/SLIST/EXPR"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionReturnCountTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionReturnCountTest.java
@@ -19,6 +19,7 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.ReturnCountCheck;
 import java.io.File;
@@ -186,7 +187,7 @@ public class XpathRegressionReturnCountTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionReturnCount4']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='testLambda']]/SLIST"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRightCurlyTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionRightCurlyTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck;
 import com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyOption;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -47,7 +47,7 @@ public class XpathRegressionRightCurlyTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionRightCurlyOne']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='test']]/SLIST/LITERAL_IF/SLIST/RCURLY");
@@ -68,7 +68,7 @@ public class XpathRegressionRightCurlyTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionRightCurlyTwo']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='fooMethod']]/SLIST/LITERAL_TRY/SLIST/RCURLY");
@@ -89,7 +89,7 @@ public class XpathRegressionRightCurlyTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionRightCurlyThree']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='sample']]/SLIST/LITERAL_IF/SLIST/RCURLY");
@@ -111,7 +111,7 @@ public class XpathRegressionRightCurlyTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionRightCurlyFour']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='sample']]/SLIST/LITERAL_IF/SLIST/RCURLY");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionSimplifyBooleanExpressionTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionSimplifyBooleanExpressionTest.java
@@ -21,11 +21,11 @@ package org.checkstyle.suppressionxpathfilter;
 
 import static com.puppycrawl.tools.checkstyle.checks.coding.SimplifyBooleanExpressionCheck.MSG_KEY;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.SimplifyBooleanExpressionCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -99,7 +99,7 @@ public class XpathRegressionSimplifyBooleanExpressionTest extends AbstractXpathT
     };
 
     final List<String> expectedXpathQuery =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text='SuppressionXpathRegressionSimplifyBooleanExpressionInterface']]"
                 + "/OBJBLOCK/INTERFACE_DEF[./IDENT[@text='Inner']]/OBJBLOCK/METHOD_DEF[./IDENT"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionSimplifyBooleanReturnTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionSimplifyBooleanReturnTest.java
@@ -21,10 +21,10 @@ package org.checkstyle.suppressionxpathfilter;
 
 import static com.puppycrawl.tools.checkstyle.checks.coding.SimplifyBooleanReturnCheck.MSG_KEY;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.SimplifyBooleanReturnCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -51,7 +51,7 @@ public class XpathRegressionSimplifyBooleanReturnTest extends AbstractXpathTestS
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text="
                 + "'SuppressionXpathRegressionSimplifyBooleanReturnIfBooleanEqualsBoolean']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='toTest']]/SLIST/LITERAL_IF");
@@ -72,7 +72,7 @@ public class XpathRegressionSimplifyBooleanReturnTest extends AbstractXpathTestS
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text="
                 + "'SuppressionXpathRegressionSimplifyBooleanReturnIfBooleanReturnBoolean']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='toTest']]/SLIST/EXPR/METHOD_CALL/ELIST"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionSingleSpaceSeparatorTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionSingleSpaceSeparatorTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -48,7 +48,7 @@ public class XpathRegressionSingleSpaceSeparatorTest extends AbstractXpathTestSu
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionSingleSpaceSeparator']]/OBJBLOCK"
                 + "/VARIABLE_DEF/IDENT[@text='bad']");
@@ -70,7 +70,7 @@ public class XpathRegressionSingleSpaceSeparatorTest extends AbstractXpathTestSu
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[."
                 + "/IDENT[@text='SuppressionXpathRegressionSingleSpaceSeparatorValidateComments']]"
                 + "/OBJBLOCK/SINGLE_LINE_COMMENT[./COMMENT_CONTENT"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionStaticVariableNameTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionStaticVariableNameTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck;
 import com.puppycrawl.tools.checkstyle.checks.naming.StaticVariableNameCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -54,7 +54,7 @@ public class XpathRegressionStaticVariableNameTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text"
                 + "='SuppressionXpathRegressionStaticVariableName1']]"
@@ -80,7 +80,7 @@ public class XpathRegressionStaticVariableNameTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text"
                 + "='SuppressionXpathRegressionStaticVariableName2']]"
@@ -108,7 +108,7 @@ public class XpathRegressionStaticVariableNameTest extends AbstractXpathTestSupp
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text"
                 + "='SuppressionXpathRegressionStaticVariableName2']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionStringLiteralEqualityTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionStringLiteralEqualityTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.StringLiteralEqualityCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -95,7 +95,7 @@ public class XpathRegressionStringLiteralEqualityTest extends AbstractXpathTestS
               StringLiteralEqualityCheck.class, StringLiteralEqualityCheck.MSG_KEY, "=="),
     };
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionStringLiteralEquality2']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='myFunction']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionSuperCloneTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionSuperCloneTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.AbstractSuperCheck;
 import com.puppycrawl.tools.checkstyle.checks.coding.SuperCloneCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -46,7 +46,7 @@ public class XpathRegressionSuperCloneTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpath"
                 + "RegressionSuperCloneInnerClone']]"
@@ -68,7 +68,7 @@ public class XpathRegressionSuperCloneTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpath"
                 + "RegressionSuperCloneNoSuperClone']]"
@@ -90,7 +90,7 @@ public class XpathRegressionSuperCloneTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpath"
                 + "RegressionSuperClonePlainAndSubclasses']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionThrowsCountTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionThrowsCountTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.design.ThrowsCountCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -43,7 +43,7 @@ public class XpathRegressionThrowsCountTest extends AbstractXpathTestSupport {
       "4:30: " + getCheckMessage(ThrowsCountCheck.class, ThrowsCountCheck.MSG_KEY, 5, 4),
     };
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionThrowsCount1']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='myFunction']]"
@@ -63,7 +63,7 @@ public class XpathRegressionThrowsCountTest extends AbstractXpathTestSupport {
       "4:30: " + getCheckMessage(ThrowsCountCheck.class, ThrowsCountCheck.MSG_KEY, 3, 2),
     };
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/INTERFACE_DEF[./IDENT[@text='SuppressionXpathRegressionThrowsCount2']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='myFunction']]"
@@ -83,7 +83,7 @@ public class XpathRegressionThrowsCountTest extends AbstractXpathTestSupport {
       "9:40: " + getCheckMessage(ThrowsCountCheck.class, ThrowsCountCheck.MSG_KEY, 5, 4),
     };
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text='SuppressionXpathRegressionThrowsCount3']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='myFunc']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionTodoCommentTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionTodoCommentTest.java
@@ -21,10 +21,10 @@ package org.checkstyle.suppressionxpathfilter;
 
 import static com.puppycrawl.tools.checkstyle.checks.TodoCommentCheck.MSG_KEY;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.TodoCommentCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -48,7 +48,7 @@ public class XpathRegressionTodoCommentTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text="
                 + "'SuppressionXpathRegressionTodoCommentOne']]/OBJBLOCK/"
                 + "SINGLE_LINE_COMMENT/COMMENT_CONTENT[@text=' warn FIXME:\\n']");
@@ -68,7 +68,7 @@ public class XpathRegressionTodoCommentTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text="
                 + "'SuppressionXpathRegressionTodoCommentTwo']]/"
                 + "OBJBLOCK/BLOCK_COMMENT_BEGIN/COMMENT_CONTENT"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionTrailingCommentTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionTrailingCommentTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -45,7 +45,7 @@ public class XpathRegressionTrailingCommentTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionTrailingComment1']]/"
                 + "OBJBLOCK/SINGLE_LINE_COMMENT[./COMMENT_CONTENT[@text=' don&apos;"
@@ -65,7 +65,7 @@ public class XpathRegressionTrailingCommentTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionTrailingComment2']]"
                 + "/OBJBLOCK/SINGLE_LINE_COMMENT[./COMMENT_CONTENT[@text=' warn\\n']]");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionTypeNameTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionTypeNameTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck;
 import com.puppycrawl.tools.checkstyle.checks.naming.TypeNameCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -50,7 +50,7 @@ public class XpathRegressionTypeNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text"
                 + "='SuppressionXpathRegressionTypeName1']]"
@@ -74,7 +74,7 @@ public class XpathRegressionTypeNameTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT"
                 + "/CLASS_DEF[./IDENT[@text"
                 + "='SuppressionXpathRegressionTypeName2']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionTypecastParenPadTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionTypecastParenPadTest.java
@@ -19,13 +19,13 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.AbstractParenPadCheck;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.PadOption;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -103,7 +103,7 @@ public class XpathRegressionTypecastParenPadTest extends AbstractXpathTestSuppor
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionTypecastParenPadRightPreceded']]"
                 + "/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='bad']]/ASSIGN/EXPR/TYPECAST/RPAREN");
@@ -126,7 +126,7 @@ public class XpathRegressionTypecastParenPadTest extends AbstractXpathTestSuppor
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionTypecastParenPadRightNotPreceded']]"
                 + "/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='bad']]/ASSIGN/EXPR/TYPECAST/RPAREN");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionUnnecessaryParenthesesTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionUnnecessaryParenthesesTest.java
@@ -19,11 +19,11 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.UnnecessaryParenthesesCheck;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -102,7 +102,7 @@ public class XpathRegressionUnnecessaryParenthesesTest extends AbstractXpathTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionUnnecessaryParentheses3']]"
                 + "/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='predicate']]"
@@ -125,7 +125,7 @@ public class XpathRegressionUnnecessaryParenthesesTest extends AbstractXpathTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionUnnecessaryParentheses4']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo']]"
@@ -151,7 +151,7 @@ public class XpathRegressionUnnecessaryParenthesesTest extends AbstractXpathTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionUnnecessaryParentheses5']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo']]"
@@ -175,7 +175,7 @@ public class XpathRegressionUnnecessaryParenthesesTest extends AbstractXpathTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='SuppressionXpathRegressionUnnecessaryParentheses6']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionUnnecessarySemicolonAfterOuterTypeDeclarationTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionUnnecessarySemicolonAfterOuterTypeDeclarationTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.UnnecessarySemicolonAfterOuterTypeDeclarationCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -48,7 +48,7 @@ public class XpathRegressionUnnecessarySemicolonAfterOuterTypeDeclarationTest
       "5:2: " + getCheckMessage(CLASS, UnnecessarySemicolonAfterOuterTypeDeclarationCheck.MSG_SEMI),
     };
 
-    final List<String> expectedXpathQueries = Collections.singletonList("/COMPILATION_UNIT/SEMI");
+    final List<String> expectedXpathQueries = ImmutableList.of("/COMPILATION_UNIT/SEMI");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -66,7 +66,7 @@ public class XpathRegressionUnnecessarySemicolonAfterOuterTypeDeclarationTest
           + getCheckMessage(CLASS, UnnecessarySemicolonAfterOuterTypeDeclarationCheck.MSG_SEMI),
     };
 
-    final List<String> expectedXpathQueries = Collections.singletonList("/COMPILATION_UNIT/SEMI");
+    final List<String> expectedXpathQueries = ImmutableList.of("/COMPILATION_UNIT/SEMI");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionUnnecessarySemicolonAfterTypeMemberDeclarationTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionUnnecessarySemicolonAfterTypeMemberDeclarationTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.UnnecessarySemicolonAfterTypeMemberDeclarationCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -50,7 +50,7 @@ public class XpathRegressionUnnecessarySemicolonAfterTypeMemberDeclarationTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT"
                 + "[@text="
                 + "'SuppressionXpathRegressionUnnecessarySemicolonAfterTypeMemberDeclaration']]"
@@ -75,7 +75,7 @@ public class XpathRegressionUnnecessarySemicolonAfterTypeMemberDeclarationTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[."
                 + "/IDENT[@text='SuppressionXpathRegressionUnnecessarySemicolonAfterTypeMember"
                 + "DeclarationTokens']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionUnnecessarySemicolonInEnumerationTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionUnnecessarySemicolonInEnumerationTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.UnnecessarySemicolonInEnumerationCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -51,7 +51,7 @@ public class XpathRegressionUnnecessarySemicolonInEnumerationTest extends Abstra
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList("/COMPILATION_UNIT/ENUM_DEF[./IDENT[@text='Bad']]/OBJBLOCK/SEMI");
+        ImmutableList.of("/COMPILATION_UNIT/ENUM_DEF[./IDENT[@text='Bad']]/OBJBLOCK/SEMI");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
   }
@@ -72,7 +72,7 @@ public class XpathRegressionUnnecessarySemicolonInEnumerationTest extends Abstra
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/ENUM_DEF[./IDENT[@text="
                 + "'SuppressionXpathRegressionUnnecessarySemicolonInEnumerationAll']]"
                 + "/OBJBLOCK/SEMI");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionUnnecessarySemicolonInTryWithResourcesTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionUnnecessarySemicolonInTryWithResourcesTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.coding.UnnecessarySemicolonInTryWithResourcesCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -54,7 +54,7 @@ public class XpathRegressionUnnecessarySemicolonInTryWithResourcesTest
               UnnecessarySemicolonInTryWithResourcesCheck.MSG_SEMI),
     };
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text="
                 + "'SuppressionXpathRegressionUnnecessarySemicolonInTryWithResources']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='m']]/SLIST/LITERAL_TRY"
@@ -81,7 +81,7 @@ public class XpathRegressionUnnecessarySemicolonInTryWithResourcesTest
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text="
                 + "'SuppressionXpathRegressionUnnecessarySemicolonInTryWithResourcesNoBrace']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='test']]"
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionUnusedImportsTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionUnusedImportsTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -47,7 +47,7 @@ public class XpathRegressionUnusedImportsTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/IMPORT/DOT[./IDENT[@text='List']]/DOT/IDENT[@text='java']");
 
     runVerifications(moduleConfig, fileToProcess, expectedViolation, expectedXpathQueries);
@@ -66,7 +66,7 @@ public class XpathRegressionUnusedImportsTest extends AbstractXpathTestSupport {
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/STATIC_IMPORT/DOT"
                 + "[./IDENT[@text='Entry']]/DOT[./IDENT[@text='Map']]"
                 + "/DOT/IDENT[@text='java']");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionWhitespaceAfterTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionWhitespaceAfterTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -48,7 +48,7 @@ public class XpathRegressionWhitespaceAfterTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionWhitespaceAfterTypecast']]/OBJBLOCK"
                 + "/VARIABLE_DEF[./IDENT[@text='bad']]/ASSIGN/EXPR/TYPECAST/RPAREN");
@@ -70,7 +70,7 @@ public class XpathRegressionWhitespaceAfterTest extends AbstractXpathTestSupport
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionWhitespaceAfterNotFollowed']]/OBJBLOCK"
                 + "/VARIABLE_DEF[./IDENT[@text='bad']]/ASSIGN/ARRAY_INIT/COMMA");
--- a/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionWhitespaceAroundTest.java
+++ b/src/it/java/org/checkstyle/suppressionxpathfilter/XpathRegressionWhitespaceAroundTest.java
@@ -19,10 +19,10 @@
 
 package org.checkstyle.suppressionxpathfilter;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -49,7 +49,7 @@ public class XpathRegressionWhitespaceAroundTest extends AbstractXpathTestSuppor
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionWhitespaceAroundNotPreceded']]/OBJBLOCK"
                 + "/VARIABLE_DEF[./IDENT[@text='bad']]/ASSIGN");
@@ -71,7 +71,7 @@ public class XpathRegressionWhitespaceAroundTest extends AbstractXpathTestSuppor
     };
 
     final List<String> expectedXpathQueries =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT["
                 + "@text='SuppressionXpathRegressionWhitespaceAroundNotFollowed']]/OBJBLOCK"
                 + "/VARIABLE_DEF[./IDENT[@text='bad']]/ASSIGN");
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle;
 
+import static com.google.common.base.Preconditions.checkState;
+
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
@@ -523,9 +525,7 @@ public final class ConfigurationLoader {
         final DefaultConfiguration top = configStack.peek();
         top.addMessage(key, value);
       } else {
-        if (!METADATA.equals(qName)) {
-          throw new IllegalStateException("Unknown name:" + qName + ".");
-        }
+        checkState(METADATA.equals(qName), "Unknown name:" + qName + ".");
       }
     }
 
--- a/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import com.puppycrawl.tools.checkstyle.api.AuditEvent;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.AutomaticBean;
@@ -126,13 +128,9 @@ public class DefaultLogger extends AbstractAutomaticBean implements AuditListene
       OutputStream errorStream,
       OutputStreamOptions errorStreamOptions,
       AuditEventFormatter messageFormatter) {
-    if (infoStreamOptions == null) {
-      throw new IllegalArgumentException("Parameter infoStreamOptions can not be null");
-    }
+    checkArgument(infoStreamOptions != null, "Parameter infoStreamOptions can not be null");
     closeInfo = infoStreamOptions == OutputStreamOptions.CLOSE;
-    if (errorStreamOptions == null) {
-      throw new IllegalArgumentException("Parameter errorStreamOptions can not be null");
-    }
+    checkArgument(errorStreamOptions != null, "Parameter errorStreamOptions can not be null");
     closeError = errorStreamOptions == OutputStreamOptions.CLOSE;
     final Writer infoStreamWriter = new OutputStreamWriter(infoStream, StandardCharsets.UTF_8);
     infoWriter = new PrintWriter(infoStreamWriter);
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Definitions.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Definitions.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle;
 
+import com.google.common.collect.ImmutableSet;
 import java.util.Set;
 
 /** Contains constant definitions common to the package. */
@@ -29,7 +30,7 @@ public final class Definitions {
 
   /** Name of modules which are not checks, but are internal modules. */
   public static final Set<String> INTERNAL_MODULES =
-      Set.of(
+      ImmutableSet.of(
           "com.puppycrawl.tools.checkstyle.meta.JavadocMetadataScraper",
           "com.puppycrawl.tools.checkstyle.site.ClassAndPropertiesSettersJavadocScraper");
 
--- a/src/main/java/com/puppycrawl/tools/checkstyle/JavaAstVisitor.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/JavaAstVisitor.java
@@ -19,13 +19,15 @@
 
 package com.puppycrawl.tools.checkstyle;
 
+import static java.util.Objects.requireNonNullElseGet;
+
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.grammar.java.JavaLanguageLexer;
 import com.puppycrawl.tools.checkstyle.grammar.java.JavaLanguageParser;
 import com.puppycrawl.tools.checkstyle.grammar.java.JavaLanguageParserBaseVisitor;
 import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
@@ -790,7 +792,7 @@ public final class JavaAstVisitor extends JavaLanguageParserBaseVisitor<DetailAs
     final DetailAstImpl dummyNode = new DetailAstImpl();
     // Since the TYPE AST is built by visitAnnotationMethodOrConstantRest(), we skip it
     // here (child [0])
-    processChildren(dummyNode, Collections.singletonList(ctx.children.get(1)));
+    processChildren(dummyNode, ImmutableList.of(ctx.children.get(1)));
     // We also append the SEMI token to the first child [size() - 1],
     // until https://github.com/checkstyle/checkstyle/issues/3151
     dummyNode.getFirstChild().addChild(create(ctx.SEMI()));
@@ -1431,8 +1433,7 @@ public final class JavaAstVisitor extends JavaLanguageParserBaseVisitor<DetailAs
 
     // We always add an 'ELIST' node
     final DetailAstImpl expressionList =
-        Optional.ofNullable(visit(ctx.expressionList()))
-            .orElseGet(() -> createImaginary(TokenTypes.ELIST));
+        requireNonNullElseGet(visit(ctx.expressionList()), () -> createImaginary(TokenTypes.ELIST));
 
     DetailAstPair.addAstChild(currentAst, expressionList);
     DetailAstPair.addAstChild(currentAst, create(ctx.RPAREN()));
@@ -1458,8 +1459,7 @@ public final class JavaAstVisitor extends JavaLanguageParserBaseVisitor<DetailAs
     methodCall.addChild(visit(ctx.id()));
     // We always add an 'ELIST' node
     final DetailAstImpl expressionList =
-        Optional.ofNullable(visit(ctx.expressionList()))
-            .orElseGet(() -> createImaginary(TokenTypes.ELIST));
+        requireNonNullElseGet(visit(ctx.expressionList()), () -> createImaginary(TokenTypes.ELIST));
 
     methodCall.addChild(expressionList);
     methodCall.addChild(create((Token) ctx.RPAREN().getPayload()));
@@ -1602,8 +1602,7 @@ public final class JavaAstVisitor extends JavaLanguageParserBaseVisitor<DetailAs
         create(TokenTypes.METHOD_CALL, (Token) ctx.LPAREN().getPayload());
     // We always add an 'ELIST' node
     final DetailAstImpl expressionList =
-        Optional.ofNullable(visit(ctx.expressionList()))
-            .orElseGet(() -> createImaginary(TokenTypes.ELIST));
+        requireNonNullElseGet(visit(ctx.expressionList()), () -> createImaginary(TokenTypes.ELIST));
 
     final DetailAstImpl dot = create(ctx.DOT());
     dot.addChild(visit(ctx.expr()));
@@ -1636,8 +1635,8 @@ public final class JavaAstVisitor extends JavaLanguageParserBaseVisitor<DetailAs
 
     // We add an 'PARAMETERS' node here whether it exists or not
     final DetailAstImpl parameters =
-        Optional.ofNullable(visit(ctx.formalParameterList()))
-            .orElseGet(() -> createImaginary(TokenTypes.PARAMETERS));
+        requireNonNullElseGet(
+            visit(ctx.formalParameterList()), () -> createImaginary(TokenTypes.PARAMETERS));
     addLastSibling(lparen, parameters);
     addLastSibling(lparen, create(ctx.RPAREN()));
     return lparen;
@@ -2111,8 +2110,8 @@ public final class JavaAstVisitor extends JavaLanguageParserBaseVisitor<DetailAs
       root.addChild(dot);
 
       final DetailAstImpl expressionList =
-          Optional.ofNullable(visit(ctx.expressionList()))
-              .orElseGet(() -> createImaginary(TokenTypes.ELIST));
+          requireNonNullElseGet(
+              visit(ctx.expressionList()), () -> createImaginary(TokenTypes.ELIST));
       root.addChild(expressionList);
 
       root.addChild(create(ctx.RPAREN()));
@@ -2127,8 +2126,7 @@ public final class JavaAstVisitor extends JavaLanguageParserBaseVisitor<DetailAs
 
     // We always add an 'ELIST' node
     final DetailAstImpl expressionList =
-        Optional.ofNullable(visit(ctx.expressionList()))
-            .orElseGet(() -> createImaginary(TokenTypes.ELIST));
+        requireNonNullElseGet(visit(ctx.expressionList()), () -> createImaginary(TokenTypes.ELIST));
     addLastSibling(lparen, expressionList);
     addLastSibling(lparen, create(ctx.RPAREN()));
     return lparen;
--- a/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/Main.java
@@ -38,7 +38,6 @@ import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
-import java.util.Objects;
 import java.util.Properties;
 import java.util.logging.ConsoleHandler;
 import java.util.logging.Filter;
@@ -274,7 +273,7 @@ public final class Main {
       final String stringAst =
           AstTreeStringPrinter.printFileAst(file, JavaParser.Options.WITHOUT_COMMENTS);
       System.out.print(stringAst);
-    } else if (Objects.nonNull(options.xpath)) {
+    } else if (options.xpath != null) {
       final String branch = XpathUtil.printXpathBranch(options.xpath, filesToProcess.get(0));
       System.out.print(branch);
     } else if (options.printAstWithComments) {
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java
@@ -19,10 +19,13 @@
 
 package com.puppycrawl.tools.checkstyle;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.utils.ModuleReflectionUtil;
 import java.io.IOException;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashSet;
@@ -126,12 +129,8 @@ public class PackageObjectFactory implements ModuleFactory {
    */
   public PackageObjectFactory(
       Set<String> packageNames, ClassLoader moduleClassLoader, ModuleLoadOption moduleLoadOption) {
-    if (moduleClassLoader == null) {
-      throw new IllegalArgumentException(NULL_LOADER_MESSAGE);
-    }
-    if (packageNames.contains(null)) {
-      throw new IllegalArgumentException(NULL_PACKAGE_MESSAGE);
-    }
+    checkArgument(moduleClassLoader != null, NULL_LOADER_MESSAGE);
+    checkArgument(!packageNames.contains(null), NULL_PACKAGE_MESSAGE);
 
     // create a copy of the given set, but retain ordering
     packages = new LinkedHashSet<>(packageNames);
@@ -147,14 +146,10 @@ public class PackageObjectFactory implements ModuleFactory {
    * @throws IllegalArgumentException if moduleClassLoader is null or packageNames is null
    */
   public PackageObjectFactory(String packageName, ClassLoader moduleClassLoader) {
-    if (moduleClassLoader == null) {
-      throw new IllegalArgumentException(NULL_LOADER_MESSAGE);
-    }
-    if (packageName == null) {
-      throw new IllegalArgumentException(NULL_PACKAGE_MESSAGE);
-    }
+    checkArgument(moduleClassLoader != null, NULL_LOADER_MESSAGE);
+    checkArgument(packageName != null, NULL_PACKAGE_MESSAGE);
 
-    packages = Collections.singleton(packageName);
+    packages = ImmutableSet.of(packageName);
     this.moduleClassLoader = moduleClassLoader;
   }
 
@@ -304,7 +299,7 @@ public class PackageObjectFactory implements ModuleFactory {
                       Collectors.mapping(
                           Class::getCanonicalName, Collectors.toCollection(HashSet::new))));
     } catch (IOException ignore) {
-      returnValue = Collections.emptyMap();
+      returnValue = ImmutableMap.of();
     }
     return returnValue;
   }
@@ -318,8 +313,8 @@ public class PackageObjectFactory implements ModuleFactory {
   public static String getShortFromFullModuleNames(String fullName) {
     return NAME_TO_FULL_MODULE_NAME.entrySet().stream()
         .filter(entry -> entry.getValue().equals(fullName))
-        .map(Entry::getKey)
         .findFirst()
+        .map(Entry::getKey)
         .orElse(fullName);
   }
 
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PropertiesExpander.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PropertiesExpander.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import java.util.Map;
 import java.util.Properties;
 import java.util.function.Function;
@@ -37,9 +39,7 @@ public final class PropertiesExpander implements PropertyResolver {
    * @throws IllegalArgumentException when properties argument is null
    */
   public PropertiesExpander(Properties properties) {
-    if (properties == null) {
-      throw new IllegalArgumentException("cannot pass null");
-    }
+    checkArgument(properties != null, "cannot pass null");
     values =
         properties.stringPropertyNames().stream()
             .collect(Collectors.toUnmodifiableMap(Function.identity(), properties::getProperty));
--- a/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
@@ -94,12 +96,8 @@ public final class PropertyCacheFile {
    * @throws IllegalArgumentException when either arguments are null
    */
   public PropertyCacheFile(Configuration config, String fileName) {
-    if (config == null) {
-      throw new IllegalArgumentException("config can not be null");
-    }
-    if (fileName == null) {
-      throw new IllegalArgumentException("fileName can not be null");
-    }
+    checkArgument(config != null, "config can not be null");
+    checkArgument(fileName != null, "fileName can not be null");
     this.config = config;
     this.fileName = fileName;
   }
--- a/src/main/java/com/puppycrawl/tools/checkstyle/SarifLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/SarifLogger.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import com.puppycrawl.tools.checkstyle.api.AuditEvent;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
@@ -107,9 +109,7 @@ public class SarifLogger extends AbstractAutomaticBean implements AuditListener
    */
   public SarifLogger(OutputStream outputStream, OutputStreamOptions outputStreamOptions)
       throws IOException {
-    if (outputStreamOptions == null) {
-      throw new IllegalArgumentException("Parameter outputStreamOptions can not be null");
-    }
+    checkArgument(outputStreamOptions != null, "Parameter outputStreamOptions can not be null");
     writer = new PrintWriter(new OutputStreamWriter(outputStream, StandardCharsets.UTF_8));
     closeStream = outputStreamOptions == OutputStreamOptions.CLOSE;
     report = readResource("/com/puppycrawl/tools/checkstyle/sarif/SarifReport.template");
--- a/src/main/java/com/puppycrawl/tools/checkstyle/ThreadModeSettings.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/ThreadModeSettings.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import java.io.Serializable;
 
 /**
@@ -93,14 +95,12 @@ public class ThreadModeSettings implements Serializable {
    */
   public final String resolveName(String name) {
     if (checkerThreadsNumber > 1) {
-      if (CHECKER_MODULE_NAME.equals(name)) {
-        throw new IllegalArgumentException(
-            "Multi thread mode for Checker module is not implemented");
-      }
-      if (TREE_WALKER_MODULE_NAME.equals(name)) {
-        throw new IllegalArgumentException(
-            "Multi thread mode for TreeWalker module is not implemented");
-      }
+      checkArgument(
+          !CHECKER_MODULE_NAME.equals(name),
+          "Multi thread mode for Checker module is not implemented");
+      checkArgument(
+          !TREE_WALKER_MODULE_NAME.equals(name),
+          "Multi thread mode for TreeWalker module is not implemented");
     }
 
     return name;
--- a/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import com.puppycrawl.tools.checkstyle.api.AuditEvent;
 import com.puppycrawl.tools.checkstyle.api.AuditListener;
 import com.puppycrawl.tools.checkstyle.api.AutomaticBean;
@@ -90,9 +92,7 @@ public class XMLLogger extends AbstractAutomaticBean implements AuditListener {
    */
   public XMLLogger(OutputStream outputStream, OutputStreamOptions outputStreamOptions) {
     writer = new PrintWriter(new OutputStreamWriter(outputStream, StandardCharsets.UTF_8));
-    if (outputStreamOptions == null) {
-      throw new IllegalArgumentException("Parameter outputStreamOptions can not be null");
-    }
+    checkArgument(outputStreamOptions != null, "Parameter outputStreamOptions can not be null");
     closeStream = outputStreamOptions == OutputStreamOptions.CLOSE;
   }
 
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.api;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
 import java.io.File;
 import java.util.Arrays;
@@ -164,9 +166,7 @@ public abstract class AbstractFileSetCheck extends AbstractViolationReporter
    * @throws IllegalArgumentException is argument is null
    */
   public final void setFileExtensions(String... extensions) {
-    if (extensions == null) {
-      throw new IllegalArgumentException("Extensions array can not be null");
-    }
+    checkArgument(extensions != null, "Extensions array can not be null");
 
     fileExtensions = new String[extensions.length];
     for (int i = 0; i < extensions.length; i++) {
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.api;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 /**
  * Raw event for audit.
  *
@@ -69,9 +71,7 @@ public final class AuditEvent {
    * @throws IllegalArgumentException if {@code src} is {@code null}.
    */
   public AuditEvent(Object src, String fileName, Violation violation) {
-    if (src == null) {
-      throw new IllegalArgumentException("null source");
-    }
+    checkArgument(src != null, "null source");
 
     source = src;
     this.fileName = fileName;
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounter.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.api;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
@@ -40,9 +42,7 @@ public final class SeverityLevelCounter implements AuditListener {
    * @throws IllegalArgumentException when level is null
    */
   public SeverityLevelCounter(SeverityLevel level) {
-    if (level == null) {
-      throw new IllegalArgumentException("'level' cannot be null");
-    }
+    checkArgument(level != null, "'level' cannot be null");
     this.level = level;
   }
 
--- a/src/main/java/com/puppycrawl/tools/checkstyle/api/Violation.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/api/Violation.java
@@ -385,7 +385,7 @@ public final class Violation implements Comparable<Violation> {
         && Objects.equals(columnNo, violation.columnNo)
         && Objects.equals(columnCharIndex, violation.columnCharIndex)
         && Objects.equals(tokenType, violation.tokenType)
-        && Objects.equals(severityLevel, violation.severityLevel)
+        && severityLevel == violation.severityLevel
         && Objects.equals(moduleId, violation.moduleId)
         && Objects.equals(key, violation.key)
         && Objects.equals(bundle, violation.bundle)
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java
@@ -19,12 +19,14 @@
 
 package com.puppycrawl.tools.checkstyle.checks;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.StatelessCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.AuditEvent;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
@@ -296,7 +298,7 @@ public class SuppressWarningsHolder extends AbstractCheck {
    */
   private static List<String> getAllAnnotationValues(DetailAST ast) {
     // get values of annotation
-    List<String> values = Collections.emptyList();
+    List<String> values = ImmutableList.of();
     final DetailAST lparenAST = ast.findFirstToken(TokenTypes.LPAREN);
     if (lparenAST != null) {
       final DetailAST nextAST = lparenAST.getNextSibling();
@@ -378,9 +380,7 @@ public class SuppressWarningsHolder extends AbstractCheck {
    * @throws IllegalArgumentException if the AST is invalid
    */
   private static String getIdentifier(DetailAST ast) {
-    if (ast == null) {
-      throw new IllegalArgumentException("Identifier AST expected, but get null.");
-    }
+    checkArgument(ast != null, "Identifier AST expected, but get null.");
     final String identifier;
     if (ast.getType() == TokenTypes.IDENT) {
       identifier = ast.getText();
@@ -436,7 +436,7 @@ public class SuppressWarningsHolder extends AbstractCheck {
     final List<String> annotationValues;
     switch (ast.getType()) {
       case TokenTypes.EXPR:
-        annotationValues = Collections.singletonList(getStringExpr(ast));
+        annotationValues = ImmutableList.of(getStringExpr(ast));
         break;
       case TokenTypes.ANNOTATION_ARRAY_INIT:
         annotationValues = findAllExpressionsInChildren(ast);
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.FileStatefulCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -60,7 +61,7 @@ public class UncommentedMainCheck extends AbstractCheck {
 
   /** Set of possible String array types. */
   private static final Set<String> STRING_PARAMETER_NAMES =
-      Set.of(
+      ImmutableSet.of(
           String[].class.getCanonicalName(),
           String.class.getCanonicalName(),
           String[].class.getSimpleName(),
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.annotation;
 
+import static java.util.Objects.requireNonNullElse;
+
 import com.puppycrawl.tools.checkstyle.StatelessCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -152,8 +154,7 @@ public final class MissingOverrideCheck extends AbstractCheck {
     final DetailAST startNode;
     if (modifiers.hasChildren()) {
       startNode =
-          Optional.ofNullable(ast.getFirstChild().findFirstToken(TokenTypes.ANNOTATION))
-              .orElse(modifiers);
+          requireNonNullElse(ast.getFirstChild().findFirstToken(TokenTypes.ANNOTATION), modifiers);
     } else {
       startNode = ast.findFirstToken(TokenTypes.TYPE);
     }
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java
@@ -370,7 +370,7 @@ public class FallThroughCheck extends AbstractCheck {
     return Optional.ofNullable(getNextNonCommentAst(ast))
         .map(DetailAST::getPreviousSibling)
         .map(previous -> previous.getFirstChild().getText())
-        .map(text -> reliefPattern.matcher(text).find())
-        .orElse(Boolean.FALSE);
+        .filter(text -> reliefPattern.matcher(text).find())
+        .isPresent();
   }
 }
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks.coding;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.FileStatefulCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -26,7 +27,6 @@ import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.utils.CheckUtil;
 import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
 import java.util.ArrayDeque;
-import java.util.Collections;
 import java.util.Deque;
 import java.util.HashSet;
 import java.util.Set;
@@ -99,7 +99,7 @@ public final class ParameterAssignmentCheck extends AbstractCheck {
   public void beginTree(DetailAST rootAST) {
     // clear data
     parameterNamesStack.clear();
-    parameterNames = Collections.emptySet();
+    parameterNames = ImmutableSet.of();
   }
 
   @Override
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks.design;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.FileStatefulCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -152,7 +153,7 @@ public class VisibilityModifierCheck extends AbstractCheck {
 
   /** Default ignore annotations canonical names. */
   private static final Set<String> DEFAULT_IGNORE_ANNOTATIONS =
-      Set.of(
+      ImmutableSet.of(
           "org.junit.Rule",
           "org.junit.ClassRule",
           "com.google.common.annotations.VisibleForTesting");
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java
@@ -19,6 +19,9 @@
 
 package com.puppycrawl.tools.checkstyle.checks.header;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.PropertyType;
 import com.puppycrawl.tools.checkstyle.XdocsPropertyType;
 import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;
@@ -35,7 +38,6 @@ import java.net.URI;
 import java.nio.charset.Charset;
 import java.nio.charset.UnsupportedCharsetException;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 import java.util.regex.Pattern;
@@ -116,10 +118,9 @@ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck
    * @throws IllegalArgumentException if header has already been set
    */
   private void checkHeaderNotInitialized() {
-    if (!readerLines.isEmpty()) {
-      throw new IllegalArgumentException(
-          "header has already been set - " + "set either header or headerFile, not both");
-    }
+    checkArgument(
+        readerLines.isEmpty(),
+        "header has already been set - " + "set either header or headerFile, not both");
   }
 
   /**
@@ -190,9 +191,9 @@ public abstract class AbstractHeaderCheck extends AbstractFileSetCheck
     final Set<String> result;
 
     if (headerFile == null) {
-      result = Collections.emptySet();
+      result = ImmutableSet.of();
     } else {
-      result = Collections.singleton(headerFile.toString());
+      result = ImmutableSet.of(headerFile.toString());
     }
 
     return result;
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.header;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import com.puppycrawl.tools.checkstyle.StatelessCheck;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
@@ -263,9 +265,7 @@ public class RegexpHeaderCheck extends AbstractHeaderCheck {
   @Override
   public void setHeader(String header) {
     if (!CommonUtil.isBlank(header)) {
-      if (!CommonUtil.isPatternValid(header)) {
-        throw new IllegalArgumentException("Unable to parse format: " + header);
-      }
+      checkArgument(CommonUtil.isPatternValid(header), "Unable to parse format: " + header);
       super.setHeader(header);
     }
   }
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.imports;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import com.puppycrawl.tools.checkstyle.FileStatefulCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -649,10 +651,9 @@ public class CustomImportOrderCheck extends AbstractCheck {
     } else if (ruleStr.startsWith(SAME_PACKAGE_RULE_GROUP)) {
       final String rule = ruleStr.substring(ruleStr.indexOf('(') + 1, ruleStr.indexOf(')'));
       samePackageMatchingDepth = Integer.parseInt(rule);
-      if (samePackageMatchingDepth <= 0) {
-        throw new IllegalArgumentException(
-            "SAME_PACKAGE rule parameter should be positive integer: " + ruleStr);
-      }
+      checkArgument(
+          samePackageMatchingDepth > 0,
+          "SAME_PACKAGE rule parameter should be positive integer: " + ruleStr);
       customImportOrderRules.add(SAME_PACKAGE_RULE_GROUP);
     } else {
       throw new IllegalStateException("Unexpected rule: " + ruleStr);
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks.imports;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.FileStatefulCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
@@ -27,7 +28,6 @@ import com.puppycrawl.tools.checkstyle.api.ExternalResourceHolder;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import java.net.URI;
-import java.util.Collections;
 import java.util.Set;
 import java.util.regex.Pattern;
 
@@ -207,7 +207,7 @@ public class ImportControlCheck extends AbstractCheck implements ExternalResourc
 
   @Override
   public Set<String> getExternalResourceLocations() {
-    return Collections.singleton(file.toString());
+    return ImmutableSet.of(file.toString());
   }
 
   /**
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.imports;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import com.puppycrawl.tools.checkstyle.FileStatefulCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -658,9 +660,7 @@ public class ImportOrderCheck extends AbstractCheck {
         // matches any package
         grp = Pattern.compile("");
       } else if (pkg.startsWith(FORWARD_SLASH)) {
-        if (!pkg.endsWith(FORWARD_SLASH)) {
-          throw new IllegalArgumentException("Invalid group: " + pkg);
-        }
+        checkArgument(pkg.endsWith(FORWARD_SLASH), "Invalid group: " + pkg);
         pkg = pkg.substring(1, pkg.length() - 1);
         grp = Pattern.compile(pkg);
       } else {
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.StatelessCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -219,7 +220,7 @@ public class JavadocMethodCheck extends AbstractCheck {
   private boolean allowMissingReturnTag;
 
   /** Specify annotations that allow missed documentation. */
-  private Set<String> allowedAnnotations = Set.of("Override");
+  private Set<String> allowedAnnotations = ImmutableSet.of("Override");
 
   /**
    * Setter to control whether to validate {@code throws} tags.
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagInfo.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagInfo.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.Scope;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -376,15 +378,11 @@ public enum JavadocTagInfo {
    * @throws IllegalArgumentException if the text is not a valid tag
    */
   public static JavadocTagInfo fromText(final String text) {
-    if (text == null) {
-      throw new IllegalArgumentException("the text is null");
-    }
+    checkArgument(text != null, "the text is null");
 
     final JavadocTagInfo tag = TEXT_TO_TAG.get(text);
 
-    if (tag == null) {
-      throw new IllegalArgumentException("the text [" + text + "] is not a valid Javadoc tag text");
-    }
+    checkArgument(tag != null, "the text [" + text + "] is not a valid Javadoc tag text");
 
     return tag;
   }
@@ -399,15 +397,11 @@ public enum JavadocTagInfo {
    *     {@link JavadocTagInfo#isValidName(String)}
    */
   public static JavadocTagInfo fromName(final String name) {
-    if (name == null) {
-      throw new IllegalArgumentException("the name is null");
-    }
+    checkArgument(name != null, "the name is null");
 
     final JavadocTagInfo tag = NAME_TO_TAG.get(name);
 
-    if (tag == null) {
-      throw new IllegalArgumentException("the name [" + name + "] is not a valid Javadoc tag name");
-    }
+    checkArgument(tag != null, "the name [" + name + "] is not a valid Javadoc tag name");
 
     return tag;
   }
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.StatelessCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -160,7 +161,7 @@ public class JavadocTypeCheck extends AbstractCheck {
    * Specify annotations that allow skipping validation at all. Only short names are allowed, e.g.
    * {@code Generated}.
    */
-  private Set<String> allowedAnnotations = Set.of("Generated");
+  private Set<String> allowedAnnotations = ImmutableSet.of("Generated");
 
   /**
    * Setter to specify the visibility scope where Javadoc comments are checked.
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/MissingJavadocMethodCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/MissingJavadocMethodCheck.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.FileStatefulCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -141,7 +142,7 @@ public class MissingJavadocMethodCheck extends AbstractCheck {
   private Pattern ignoreMethodNamesRegex;
 
   /** Configure annotations that allow missed documentation. */
-  private Set<String> allowedAnnotations = Set.of("Override");
+  private Set<String> allowedAnnotations = ImmutableSet.of("Override");
 
   /**
    * Setter to configure annotations that allow missed documentation.
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/MissingJavadocTypeCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/MissingJavadocTypeCheck.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.StatelessCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -87,7 +88,7 @@ public class MissingJavadocTypeCheck extends AbstractCheck {
    * Specify annotations that allow missed documentation. If annotation is present in target sources
    * in multiple forms of qualified name, all forms should be listed in this property.
    */
-  private Set<String> skipAnnotations = Set.of("Generated");
+  private Set<String> skipAnnotations = ImmutableSet.of("Generated");
 
   /**
    * Setter to specify the visibility scope where Javadoc comments are checked.
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks.javadoc;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.StatelessCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
@@ -70,7 +71,7 @@ public class SingleLineJavadocCheck extends AbstractJavadocCheck {
    * href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html#CHDBEFIF">
    * block tags</a> which are ignored by the check.
    */
-  private Set<String> ignoredTags = Set.of();
+  private Set<String> ignoredTags = ImmutableSet.of();
 
   /**
    * Control whether <a
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtil.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/utils/InlineTagUtil.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.javadoc.utils;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import com.puppycrawl.tools.checkstyle.api.LineColumn;
 import java.util.ArrayList;
 import java.util.List;
@@ -60,9 +62,9 @@ public final class InlineTagUtil {
    */
   public static List<TagInfo> extractInlineTags(String... lines) {
     for (String line : lines) {
-      if (line.indexOf(LINE_FEED) != -1 || line.indexOf(CARRIAGE_RETURN) != -1) {
-        throw new IllegalArgumentException("comment lines cannot contain newlines");
-      }
+      checkArgument(
+          line.indexOf(LINE_FEED) == -1 && line.indexOf(CARRIAGE_RETURN) == -1,
+          "comment lines cannot contain newlines");
     }
 
     final String commentText = convertLinesToString(lines);
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java
@@ -19,6 +19,9 @@
 
 package com.puppycrawl.tools.checkstyle.checks.metrics;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.FileStatefulCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -29,7 +32,6 @@ import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.Deque;
 import java.util.HashMap;
 import java.util.List;
@@ -124,7 +126,7 @@ public abstract class AbstractClassCouplingCheck extends AbstractCheck {
           "Stream");
 
   /** Package names to ignore. */
-  private static final Set<String> DEFAULT_EXCLUDED_PACKAGES = Collections.emptySet();
+  private static final Set<String> DEFAULT_EXCLUDED_PACKAGES = ImmutableSet.of();
 
   /** Pattern to match brackets in a full type name. */
   private static final Pattern BRACKET_PATTERN = Pattern.compile("\\[[^]]*]");
@@ -210,10 +212,9 @@ public abstract class AbstractClassCouplingCheck extends AbstractCheck {
         Arrays.stream(excludedPackages)
             .filter(Predicate.not(CommonUtil::isName))
             .collect(Collectors.toUnmodifiableList());
-    if (!invalidIdentifiers.isEmpty()) {
-      throw new IllegalArgumentException(
-          "the following values are not valid identifiers: " + invalidIdentifiers);
-    }
+    checkArgument(
+        invalidIdentifiers.isEmpty(),
+        "the following values are not valid identifiers: " + invalidIdentifiers);
 
     this.excludedPackages = Set.of(excludedPackages);
   }
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LambdaParameterNameCheck.java
@@ -22,7 +22,6 @@ package com.puppycrawl.tools.checkstyle.checks.naming;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
-import java.util.Objects;
 
 /**
  * Checks lambda parameter names.
@@ -70,7 +69,7 @@ public class LambdaParameterNameCheck extends AbstractNameCheck {
   public void visitToken(DetailAST ast) {
     final boolean isInSwitchRule = ast.getParent().getType() == TokenTypes.SWITCH_RULE;
 
-    if (Objects.nonNull(ast.findFirstToken(TokenTypes.PARAMETERS))) {
+    if (ast.findFirstToken(TokenTypes.PARAMETERS) != null) {
       final DetailAST parametersNode = ast.findFirstToken(TokenTypes.PARAMETERS);
       TokenUtil.forEachChild(parametersNode, TokenTypes.PARAMETER_DEF, super::visitToken);
     } else if (!isInSwitchRule) {
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.checks.regexp;
 
+import static java.util.Objects.requireNonNullElse;
+
 import com.puppycrawl.tools.checkstyle.api.AbstractViolationReporter;
 import java.util.Optional;
 import java.util.regex.Pattern;
@@ -242,8 +244,8 @@ public final class DetectorOptions {
      * @return DetectorOptions instance.
      */
     public DetectorOptions build() {
-      message = Optional.ofNullable(message).orElse("");
-      suppressor = Optional.ofNullable(suppressor).orElse(NeverSuppress.INSTANCE);
+      message = requireNonNullElse(message, "");
+      suppressor = requireNonNullElse(suppressor, NeverSuppress.INSTANCE);
       pattern = Optional.ofNullable(format).map(this::createPattern).orElse(null);
       return DetectorOptions.this;
     }
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks.regexp;
 
+import com.google.common.base.Strings;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 import com.puppycrawl.tools.checkstyle.api.LineColumn;
 import java.util.regex.Matcher;
@@ -69,7 +70,7 @@ class MultilineDetector {
     resetState();
 
     final String format = options.getFormat();
-    if (format == null || format.isEmpty()) {
+    if (Strings.isNullOrEmpty(format)) {
       options.getReporter().log(1, MSG_EMPTY);
     } else {
       matcher = options.getPattern().matcher(fileText.getFullText());
--- a/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks.regexp;
 
+import com.google.common.base.Strings;
 import com.puppycrawl.tools.checkstyle.FileStatefulCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -336,7 +337,7 @@ public class RegexpCheck extends AbstractCheck {
   private String getMessage() {
     String msg;
 
-    if (message == null || message.isEmpty()) {
+    if (Strings.isNullOrEmpty(message)) {
       msg = format.pattern();
     } else {
       msg = message;
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithPlainTextCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithPlainTextCommentFilter.java
@@ -356,7 +356,7 @@ public class SuppressWithPlainTextCommentFilter extends AbstractAutomaticBean im
       }
       final Suppression suppression = (Suppression) other;
       return Objects.equals(lineNo, suppression.lineNo)
-          && Objects.equals(suppressionType, suppression.suppressionType)
+          && suppressionType == suppression.suppressionType
           && Objects.equals(eventSourceRegexp, suppression.eventSourceRegexp)
           && Objects.equals(eventMessageRegexp, suppression.eventMessageRegexp)
           && Objects.equals(eventIdRegexp, suppression.eventIdRegexp);
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java
@@ -483,7 +483,7 @@ public class SuppressionCommentFilter extends AbstractAutomaticBean implements T
       final Tag tag = (Tag) other;
       return Objects.equals(line, tag.line)
           && Objects.equals(column, tag.column)
-          && Objects.equals(tagType, tag.tagType)
+          && tagType == tag.tagType
           && Objects.equals(text, tag.text)
           && Objects.equals(tagCheckRegexp, tag.tagCheckRegexp)
           && Objects.equals(tagMessageRegexp, tag.tagMessageRegexp)
--- a/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionXpathFilter.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionXpathFilter.java
@@ -19,13 +19,13 @@
 
 package com.puppycrawl.tools.checkstyle.filters;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.AbstractAutomaticBean;
 import com.puppycrawl.tools.checkstyle.TreeWalkerAuditEvent;
 import com.puppycrawl.tools.checkstyle.TreeWalkerFilter;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.ExternalResourceHolder;
 import com.puppycrawl.tools.checkstyle.utils.FilterUtil;
-import java.util.Collections;
 import java.util.HashSet;
 import java.util.Objects;
 import java.util.Set;
@@ -186,7 +186,7 @@ public class SuppressionXpathFilter extends AbstractAutomaticBean
 
   @Override
   public Set<String> getExternalResourceLocations() {
-    return Collections.singleton(file);
+    return ImmutableSet.of(file);
   }
 
   @Override
--- a/src/main/java/com/puppycrawl/tools/checkstyle/meta/JavadocMetadataScraper.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/meta/JavadocMetadataScraper.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.meta;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.FileStatefulCheck;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
@@ -98,7 +99,7 @@ public class JavadocMetadataScraper extends AbstractJavadocCheck {
    * files.
    */
   private static final Set<String> PROPERTIES_TO_NOT_WRITE =
-      Set.of(
+      ImmutableSet.of(
           "null",
           "the charset property of the parent <a href=https://checkstyle.org/"
               + "config.html#Checker>Checker</a> module");
@@ -673,7 +674,7 @@ public class JavadocMetadataScraper extends AbstractJavadocCheck {
     return getFirstChildOfType(ast, JavadocTokenTypes.TEXT, 0)
         .map(DetailNode::getText)
         .map(pattern::matcher)
-        .map(Matcher::matches)
-        .orElse(Boolean.FALSE);
+        .filter(Matcher::matches)
+        .isPresent();
   }
 }
--- a/src/main/java/com/puppycrawl/tools/checkstyle/site/SiteUtil.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/site/SiteUtil.java
@@ -19,6 +19,9 @@
 
 package com.puppycrawl.tools.checkstyle.site;
 
+import com.google.common.base.Strings;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import com.puppycrawl.tools.checkstyle.Checker;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
@@ -156,7 +159,7 @@ public final class SiteUtil {
 
   /** Set of properties that are undocumented. Those are internal properties. */
   private static final Set<String> UNDOCUMENTED_PROPERTIES =
-      Set.of(
+      ImmutableSet.of(
           "SuppressWithNearbyCommentFilter.fileContents", "SuppressionCommentFilter.fileContents");
 
   /** Properties that can not be gathered from class instance. */
@@ -507,7 +510,7 @@ public final class SiteUtil {
     }
 
     // If parent class is not found, check interfaces
-    if (parentModuleName == null || parentModuleName.isEmpty()) {
+    if (Strings.isNullOrEmpty(parentModuleName)) {
       final Class<?>[] interfaces = moduleClass.getInterfaces();
       for (Class<?> interfaceClass : interfaces) {
         parentModuleName = CLASS_TO_PARENT_MODULE.get(interfaceClass);
@@ -517,7 +520,7 @@ public final class SiteUtil {
       }
     }
 
-    if (parentModuleName == null || parentModuleName.isEmpty()) {
+    if (Strings.isNullOrEmpty(parentModuleName)) {
       final String message =
           String.format(
               Locale.ROOT, "Failed to find parent module for %s", moduleClass.getSimpleName());
@@ -660,7 +663,7 @@ public final class SiteUtil {
     treeWalkerConfig.addChild(scraperCheckConfig);
     try {
       checker.configure(defaultConfiguration);
-      final List<File> filesToProcess = List.of(moduleFile);
+      final List<File> filesToProcess = ImmutableList.of(moduleFile);
       checker.process(filesToProcess);
       checker.destroy();
     } catch (CheckstyleException checkstyleException) {
--- a/src/main/java/com/puppycrawl/tools/checkstyle/site/XdocsTemplateParser.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/site/XdocsTemplateParser.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.site;
 
+import com.google.common.base.Strings;
 import java.io.File;
 import java.io.IOException;
 import java.io.Reader;
@@ -119,7 +120,7 @@ public class XdocsTemplateParser extends XdocParser {
   private void processMacroStart(XmlPullParser parser) throws MacroExecutionException {
     macroName = parser.getAttributeValue(null, Attribute.NAME.toString());
 
-    if (macroName == null || macroName.isEmpty()) {
+    if (Strings.isNullOrEmpty(macroName)) {
       final String message =
           String.format(
               Locale.ROOT,
@@ -138,7 +139,7 @@ public class XdocsTemplateParser extends XdocParser {
    * @throws MacroExecutionException if the parameter name or value is not specified.
    */
   private void processParamStart(XmlPullParser parser, Sink sink) throws MacroExecutionException {
-    if (macroName != null && !macroName.isEmpty()) {
+    if (!Strings.isNullOrEmpty(macroName)) {
       final String paramName = parser.getAttributeValue(null, Attribute.NAME.toString());
       final String paramValue = parser.getAttributeValue(null, Attribute.VALUE.toString());
 
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtil.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtil.java
@@ -19,6 +19,9 @@
 
 package com.puppycrawl.tools.checkstyle.utils;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -38,7 +41,7 @@ public final class AnnotationUtil {
   private static final String FQ_OVERRIDE = "java.lang." + OVERRIDE;
 
   /** Simple and fully-qualified {@link Override Override} annotation names. */
-  private static final Set<String> OVERRIDE_ANNOTATIONS = Set.of(OVERRIDE, FQ_OVERRIDE);
+  private static final Set<String> OVERRIDE_ANNOTATIONS = ImmutableSet.of(OVERRIDE, FQ_OVERRIDE);
 
   /**
    * Private utility constructor.
@@ -92,9 +95,7 @@ public final class AnnotationUtil {
    * @throws IllegalArgumentException when ast or annotations are null
    */
   public static boolean containsAnnotation(DetailAST ast, Set<String> annotations) {
-    if (annotations == null) {
-      throw new IllegalArgumentException("annotations cannot be null");
-    }
+    checkArgument(annotations != null, "annotations cannot be null");
     boolean result = false;
     if (!annotations.isEmpty()) {
       final DetailAST firstMatchingAnnotation =
@@ -150,9 +151,7 @@ public final class AnnotationUtil {
    * @throws IllegalArgumentException when ast is null
    */
   public static DetailAST getAnnotationHolder(DetailAST ast) {
-    if (ast == null) {
-      throw new IllegalArgumentException(THE_AST_IS_NULL);
-    }
+    checkArgument(ast != null, THE_AST_IS_NULL);
 
     final DetailAST annotationHolder;
 
@@ -182,17 +181,11 @@ public final class AnnotationUtil {
    * @throws IllegalArgumentException when ast or annotations are null; when annotation is blank
    */
   public static DetailAST getAnnotation(final DetailAST ast, String annotation) {
-    if (ast == null) {
-      throw new IllegalArgumentException(THE_AST_IS_NULL);
-    }
+    checkArgument(ast != null, THE_AST_IS_NULL);
 
-    if (annotation == null) {
-      throw new IllegalArgumentException("the annotation is null");
-    }
+    checkArgument(annotation != null, "the annotation is null");
 
-    if (CommonUtil.isBlank(annotation)) {
-      throw new IllegalArgumentException("the annotation is empty or spaces");
-    }
+    checkArgument(!CommonUtil.isBlank(annotation), "the annotation is empty or spaces");
 
     return findFirstAnnotation(
         ast,
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtil.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.utils;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.FullIdent;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -315,9 +317,7 @@ public final class CheckUtil {
    */
   private static AccessModifierOption getAccessModifierFromModifiersTokenDirectly(
       DetailAST modifiersToken) {
-    if (modifiersToken == null) {
-      throw new IllegalArgumentException("expected non-null AST-token with type 'MODIFIERS'");
-    }
+    checkArgument(modifiersToken != null, "expected non-null AST-token with type 'MODIFIERS'");
 
     AccessModifierOption accessModifier = AccessModifierOption.PACKAGE;
     for (DetailAST token = modifiersToken.getFirstChild();
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtil.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtil.java
@@ -32,7 +32,6 @@ import java.net.URL;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.BitSet;
-import java.util.Objects;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
@@ -506,7 +505,7 @@ public final class CommonUtil {
    * @return true if the arg is blank.
    */
   public static boolean isBlank(String value) {
-    return Objects.isNull(value) || indexOfNonWhitespace(value) >= value.length();
+    return value == null || indexOfNonWhitespace(value) >= value.length();
   }
 
   /**
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtil.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtil.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.utils;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.DetailNode;
 import com.puppycrawl.tools.checkstyle.api.JavadocTokenTypes;
@@ -262,9 +264,7 @@ public final class JavadocUtil {
    */
   public static String getTokenName(int id) {
     final String name = TOKEN_VALUE_TO_NAME.get(id);
-    if (name == null) {
-      throw new IllegalArgumentException(UNKNOWN_JAVADOC_TOKEN_ID_EXCEPTION_MESSAGE + id);
-    }
+    checkArgument(name != null, UNKNOWN_JAVADOC_TOKEN_ID_EXCEPTION_MESSAGE + id);
     return name;
   }
 
@@ -277,9 +277,7 @@ public final class JavadocUtil {
    */
   public static int getTokenId(String name) {
     final Integer id = TOKEN_NAME_TO_VALUE.get(name);
-    if (id == null) {
-      throw new IllegalArgumentException("Unknown javadoc token name. Given name " + name);
-    }
+    checkArgument(id != null, "Unknown javadoc token name. Given name " + name);
     return id;
   }
 
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtil.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.utils;
 
+import static java.util.Objects.requireNonNullElseGet;
+
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.Scope;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
@@ -78,8 +80,7 @@ public final class ScopeUtil {
    * @see #getDefaultScope(DetailAST)
    */
   public static Scope getScopeFromMods(DetailAST aMods) {
-    return Optional.ofNullable(getDeclaredScopeFromMods(aMods))
-        .orElseGet(() -> getDefaultScope(aMods));
+    return requireNonNullElseGet(getDeclaredScopeFromMods(aMods), () -> getDefaultScope(aMods));
   }
 
   /**
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtil.java
@@ -19,6 +19,8 @@
 
 package com.puppycrawl.tools.checkstyle.utils;
 
+import static com.google.common.base.Preconditions.checkArgument;
+
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
 import com.puppycrawl.tools.checkstyle.api.TokenTypes;
 import java.lang.reflect.Field;
@@ -134,9 +136,7 @@ public final class TokenUtil {
    */
   public static String getTokenName(int id) {
     final String name = TOKEN_VALUE_TO_NAME.get(id);
-    if (name == null) {
-      throw new IllegalArgumentException(String.format(Locale.ROOT, TOKEN_ID_EXCEPTION_FORMAT, id));
-    }
+    checkArgument(name != null, String.format(Locale.ROOT, TOKEN_ID_EXCEPTION_FORMAT, id));
     return name;
   }
 
@@ -149,10 +149,7 @@ public final class TokenUtil {
    */
   public static int getTokenId(String name) {
     final Integer id = TOKEN_NAME_TO_VALUE.get(name);
-    if (id == null) {
-      throw new IllegalArgumentException(
-          String.format(Locale.ROOT, TOKEN_NAME_EXCEPTION_FORMAT, name));
-    }
+    checkArgument(id != null, String.format(Locale.ROOT, TOKEN_NAME_EXCEPTION_FORMAT, name));
     return id;
   }
 
@@ -164,10 +161,9 @@ public final class TokenUtil {
    * @throws IllegalArgumentException when name is unknown
    */
   public static String getShortDescription(String name) {
-    if (!TOKEN_NAME_TO_VALUE.containsKey(name)) {
-      throw new IllegalArgumentException(
-          String.format(Locale.ROOT, TOKEN_NAME_EXCEPTION_FORMAT, name));
-    }
+    checkArgument(
+        TOKEN_NAME_TO_VALUE.containsKey(name),
+        String.format(Locale.ROOT, TOKEN_NAME_EXCEPTION_FORMAT, name));
 
     final String tokenTypes = "com.puppycrawl.tools.checkstyle.api.tokentypes";
     final ResourceBundle bundle = ResourceBundle.getBundle(tokenTypes, Locale.ROOT);
--- a/src/main/java/com/puppycrawl/tools/checkstyle/utils/UnmodifiableCollectionUtil.java
+++ b/src/main/java/com/puppycrawl/tools/checkstyle/utils/UnmodifiableCollectionUtil.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.utils;
 
+import com.google.common.collect.ImmutableSet;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
@@ -92,6 +93,6 @@ public final class UnmodifiableCollectionUtil {
    * @return immutable set
    */
   public static <T> Set<T> singleton(T obj) {
-    return Collections.singleton(obj);
+    return ImmutableSet.of(obj);
   }
 }
--- a/src/test/java/com/puppycrawl/tools/checkstyle/AbstractModuleTestSupport.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/AbstractModuleTestSupport.java
@@ -21,6 +21,7 @@ package com.puppycrawl.tools.checkstyle;
 
 import static com.google.common.truth.Truth.assertWithMessage;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import com.puppycrawl.tools.checkstyle.LocalizedMessage.Utf8Control;
@@ -485,7 +486,7 @@ public abstract class AbstractModuleTestSupport extends AbstractPathTestSupport
       throws Exception {
     stream.flush();
     stream.reset();
-    final List<File> files = Collections.singletonList(new File(file));
+    final List<File> files = ImmutableList.of(new File(file));
     final Checker checker = createChecker(config);
     final Map<String, List<String>> actualViolations = getActualViolations(checker.process(files));
     checker.destroy();
--- a/src/test/java/com/puppycrawl/tools/checkstyle/AbstractPathTestSupport.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/AbstractPathTestSupport.java
@@ -23,9 +23,9 @@ import java.io.File;
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Paths;
+import java.util.Arrays;
 import java.util.Locale;
 import java.util.stream.Collectors;
-import java.util.stream.Stream;
 import org.junit.jupiter.api.BeforeEach;
 
 public abstract class AbstractPathTestSupport {
@@ -103,7 +103,7 @@ public abstract class AbstractPathTestSupport {
    * @return joined strings
    */
   public static String addEndOfLine(String... strings) {
-    return Stream.of(strings).collect(Collectors.joining(EOL, "", EOL));
+    return Arrays.stream(strings).collect(Collectors.joining(EOL, "", EOL));
   }
 
   /**
--- a/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java
@@ -26,6 +26,7 @@ import static com.puppycrawl.tools.checkstyle.DefaultLogger.AUDIT_STARTED_MESSAG
 import static com.puppycrawl.tools.checkstyle.checks.NewlineAtEndOfFileCheck.MSG_KEY_NO_NEWLINE_EOF;
 import static com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck.MSG_KEY;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.AbstractAutomaticBean.OutputStreamOptions;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;
@@ -132,7 +133,7 @@ public class CheckerTest extends AbstractModuleTestSupport {
     checker.destroy();
 
     final File tempFile = File.createTempFile("junit", null, temporaryFolder);
-    checker.process(Collections.singletonList(tempFile));
+    checker.process(ImmutableList.of(tempFile));
     final SortedSet<Violation> violations = new TreeSet<>();
     violations.add(
         new Violation(
@@ -274,7 +275,7 @@ public class CheckerTest extends AbstractModuleTestSupport {
     checker.addBeforeExecutionFileFilter(filter);
 
     filter.resetFilter();
-    checker.process(Collections.singletonList(new File("dummy.java")));
+    checker.process(ImmutableList.of(new File("dummy.java")));
     assertWithMessage("Checker.acceptFileStarted() doesn't call filter")
         .that(filter.wasCalled())
         .isTrue();
@@ -290,7 +291,7 @@ public class CheckerTest extends AbstractModuleTestSupport {
     checker.removeBeforeExecutionFileFilter(filter);
 
     f2.resetFilter();
-    checker.process(Collections.singletonList(new File("dummy.java")));
+    checker.process(ImmutableList.of(new File("dummy.java")));
     assertWithMessage("Checker.acceptFileStarted() doesn't call filter")
         .that(f2.wasCalled())
         .isTrue();
@@ -711,7 +712,7 @@ public class CheckerTest extends AbstractModuleTestSupport {
     checker.configure(checkerConfig);
     checker.addListener(getBriefUtLogger());
 
-    checker.process(Collections.singletonList(new File("dummy.java")));
+    checker.process(ImmutableList.of(new File("dummy.java")));
     checker.clearCache();
     // invoke destroy to persist cache
     final PropertyCacheFile cache = TestUtil.getInternalState(checker, "cacheFile");
@@ -1074,7 +1075,7 @@ public class CheckerTest extends AbstractModuleTestSupport {
 
     final String filePath = getPath("InputChecker.java");
     try {
-      checker.process(Collections.singletonList(new File(filePath)));
+      checker.process(ImmutableList.of(new File(filePath)));
       assertWithMessage("Exception is expected").fail();
     } catch (CheckstyleException ex) {
       assertWithMessage("Error message is not expected")
@@ -1400,7 +1401,7 @@ public class CheckerTest extends AbstractModuleTestSupport {
     final DummyFileSet fileSet = new DummyFileSet();
     final Checker checker = new Checker();
     checker.addFileSetCheck(fileSet);
-    checker.process(Collections.singletonList(new File("dummy.java")));
+    checker.process(ImmutableList.of(new File("dummy.java")));
     final List<String> expected = Arrays.asList("beginProcessing", "finishProcessing", "destroy");
     assertWithMessage("Method calls were not expected")
         .that(fileSet.getMethodCalls())
@@ -1435,7 +1436,7 @@ public class CheckerTest extends AbstractModuleTestSupport {
     checker.setModuleFactory(factory);
     checker.setupChild(createModuleConfig(DebugAuditAdapter.class));
     // Let's try fire some events
-    checker.process(Collections.singletonList(new File("dummy.java")));
+    checker.process(ImmutableList.of(new File("dummy.java")));
     assertWithMessage("Checker.fireAuditStarted() doesn't call listener")
         .that(auditAdapter.wasCalled())
         .isTrue();
@@ -1458,7 +1459,7 @@ public class CheckerTest extends AbstractModuleTestSupport {
         };
     checker.setModuleFactory(factory);
     checker.setupChild(createModuleConfig(TestBeforeExecutionFileFilter.class));
-    checker.process(Collections.singletonList(new File("dummy.java")));
+    checker.process(ImmutableList.of(new File("dummy.java")));
     assertWithMessage("Checker.acceptFileStarted() doesn't call listener")
         .that(fileFilter.wasCalled())
         .isTrue();
@@ -1575,7 +1576,7 @@ public class CheckerTest extends AbstractModuleTestSupport {
 
     // super.verify does not work here, for we change the logger
     out.flush();
-    final int errs = checker.process(Collections.singletonList(new File(path)));
+    final int errs = checker.process(ImmutableList.of(new File(path)));
     try (ByteArrayInputStream inputStream = new ByteArrayInputStream(out.toByteArray());
         LineNumberReader lnr =
             new LineNumberReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {
@@ -1616,7 +1617,7 @@ public class CheckerTest extends AbstractModuleTestSupport {
     checker.setCacheFile(cacheFile.getAbsolutePath());
 
     final File testFile = File.createTempFile("testFile", ".java", temporaryFolder);
-    final List<File> files = List.of(testFile, testFile);
+    final List<File> files = ImmutableList.of(testFile, testFile);
     checker.process(files);
 
     assertWithMessage("Cached file should not be processed twice")
--- a/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java
@@ -24,6 +24,7 @@ import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.mockito.Mockito.mockConstruction;
 import static org.mockito.Mockito.when;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.ConfigurationLoader.IgnoredModulesOptions;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
@@ -34,7 +35,6 @@ import java.lang.reflect.Method;
 import java.nio.file.Files;
 import java.nio.file.Paths;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 import java.util.Properties;
 import org.junit.jupiter.api.Test;
@@ -293,8 +293,7 @@ public class ConfigurationLoaderTest extends AbstractPathTestSupport {
     final List<String> messages = new ArrayList<>(grandchildren[0].getMessages().values());
     final String expectedKey = "name.invalidPattern";
     final List<String> expectedMessages =
-        Collections.singletonList(
-            "Member ''{0}'' must start with ''m'' (checked pattern ''{1}'').");
+        ImmutableList.of("Member ''{0}'' must start with ''m'' (checked pattern ''{1}'').");
     assertWithMessage("Messages should contain key: " + expectedKey)
         .that(grandchildren[0].getMessages())
         .containsKey(expectedKey);
--- a/src/test/java/com/puppycrawl/tools/checkstyle/JavaParserTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/JavaParserTest.java
@@ -68,7 +68,7 @@ public class JavaParserTest extends AbstractModuleTestSupport {
 
     assertWithMessage("Block comment should be present").that(blockComment.isPresent()).isTrue();
 
-    final DetailAST comment = blockComment.get();
+    final DetailAST comment = blockComment.orElseThrow();
 
     assertWithMessage("Unexpected line number").that(comment.getLineNo()).isEqualTo(3);
     assertWithMessage("Unexpected column number").that(comment.getColumnNo()).isEqualTo(0);
@@ -97,7 +97,7 @@ public class JavaParserTest extends AbstractModuleTestSupport {
         .that(singleLineComment.isPresent())
         .isTrue();
 
-    final DetailAST comment = singleLineComment.get();
+    final DetailAST comment = singleLineComment.orElseThrow();
 
     assertWithMessage("Unexpected line number").that(comment.getLineNo()).isEqualTo(13);
     assertWithMessage("Unexpected column number").that(comment.getColumnNo()).isEqualTo(0);
@@ -129,7 +129,7 @@ public class JavaParserTest extends AbstractModuleTestSupport {
         .that(singleLineComment.isPresent())
         .isTrue();
 
-    final DetailAST comment = singleLineComment.get();
+    final DetailAST comment = singleLineComment.orElseThrow();
 
     assertWithMessage("Unexpected line number").that(comment.getLineNo()).isEqualTo(1);
     assertWithMessage("Unexpected column number").that(comment.getColumnNo()).isEqualTo(4);
@@ -218,7 +218,7 @@ public class JavaParserTest extends AbstractModuleTestSupport {
         .that(textBlockContent.isPresent())
         .isTrue();
 
-    final DetailAST content = textBlockContent.get();
+    final DetailAST content = textBlockContent.orElseThrow();
     final String expectedContents = "\n                 string";
 
     assertWithMessage("Unexpected line number").that(content.getLineNo()).isEqualTo(5);
--- a/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java
@@ -20,8 +20,9 @@
 package com.puppycrawl.tools.checkstyle;
 
 import static com.google.common.truth.Truth.assertWithMessage;
-import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import java.io.File;
 import java.io.IOException;
@@ -71,8 +72,7 @@ public class PackageNamesLoaderTest extends AbstractPathTestSupport {
   public void testPackagesFile() throws Exception {
     final Enumeration<URL> enumeration =
         Collections.enumeration(
-            Collections.singleton(
-                new File(getPath("InputPackageNamesLoaderFile.xml")).toURI().toURL()));
+            ImmutableSet.of(new File(getPath("InputPackageNamesLoaderFile.xml")).toURI().toURL()));
 
     final Set<String> actualPackageNames =
         PackageNamesLoader.getPackageNames(new TestUrlsClassLoader(enumeration));
@@ -110,7 +110,7 @@ public class PackageNamesLoaderTest extends AbstractPathTestSupport {
   public void testPackagesWithDots() throws Exception {
     final Enumeration<URL> enumeration =
         Collections.enumeration(
-            Collections.singleton(
+            ImmutableSet.of(
                 new File(getPath("InputPackageNamesLoaderWithDots.xml")).toURI().toURL()));
 
     final Set<String> actualPackageNames =
@@ -132,7 +132,7 @@ public class PackageNamesLoaderTest extends AbstractPathTestSupport {
   public void testPackagesWithDotsEx() throws Exception {
     final Enumeration<URL> enumeration =
         Collections.enumeration(
-            Collections.singleton(
+            ImmutableSet.of(
                 new File(getPath("InputPackageNamesLoaderWithDotsEx.xml")).toURI().toURL()));
 
     final Set<String> actualPackageNames =
@@ -154,7 +154,7 @@ public class PackageNamesLoaderTest extends AbstractPathTestSupport {
   public void testPackagesWithSaxException() throws Exception {
     final Enumeration<URL> enumeration =
         Collections.enumeration(
-            Collections.singleton(
+            ImmutableSet.of(
                 new File(getPath("InputPackageNamesLoaderNotXml.java")).toURI().toURL()));
 
     try {
@@ -195,7 +195,7 @@ public class PackageNamesLoaderTest extends AbstractPathTestSupport {
               }
             });
 
-    final Enumeration<URL> enumeration = Collections.enumeration(Collections.singleton(url));
+    final Enumeration<URL> enumeration = Collections.enumeration(ImmutableSet.of(url));
 
     try {
       PackageNamesLoader.getPackageNames(new TestUrlsClassLoader(enumeration));
@@ -233,17 +233,16 @@ public class PackageNamesLoaderTest extends AbstractPathTestSupport {
     final Set<String> actualPackageNames =
         PackageNamesLoader.getPackageNames(new TestUrlsClassLoader(Collections.emptyEnumeration()));
 
-    assertThrows(
-        UnsupportedOperationException.class,
-        () -> actualPackageNames.add("com.puppycrawl.tools.checkstyle.checks.modifier"));
+    assertThatThrownBy(
+            () -> actualPackageNames.add("com.puppycrawl.tools.checkstyle.checks.modifier"))
+        .isInstanceOf(UnsupportedOperationException.class);
   }
 
   @Test
   public void testMapping() throws Exception {
     final Enumeration<URL> enumeration =
         Collections.enumeration(
-            Collections.singleton(
-                new File(getPath("InputPackageNamesLoader1.xml")).toURI().toURL()));
+            ImmutableSet.of(new File(getPath("InputPackageNamesLoader1.xml")).toURI().toURL()));
 
     final Set<String> actualPackageNames =
         PackageNamesLoader.getPackageNames(new TestUrlsClassLoader(enumeration));
@@ -255,8 +254,7 @@ public class PackageNamesLoaderTest extends AbstractPathTestSupport {
   public void testMapping2() throws Exception {
     final Enumeration<URL> enumeration =
         Collections.enumeration(
-            Collections.singleton(
-                new File(getPath("InputPackageNamesLoader2.xml")).toURI().toURL()));
+            ImmutableSet.of(new File(getPath("InputPackageNamesLoader2.xml")).toURI().toURL()));
 
     final Set<String> actualPackageNames =
         PackageNamesLoader.getPackageNames(new TestUrlsClassLoader(enumeration));
--- a/src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java
@@ -33,6 +33,8 @@ import static com.puppycrawl.tools.checkstyle.PackageObjectFactory.UNABLE_TO_INS
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.mockito.Mockito.mockStatic;
 
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.FileText;
@@ -414,7 +416,7 @@ public class PackageObjectFactoryTest {
     final String checkName = "checks.annotation.AnnotationLocation";
     final PackageObjectFactory packageObjectFactory =
         new PackageObjectFactory(
-            new HashSet<>(Collections.singletonList(BASE_PACKAGE)),
+            new HashSet<>(ImmutableList.of(BASE_PACKAGE)),
             Thread.currentThread().getContextClassLoader(),
             TRY_IN_ALL_REGISTERED_PACKAGES);
     final AnnotationLocationCheck check =
@@ -430,7 +432,7 @@ public class PackageObjectFactoryTest {
     final Method method =
         clazz.getDeclaredMethod("joinPackageNamesWithClassName", String.class, Set.class);
     method.setAccessible(true);
-    final Set<String> packages = Collections.singleton("test");
+    final Set<String> packages = ImmutableSet.of("test");
     final String className = "SomeClass";
     final String actual =
         String.valueOf(method.invoke(PackageObjectFactory.class, className, packages));
@@ -520,7 +522,7 @@ public class PackageObjectFactoryTest {
     final String name = "String";
     final String packageName = "java.lang";
     final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
-    final Set<String> packages = Collections.singleton(packageName);
+    final Set<String> packages = ImmutableSet.of(packageName);
     final PackageObjectFactory objectFactory =
         new PackageObjectFactory(packages, classLoader, TRY_IN_ALL_REGISTERED_PACKAGES);
 
@@ -546,7 +548,7 @@ public class PackageObjectFactoryTest {
   @Test
   public void testCreateObjectWithNameContainingPackageSeparator() throws Exception {
     final ClassLoader classLoader = ClassLoader.getSystemClassLoader();
-    final Set<String> packages = Collections.singleton(BASE_PACKAGE);
+    final Set<String> packages = ImmutableSet.of(BASE_PACKAGE);
     final PackageObjectFactory objectFactory =
         new PackageObjectFactory(packages, classLoader, TRY_IN_ALL_REGISTERED_PACKAGES);
 
@@ -564,7 +566,7 @@ public class PackageObjectFactoryTest {
   @Test
   public void testCreateObjectWithNameContainingPackageSeparatorWithoutSearch() throws Exception {
     final ClassLoader classLoader = ClassLoader.getSystemClassLoader();
-    final Set<String> packages = Collections.singleton(BASE_PACKAGE);
+    final Set<String> packages = ImmutableSet.of(BASE_PACKAGE);
     final PackageObjectFactory objectFactory =
         new PackageObjectFactory(packages, classLoader, TRY_IN_ALL_REGISTERED_PACKAGES);
 
@@ -590,7 +592,7 @@ public class PackageObjectFactoryTest {
   @Test
   public void testCreateModuleWithTryInAllRegisteredPackages() {
     final ClassLoader classLoader = ClassLoader.getSystemClassLoader();
-    final Set<String> packages = Collections.singleton(BASE_PACKAGE);
+    final Set<String> packages = ImmutableSet.of(BASE_PACKAGE);
     final PackageObjectFactory objectFactory =
         new PackageObjectFactory(packages, classLoader, SEARCH_REGISTERED_PACKAGES);
     final CheckstyleException ex =
--- a/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java
@@ -25,7 +25,6 @@ import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mockStatic;
 
 import com.google.common.io.BaseEncoding;
-import com.google.common.io.ByteStreams;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
 import com.puppycrawl.tools.checkstyle.internal.utils.TestUtil;
@@ -223,7 +222,7 @@ public class PropertyCacheFileTest extends AbstractPathTestSupport {
 
     final MessageDigest digest = MessageDigest.getInstance("SHA-1");
     final URI uri = CommonUtil.getUriByFilename(pathToResource);
-    final byte[] input = ByteStreams.toByteArray(new BufferedInputStream(uri.toURL().openStream()));
+    final byte[] input = new BufferedInputStream(uri.toURL().openStream()).readAllBytes();
     final ByteArrayOutputStream out = new ByteArrayOutputStream();
     try (ObjectOutputStream oos = new ObjectOutputStream(out)) {
       oos.writeObject(input);
--- a/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java
@@ -26,6 +26,7 @@ import static org.mockito.Mockito.CALLS_REAL_METHODS;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.Configuration;
@@ -58,7 +59,6 @@ import java.nio.file.StandardCopyOption;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
@@ -637,7 +637,7 @@ public class TreeWalkerTest extends AbstractModuleTestSupport {
     treeWalkerConfig.addChild(configuration2);
     treeWalkerConfig.addChild(configuration1);
 
-    final List<File> files = Collections.singletonList(new File(getPath("InputTreeWalker2.java")));
+    final List<File> files = ImmutableList.of(new File(getPath("InputTreeWalker2.java")));
     final Checker checker = createChecker(treeWalkerConfig);
 
     try {
--- a/src/test/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTaskTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTaskTest.java
@@ -835,7 +835,7 @@ public class CheckstyleAntTaskTest extends AbstractPathTestSupport {
         .that(optionalMessageLevelPair.isPresent())
         .isTrue();
 
-    final long actualTime = getNumberFromLine(optionalMessageLevelPair.get().getMsg());
+    final long actualTime = getNumberFromLine(optionalMessageLevelPair.orElseThrow().getMsg());
 
     assertWithMessage(
             "Logged time in '" + expectedMsg + "' " + "must be less than the testing time")
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractCheckTest.java
@@ -20,8 +20,9 @@
 package com.puppycrawl.tools.checkstyle.api;
 
 import static com.google.common.truth.Truth.assertWithMessage;
-import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.DetailAstImpl;
@@ -29,7 +30,6 @@ import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
 import java.io.File;
 import java.nio.charset.Charset;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
@@ -316,7 +316,7 @@ public class AbstractCheckTest extends AbstractModuleTestSupport {
     final ViolationCheck check = new ViolationCheck();
     check.configure(new DefaultConfiguration("check"));
     final File file = new File("fileName");
-    final FileText theText = new FileText(file, Collections.singletonList("test123"));
+    final FileText theText = new FileText(file, ImmutableList.of("test123"));
 
     check.setFileContents(new FileContents(theText));
     check.clearViolations();
@@ -342,7 +342,7 @@ public class AbstractCheckTest extends AbstractModuleTestSupport {
     final ViolationAstCheck check = new ViolationAstCheck();
     check.configure(new DefaultConfiguration("check"));
     final File file = new File("fileName");
-    final FileText theText = new FileText(file, Collections.singletonList("test123"));
+    final FileText theText = new FileText(file, ImmutableList.of("test123"));
 
     check.setFileContents(new FileContents(theText));
     check.clearViolations();
@@ -378,7 +378,8 @@ public class AbstractCheckTest extends AbstractModuleTestSupport {
   public void testTokensAreUnmodifiable() {
     final DummyAbstractCheck check = new DummyAbstractCheck();
     final Set<String> tokenNameSet = check.getTokenNames();
-    assertThrows(UnsupportedOperationException.class, () -> tokenNameSet.add(""));
+    assertThatThrownBy(() -> tokenNameSet.add(""))
+        .isInstanceOf(UnsupportedOperationException.class);
   }
 
   public static final class DummyAbstractCheck extends AbstractCheck {
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheckTest.java
@@ -21,13 +21,13 @@ package com.puppycrawl.tools.checkstyle.api;
 
 import static com.google.common.truth.Truth.assertWithMessage;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.Checker;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import java.io.File;
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import java.util.SortedSet;
 import java.util.TreeSet;
@@ -51,7 +51,7 @@ public class AbstractFileSetCheckTest extends AbstractModuleTestSupport {
   public void testFileContents() {
     final FileContents contents =
         new FileContents(
-            new FileText(new File("inputAbstractFileSetCheck.tmp"), Collections.emptyList()));
+            new FileText(new File("inputAbstractFileSetCheck.tmp"), ImmutableList.of()));
     final DummyFileSetCheck check = new DummyFileSetCheck();
     check.setFileContents(contents);
     assertWithMessage("expected file contents")
@@ -66,7 +66,7 @@ public class AbstractFileSetCheckTest extends AbstractModuleTestSupport {
     check.setFileExtensions("tmp");
     final File firstFile = new File("inputAbstractFileSetCheck.tmp");
     final SortedSet<Violation> firstFileMessages =
-        check.process(firstFile, new FileText(firstFile, Collections.emptyList()));
+        check.process(firstFile, new FileText(firstFile, ImmutableList.of()));
 
     assertWithMessage("Invalid message")
         .that(firstFileMessages.first().getViolation())
@@ -91,7 +91,7 @@ public class AbstractFileSetCheckTest extends AbstractModuleTestSupport {
     check.setFileExtensions("java");
     final File firstFile = new File("inputAbstractFileSetCheck.tmp");
 
-    check.process(firstFile, new FileText(firstFile, Collections.emptyList()));
+    check.process(firstFile, new FileText(firstFile, ImmutableList.of()));
 
     final SortedSet<Violation> internalMessages = check.getViolations();
     assertWithMessage("Internal message should be empty").that(internalMessages).isEmpty();
@@ -104,7 +104,7 @@ public class AbstractFileSetCheckTest extends AbstractModuleTestSupport {
     check.setFileExtensions("tmp");
     final File firstFile = new File("inputAbstractFileSetCheck.tmp");
 
-    final FileText fileText = new FileText(firstFile, Collections.emptyList());
+    final FileText fileText = new FileText(firstFile, ImmutableList.of());
     try {
       check.process(firstFile, fileText);
       assertWithMessage("Exception is expected").fail();
@@ -118,7 +118,7 @@ public class AbstractFileSetCheckTest extends AbstractModuleTestSupport {
 
     // again to prove only 1 violation exists
     final File secondFile = new File("inputAbstractFileSetCheck.tmp");
-    final FileText fileText2 = new FileText(secondFile, Collections.emptyList());
+    final FileText fileText2 = new FileText(secondFile, ImmutableList.of());
     try {
       check.process(secondFile, fileText2);
       assertWithMessage("Exception is expected").fail();
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/BeforeExecutionFileFilterSetTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/BeforeExecutionFileFilterSetTest.java
@@ -20,7 +20,7 @@
 package com.puppycrawl.tools.checkstyle.api;
 
 import static com.google.common.truth.Truth.assertWithMessage;
-import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 import com.puppycrawl.tools.checkstyle.filefilters.BeforeExecutionExclusionFileFilter;
 import java.util.Set;
@@ -107,7 +107,8 @@ public class BeforeExecutionFileFilterSetTest {
     final BeforeExecutionFileFilter filter = new BeforeExecutionExclusionFileFilter();
     filterSet.addBeforeExecutionFileFilter(filter);
     final Set<BeforeExecutionFileFilter> excFilterSet = filterSet.getBeforeExecutionFileFilters();
-    assertThrows(UnsupportedOperationException.class, () -> excFilterSet.add(filter));
+    assertThatThrownBy(() -> excFilterSet.add(filter))
+        .isInstanceOf(UnsupportedOperationException.class);
   }
 
   /*
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/FileContentsTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/FileContentsTest.java
@@ -20,12 +20,12 @@
 package com.puppycrawl.tools.checkstyle.api;
 
 import static com.google.common.truth.Truth.assertWithMessage;
-import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.internal.utils.TestUtil;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -51,12 +51,12 @@ public class FileContentsTest {
   public void testIsLineBlank() {
     assertWithMessage("Invalid result")
         .that(
-            new FileContents(new FileText(new File("filename"), Collections.singletonList("123")))
+            new FileContents(new FileText(new File("filename"), ImmutableList.of("123")))
                 .lineIsBlank(0))
         .isFalse();
     assertWithMessage("Invalid result")
         .that(
-            new FileContents(new FileText(new File("filename"), Collections.singletonList("")))
+            new FileContents(new FileText(new File("filename"), ImmutableList.of("")))
                 .lineIsBlank(0))
         .isTrue();
   }
@@ -65,13 +65,12 @@ public class FileContentsTest {
   public void testLineIsComment() {
     assertWithMessage("Invalid result")
         .that(
-            new FileContents(new FileText(new File("filename"), Collections.singletonList("123")))
+            new FileContents(new FileText(new File("filename"), ImmutableList.of("123")))
                 .lineIsComment(0))
         .isFalse();
     assertWithMessage("Invalid result")
         .that(
-            new FileContents(
-                    new FileText(new File("filename"), Collections.singletonList(" // abc")))
+            new FileContents(new FileText(new File("filename"), ImmutableList.of(" // abc")))
                 .lineIsComment(0))
         .isTrue();
   }
@@ -96,7 +95,7 @@ public class FileContentsTest {
   public void testSinglelineCommentNotIntersect() {
     // just to make UT coverage 100%
     final FileContents fileContents =
-        new FileContents(new FileText(new File("filename"), Collections.singletonList("  //  ")));
+        new FileContents(new FileText(new File("filename"), ImmutableList.of("  //  ")));
     fileContents.reportSingleLineComment(1, 2);
     assertWithMessage("Should return false when there is no intersection")
         .that(fileContents.hasIntersectionWithComment(1, 0, 1, 1))
@@ -107,7 +106,7 @@ public class FileContentsTest {
   public void testSinglelineCommentIntersect() {
     // just to make UT coverage 100%
     final FileContents fileContents =
-        new FileContents(new FileText(new File("filename"), Collections.singletonList("  //   ")));
+        new FileContents(new FileText(new File("filename"), ImmutableList.of("  //   ")));
     fileContents.reportSingleLineComment("type", 1, 2);
     assertWithMessage("Should return true when comments intersect")
         .that(fileContents.hasIntersectionWithComment(1, 5, 1, 6))
@@ -117,7 +116,7 @@ public class FileContentsTest {
   @Test
   public void testReportCppComment() {
     final FileContents fileContents =
-        new FileContents(new FileText(new File("filename"), Collections.singletonList("   //  ")));
+        new FileContents(new FileText(new File("filename"), ImmutableList.of("   //  ")));
     fileContents.reportSingleLineComment(1, 2);
     final Map<Integer, TextBlock> cppComments = fileContents.getSingleLineComments();
 
@@ -143,7 +142,7 @@ public class FileContentsTest {
   @Test
   public void testReportComment() {
     final FileContents fileContents =
-        new FileContents(new FileText(new File("filename"), Collections.singletonList("  //   ")));
+        new FileContents(new FileText(new File("filename"), ImmutableList.of("  //   ")));
     fileContents.reportBlockComment("type", 1, 2, 1, 2);
     final Map<Integer, List<TextBlock>> comments = fileContents.getBlockComments();
 
@@ -155,8 +154,7 @@ public class FileContentsTest {
   @Test
   public void testReportBlockCommentSameLine() {
     final FileContents fileContents =
-        new FileContents(
-            new FileText(new File("filename"), Collections.singletonList("/* a */ /* b */ ")));
+        new FileContents(new FileText(new File("filename"), ImmutableList.of("/* a */ /* b */ ")));
     fileContents.reportBlockComment("type", 1, 0, 1, 6);
     fileContents.reportBlockComment("type", 1, 8, 1, 14);
     final Map<Integer, List<TextBlock>> comments = fileContents.getBlockComments();
@@ -180,8 +178,7 @@ public class FileContentsTest {
     assertWithMessage("Invalid comment")
         .that(comments.get(1).toString())
         .isEqualTo(
-            Collections.singletonList(new Comment(new String[] {"/*", "c", "*/"}, 0, 3, 1))
-                .toString());
+            ImmutableList.of(new Comment(new String[] {"/*", "c", "*/"}, 0, 3, 1)).toString());
   }
 
   @Test
@@ -232,8 +229,7 @@ public class FileContentsTest {
   @Test
   public void testReportJavadocComment() {
     final FileContents fileContents =
-        new FileContents(
-            new FileText(new File("filename"), Collections.singletonList("  /** */   ")));
+        new FileContents(new FileText(new File("filename"), ImmutableList.of("  /** */   ")));
     fileContents.reportBlockComment(1, 2, 1, 6);
     final TextBlock comment = fileContents.getJavadocBefore(2);
 
@@ -245,8 +241,7 @@ public class FileContentsTest {
   @Test
   public void testReportJavadocComment2() {
     final FileContents fileContents =
-        new FileContents(
-            new FileText(new File("filename"), Collections.singletonList("  /** */   ")));
+        new FileContents(new FileText(new File("filename"), ImmutableList.of("  /** */   ")));
     fileContents.reportBlockComment(1, 2, 1, 6);
     final TextBlock comment = fileContents.getJavadocBefore(2);
 
@@ -263,8 +258,7 @@ public class FileContentsTest {
   @Test
   public void testInPackageInfo() {
     final FileContents fileContents =
-        new FileContents(
-            new FileText(new File("package-info.java"), Collections.singletonList("  //   ")));
+        new FileContents(new FileText(new File("package-info.java"), ImmutableList.of("  //   ")));
 
     assertWithMessage("Should return true when in package info")
         .that(fileContents.inPackageInfo())
@@ -280,7 +274,7 @@ public class FileContentsTest {
   public void testNotInPackageInfo() {
     final FileContents fileContents =
         new FileContents(
-            new FileText(new File("some-package-info.java"), Collections.singletonList("  //   ")));
+            new FileText(new File("some-package-info.java"), ImmutableList.of("  //   ")));
 
     assertWithMessage("Should return false when not in package info")
         .that(fileContents.inPackageInfo())
@@ -290,7 +284,7 @@ public class FileContentsTest {
   @Test
   public void testGetJavadocBefore() {
     final FileContents fileContents =
-        new FileContents(new FileText(new File("filename"), Collections.singletonList("    ")));
+        new FileContents(new FileText(new File("filename"), ImmutableList.of("    ")));
     final Map<Integer, TextBlock> javadoc = new HashMap<>();
     javadoc.put(0, new Comment(new String[] {"// "}, 2, 1, 2));
     TestUtil.setInternalState(fileContents, "javadocComments", javadoc);
@@ -320,12 +314,12 @@ public class FileContentsTest {
   @Test
   public void testHasIntersectionEarlyOut() throws Exception {
     final FileContents fileContents =
-        new FileContents(new FileText(new File("filename"), Collections.emptyList()));
+        new FileContents(new FileText(new File("filename"), ImmutableList.of()));
     final Map<Integer, List<TextBlock>> clangComments =
         TestUtil.getInternalState(fileContents, "clangComments");
     final TextBlock textBlock = new Comment(new String[] {""}, 1, 1, 1);
-    clangComments.put(1, Collections.singletonList(textBlock));
-    clangComments.put(2, Collections.emptyList());
+    clangComments.put(1, ImmutableList.of(textBlock));
+    clangComments.put(2, ImmutableList.of());
 
     assertWithMessage("Invalid results")
         .that(
@@ -341,7 +335,7 @@ public class FileContentsTest {
             new FileText(new File("filename"), Arrays.asList("// comment ", " A + B ", " ")));
     cppComments.reportSingleLineComment(1, 0);
     final Map<Integer, TextBlock> comments = cppComments.getSingleLineComments();
-    assertThrows(UnsupportedOperationException.class, () -> comments.remove(0));
+    assertThatThrownBy(() -> comments.remove(0)).isInstanceOf(UnsupportedOperationException.class);
   }
 
   @Test
@@ -351,6 +345,6 @@ public class FileContentsTest {
             new FileText(new File("filename"), Arrays.asList("/* comment ", " ", " comment */")));
     clangComments.reportBlockComment(1, 0, 3, 9);
     final Map<Integer, List<TextBlock>> comments = clangComments.getBlockComments();
-    assertThrows(UnsupportedOperationException.class, () -> comments.remove(0));
+    assertThatThrownBy(() -> comments.remove(0)).isInstanceOf(UnsupportedOperationException.class);
   }
 }
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/FileTextTest.java
@@ -21,6 +21,7 @@ package com.puppycrawl.tools.checkstyle.api;
 
 import static com.google.common.truth.Truth.assertWithMessage;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.AbstractPathTestSupport;
 import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;
 import com.puppycrawl.tools.checkstyle.internal.utils.TestUtil;
@@ -30,7 +31,6 @@ import java.io.IOException;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -127,7 +127,7 @@ public class FileTextTest extends AbstractPathTestSupport {
 
   @Test
   public void testLines() throws IOException {
-    final List<String> lines = Collections.singletonList("abc");
+    final List<String> lines = ImmutableList.of("abc");
     final FileText fileText =
         new FileText(new File(getPath("InputFileTextImportControl.xml")), lines);
     assertWithMessage("Invalid line").that(fileText.toLinesArray()).isEqualTo(new String[] {"abc"});
@@ -157,7 +157,7 @@ public class FileTextTest extends AbstractPathTestSupport {
    */
   @Test
   public void testFindLineBreaksCache() throws Exception {
-    final FileText fileText = new FileText(new File("fileName"), Collections.emptyList());
+    final FileText fileText = new FileText(new File("fileName"), ImmutableList.of());
     final int[] lineBreaks = {5};
     TestUtil.setInternalState(fileText, "lineBreaks", lineBreaks);
     // produces NPE if used
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/FilterSetTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/FilterSetTest.java
@@ -20,7 +20,7 @@
 package com.puppycrawl.tools.checkstyle.api;
 
 import static com.google.common.truth.Truth.assertWithMessage;
-import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
 
 import com.puppycrawl.tools.checkstyle.filters.SeverityMatchFilter;
 import java.util.Objects;
@@ -97,7 +97,8 @@ public class FilterSetTest {
     final Filter filter = new FilterSet();
     filterSet.addFilter(filter);
     final Set<Filter> subFilterSet = filterSet.getFilters();
-    assertThrows(UnsupportedOperationException.class, () -> subFilterSet.add(filter));
+    assertThatThrownBy(() -> subFilterSet.add(filter))
+        .isInstanceOf(UnsupportedOperationException.class);
   }
 
   /*
--- a/src/test/java/com/puppycrawl/tools/checkstyle/api/TokenTypesTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/api/TokenTypesTest.java
@@ -22,9 +22,9 @@ package com.puppycrawl.tools.checkstyle.api;
 import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.internal.utils.TestUtil.isUtilsClassHasPrivateConstructor;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.utils.TokenUtil;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.Locale;
 import java.util.ResourceBundle;
 import java.util.Set;
@@ -58,7 +58,7 @@ public class TokenTypesTest {
             .collect(Collectors.toUnmodifiableSet());
     assertWithMessage("Malformed TokenType descriptions")
         .that(badDescriptions)
-        .isEqualTo(Collections.emptySet());
+        .isEqualTo(ImmutableSet.of());
   }
 
   @Test
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/OrderedPropertiesCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/OrderedPropertiesCheckTest.java
@@ -23,6 +23,7 @@ import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.checks.OrderedPropertiesCheck.MSG_IO_EXCEPTION_KEY;
 import static com.puppycrawl.tools.checkstyle.checks.OrderedPropertiesCheck.MSG_KEY;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.FileText;
@@ -33,7 +34,6 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.nio.file.Files;
 import java.nio.file.NoSuchFileException;
-import java.util.Collections;
 import java.util.SortedSet;
 import org.junit.jupiter.api.Test;
 
@@ -120,7 +120,7 @@ public class OrderedPropertiesCheckTest extends AbstractModuleTestSupport {
     check.configure(checkConfig);
     final String fileName = getPath("InputOrderedPropertiesCheckNotExisting.properties");
     final File file = new File(fileName);
-    final FileText fileText = new FileText(file, Collections.emptyList());
+    final FileText fileText = new FileText(file, ImmutableList.of());
     final SortedSet<Violation> violations = check.process(file, fileText);
     assertWithMessage("Wrong violations count").that(violations).hasSize(1);
     final Violation violation = violations.iterator().next();
@@ -147,7 +147,7 @@ public class OrderedPropertiesCheckTest extends AbstractModuleTestSupport {
     check.configure(checkConfig);
     final String fileName = getPath("InputOrderedProperties2EmptyValue.properties");
     final File file = new File(fileName);
-    final FileText fileText = new FileText(file, Collections.emptyList());
+    final FileText fileText = new FileText(file, ImmutableList.of());
     final SortedSet<Violation> violations = check.process(file, fileText);
 
     assertWithMessage("Wrong violations count").that(violations).hasSize(1);
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheckTest.java
@@ -22,6 +22,7 @@ package com.puppycrawl.tools.checkstyle.checks;
 import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.checks.OuterTypeFilenameCheck.MSG_KEY;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
@@ -180,7 +181,7 @@ public class OuterTypeFilenameCheckTest extends AbstractModuleTestSupport {
     final String file1 = getPath("InputOuterTypeFilenameBeginTree1.java");
     final String file2 = getPath("InputOuterTypeFilename1a.java");
     final List<String> expectedFirstInput = List.of(CommonUtil.EMPTY_STRING_ARRAY);
-    final List<String> expectedSecondInput = List.of("9:1: " + getCheckMessage(MSG_KEY));
+    final List<String> expectedSecondInput = ImmutableList.of("9:1: " + getCheckMessage(MSG_KEY));
     final File[] inputs = {new File(file1), new File(file2)};
 
     verify(
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java
@@ -414,7 +414,7 @@ public class SuppressWarningsHolderTest extends AbstractModuleTestSupport {
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
                 check,
-                annotationDef.get(),
+                annotationDef.orElseThrow(),
                 "ENTRIES",
                 entries -> ((ThreadLocal<List<Object>>) entries).get().isEmpty()))
         .isTrue();
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java
@@ -23,6 +23,7 @@ import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.checks.TranslationCheck.MSG_KEY;
 import static com.puppycrawl.tools.checkstyle.checks.TranslationCheck.MSG_KEY_MISSING_TRANSLATION_FILE;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.puppycrawl.tools.checkstyle.AbstractAutomaticBean.OutputStreamOptions;
 import com.puppycrawl.tools.checkstyle.AbstractXmlTestSupport;
@@ -44,7 +45,6 @@ import java.io.Writer;
 import java.lang.reflect.Field;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
-import java.util.Collections;
 import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;
@@ -176,9 +176,9 @@ public class TranslationCheckTest extends AbstractXmlTestSupport {
         checker,
         propertyFiles,
         ImmutableMap.of(
-            ":1", Collections.singletonList(" " + firstErrorMessage),
+            ":1", ImmutableList.of(" " + firstErrorMessage),
             "InputTranslationCheckFireErrors_de.properties",
-                Collections.singletonList(line + secondErrorMessage)));
+                ImmutableList.of(line + secondErrorMessage)));
 
     verifyXml(
         getPath("ExpectedTranslationLog.xml"),
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheckTest.java
@@ -22,6 +22,7 @@ package com.puppycrawl.tools.checkstyle.checks;
 import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.checks.UncommentedMainCheck.MSG_KEY;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
@@ -138,8 +139,8 @@ public class UncommentedMainCheckTest extends AbstractModuleTestSupport {
     final String file1 = getNonCompilablePath("InputUncommentedMainRecords2.java");
     final String file2 = getNonCompilablePath("InputUncommentedMainBeginTree2.java");
     final List<String> expectedFirstInput =
-        List.of("12:5: " + getCheckMessage(MSG_KEY), "21:24: " + getCheckMessage(MSG_KEY));
-    final List<String> expectedSecondInput = List.of("13:13: " + getCheckMessage(MSG_KEY));
+        ImmutableList.of("12:5: " + getCheckMessage(MSG_KEY), "21:24: " + getCheckMessage(MSG_KEY));
+    final List<String> expectedSecondInput = ImmutableList.of("13:13: " + getCheckMessage(MSG_KEY));
     final File[] inputs = {new File(file1), new File(file2)};
 
     verify(
@@ -159,7 +160,7 @@ public class UncommentedMainCheckTest extends AbstractModuleTestSupport {
     final String file2 = getPath("InputUncommentedMainBeginTreePackage2.java");
     final List<String> expectedFirstInput = List.of(CommonUtil.EMPTY_STRING_ARRAY);
     final List<String> expectedSecondInput =
-        List.of("3:5: " + getCheckMessage(MSG_KEY), "12:5: " + getCheckMessage(MSG_KEY));
+        ImmutableList.of("3:5: " + getCheckMessage(MSG_KEY), "12:5: " + getCheckMessage(MSG_KEY));
     final File[] inputs = {new File(file1), new File(file2)};
 
     verify(
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java
@@ -23,6 +23,7 @@ import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.checks.UniquePropertiesCheck.MSG_IO_EXCEPTION_KEY;
 import static com.puppycrawl.tools.checkstyle.checks.UniquePropertiesCheck.MSG_KEY;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.FileText;
@@ -36,7 +37,6 @@ import java.lang.reflect.Method;
 import java.nio.file.Files;
 import java.nio.file.NoSuchFileException;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -123,7 +123,7 @@ public class UniquePropertiesCheckTest extends AbstractModuleTestSupport {
     check.configure(checkConfig);
     final String fileName = getPath("InputUniquePropertiesCheckNotExisting.properties");
     final File file = new File(fileName);
-    final FileText fileText = new FileText(file, Collections.emptyList());
+    final FileText fileText = new FileText(file, ImmutableList.of());
     final SortedSet<Violation> violations = check.process(file, fileText);
     assertWithMessage("Wrong messages count: " + violations.size()).that(violations).hasSize(1);
     final Violation violation = violations.iterator().next();
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheckTest.java
@@ -23,13 +23,13 @@ import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.checks.coding.EqualsHashCodeCheck.MSG_KEY_EQUALS;
 import static com.puppycrawl.tools.checkstyle.checks.coding.EqualsHashCodeCheck.MSG_KEY_HASHCODE;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.Test;
 
@@ -67,9 +67,9 @@ public class EqualsHashCodeCheckTest extends AbstractModuleTestSupport {
     final DefaultConfiguration checkConfig = createModuleConfig(EqualsHashCodeCheck.class);
 
     final List<String> expectedFirstInputErrors =
-        Collections.singletonList("10:5: " + getCheckMessage(MSG_KEY_EQUALS));
+        ImmutableList.of("10:5: " + getCheckMessage(MSG_KEY_EQUALS));
     final List<String> expectedSecondInputErrors =
-        Collections.singletonList("96:13: " + getCheckMessage(MSG_KEY_HASHCODE));
+        ImmutableList.of("96:13: " + getCheckMessage(MSG_KEY_HASHCODE));
     final List<String> expectedThirdInputErrors = Arrays.asList(CommonUtil.EMPTY_STRING_ARRAY);
 
     final String firstInput = getPath("InputEqualsHashCodeNoEquals.java");
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheckTest.java
@@ -487,7 +487,7 @@ public class HiddenFieldCheckTest extends AbstractModuleTestSupport {
     assertWithMessage("State is not cleared on beginTree")
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
-                check, classDef.get(), "frame", new CheckIfStatefulFieldCleared()))
+                check, classDef.orElseThrow(), "frame", new CheckIfStatefulFieldCleared()))
         .isTrue();
   }
 
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheckTest.java
@@ -169,7 +169,7 @@ public class IllegalInstantiationCheckTest extends AbstractModuleTestSupport {
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
                 check,
-                classDef.get(),
+                classDef.orElseThrow(),
                 "classNames",
                 classNames -> ((Collection<String>) classNames).isEmpty()))
         .isTrue();
@@ -195,7 +195,10 @@ public class IllegalInstantiationCheckTest extends AbstractModuleTestSupport {
     assertWithMessage("State is not cleared on beginTree")
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
-                check, importDef.get(), "imports", imports -> ((Collection<?>) imports).isEmpty()))
+                check,
+                importDef.orElseThrow(),
+                "imports",
+                imports -> ((Collection<?>) imports).isEmpty()))
         .isTrue();
   }
 
@@ -221,7 +224,7 @@ public class IllegalInstantiationCheckTest extends AbstractModuleTestSupport {
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
                 check,
-                literalNew.get(),
+                literalNew.orElseThrow(),
                 "instantiations",
                 instantiations -> ((Collection<DetailAST>) instantiations).isEmpty()))
         .isTrue();
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheckTest.java
@@ -184,7 +184,7 @@ public class ModifiedControlVariableCheckTest extends AbstractModuleTestSupport
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
                 check,
-                methodDef.get(),
+                methodDef.orElseThrow(),
                 "variableStack",
                 variableStack -> ((Collection<Set<String>>) variableStack).isEmpty()))
         .isTrue();
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheckTest.java
@@ -22,6 +22,7 @@ package com.puppycrawl.tools.checkstyle.checks.coding;
 import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck.MSG_KEY;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
@@ -157,7 +158,7 @@ public class OneStatementPerLineCheckTest extends AbstractModuleTestSupport {
   public void testStateIsClearedOnBeginTreeForLastStatementEnd() throws Exception {
     final String inputWithWarnings = getPath("InputOneStatementPerLineBeginTree1.java");
     final String inputWithoutWarnings = getPath("InputOneStatementPerLineBeginTree2.java");
-    final List<String> expectedFirstInput = List.of("6:96: " + getCheckMessage(MSG_KEY));
+    final List<String> expectedFirstInput = ImmutableList.of("6:96: " + getCheckMessage(MSG_KEY));
     final List<String> expectedSecondInput = List.of(CommonUtil.EMPTY_STRING_ARRAY);
     verifyWithInlineConfigParser(
         inputWithWarnings, inputWithoutWarnings, expectedFirstInput, expectedSecondInput);
@@ -169,7 +170,7 @@ public class OneStatementPerLineCheckTest extends AbstractModuleTestSupport {
         getPath("InputOneStatementPerLineBeginTreeLastVariableResourcesStatementEnd1.java");
     final String file2 =
         getPath("InputOneStatementPerLineBeginTreeLastVariableResourcesStatementEnd2.java");
-    final List<String> expectedFirstInput = List.of("15:59: " + getCheckMessage(MSG_KEY));
+    final List<String> expectedFirstInput = ImmutableList.of("15:59: " + getCheckMessage(MSG_KEY));
     final List<String> expectedSecondInput = List.of(CommonUtil.EMPTY_STRING_ARRAY);
     verifyWithInlineConfigParser(file1, file2, expectedFirstInput, expectedSecondInput);
   }
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheckTest.java
@@ -111,7 +111,7 @@ public class ParameterAssignmentCheckTest extends AbstractModuleTestSupport {
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
                 check,
-                methodDef.get(),
+                methodDef.orElseThrow(),
                 "parameterNamesStack",
                 parameterNamesStack -> ((Collection<Set<String>>) parameterNamesStack).isEmpty()))
         .isTrue();
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheckTest.java
@@ -536,7 +536,10 @@ public class RequireThisCheckTest extends AbstractModuleTestSupport {
     assertWithMessage("State is not cleared on beginTree")
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
-                check, classDef.get(), "current", current -> ((Collection<?>) current).isEmpty()))
+                check,
+                classDef.orElseThrow(),
+                "current",
+                current -> ((Collection<?>) current).isEmpty()))
         .isTrue();
   }
 }
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheckTest.java
@@ -160,7 +160,7 @@ public class ReturnCountCheckTest extends AbstractModuleTestSupport {
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
                 check,
-                methodDef.get(),
+                methodDef.orElseThrow(),
                 "contextStack",
                 contextStack -> ((Collection<Set<String>>) contextStack).isEmpty()))
         .isTrue();
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/SuperCloneCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/SuperCloneCheckTest.java
@@ -102,7 +102,7 @@ public class SuperCloneCheckTest extends AbstractModuleTestSupport {
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
                 check,
-                methodDef.get(),
+                methodDef.orElseThrow(),
                 "methodStack",
                 methodStack -> ((Collection<Set<String>>) methodStack).isEmpty()))
         .isTrue();
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/UnusedLocalVariableCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/UnusedLocalVariableCheckTest.java
@@ -280,7 +280,7 @@ public class UnusedLocalVariableCheckTest extends AbstractModuleTestSupport {
             ast -> ast.getType() == TokenTypes.METHOD_DEF);
     assertWithMessage("Ast should contain METHOD_DEF").that(methodDef.isPresent()).isTrue();
     final DetailAST variableDef =
-        methodDef.get().getLastChild().findFirstToken(TokenTypes.VARIABLE_DEF);
+        methodDef.orElseThrow().getLastChild().findFirstToken(TokenTypes.VARIABLE_DEF);
     assertWithMessage("State is not cleared on beginTree")
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
@@ -303,7 +303,7 @@ public class UnusedLocalVariableCheckTest extends AbstractModuleTestSupport {
                 JavaParser.Options.WITHOUT_COMMENTS),
             ast -> ast.getType() == TokenTypes.CLASS_DEF);
     assertWithMessage("Ast should contain CLASS_DEF").that(classDef.isPresent()).isTrue();
-    final DetailAST classDefToken = classDef.get();
+    final DetailAST classDefToken = classDef.orElseThrow();
     assertWithMessage("State is not cleared on beginTree")
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
@@ -351,7 +351,7 @@ public class UnusedLocalVariableCheckTest extends AbstractModuleTestSupport {
     assertWithMessage("Ast should contain LITERAL_NEW").that(literalNew.isPresent()).isTrue();
     check.beginTree(root);
     check.visitToken(classDefAst);
-    check.visitToken(literalNew.get());
+    check.visitToken(literalNew.orElseThrow());
     check.beginTree(null);
     final Predicate<Object> isClear =
         anonInnerAstToTypeDesc -> {
@@ -379,7 +379,7 @@ public class UnusedLocalVariableCheckTest extends AbstractModuleTestSupport {
                 JavaParser.Options.WITHOUT_COMMENTS),
             ast -> ast.getType() == TokenTypes.PACKAGE_DEF);
     assertWithMessage("Ast should contain PACKAGE_DEF").that(packageDef.isPresent()).isTrue();
-    final DetailAST packageDefToken = packageDef.get();
+    final DetailAST packageDefToken = packageDef.orElseThrow();
     assertWithMessage("State is not cleared on beginTree")
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheckTest.java
@@ -260,7 +260,7 @@ public class FinalClassCheckTest extends AbstractModuleTestSupport {
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
                 check,
-                packageDef.get(),
+                packageDef.orElseThrow(),
                 "packageName",
                 packageName -> ((String) packageName).isEmpty()))
         .isTrue();
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java
@@ -753,7 +753,7 @@ public class ImportOrderCheckTest extends AbstractModuleTestSupport {
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
                 check,
-                staticImport.get(),
+                staticImport.orElseThrow(),
                 "lastImportStatic",
                 lastImportStatic -> !((boolean) lastImportStatic)))
         .isTrue();
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheckTest.java
@@ -22,6 +22,7 @@ package com.puppycrawl.tools.checkstyle.checks.imports;
 import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck.MSG_KEY;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
@@ -304,10 +305,11 @@ public class UnusedImportsCheckTest extends AbstractModuleTestSupport {
     final String file1 = getNonCompilablePath("InputUnusedImportsRecordsAndCompactCtors.java");
     final String file2 = getNonCompilablePath("InputUnusedImportsSingleWordPackage.java");
     final List<String> expectedFirstInput =
-        List.of(
+        ImmutableList.of(
             "19:8: " + getCheckMessage(MSG_KEY, "javax.swing.JToolBar"),
             "20:8: " + getCheckMessage(MSG_KEY, "javax.swing.JToggleButton"));
-    final List<String> expectedSecondInput = List.of("10:8: " + getCheckMessage(MSG_KEY, "module"));
+    final List<String> expectedSecondInput =
+        ImmutableList.of("10:8: " + getCheckMessage(MSG_KEY, "module"));
     verifyWithInlineConfigParser(file1, file2, expectedFirstInput, expectedSecondInput);
   }
 }
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.checks.indentation;
 
+import static com.google.common.base.Preconditions.checkState;
 import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck.MSG_CHILD_ERROR;
 import static com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck.MSG_CHILD_ERROR_MULTI;
@@ -66,26 +67,24 @@ public class IndentationCheckTest extends AbstractModuleTestSupport {
           final IndentComment warn = new IndentComment(match, lineNumber);
           final int actualIndent = getLineStart(line, tabWidth);
 
-          if (actualIndent != warn.getIndent()) {
-            throw new IllegalStateException(
-                String.format(
-                    Locale.ROOT,
-                    "File \"%1$s\" has incorrect indentation in comment. "
-                        + "Line %2$d: comment:%3$d, actual:%4$d.",
-                    aFileName,
-                    lineNumber,
-                    warn.getIndent(),
-                    actualIndent));
-          }
+          checkState(
+              actualIndent == warn.getIndent(),
+              String.format(
+                  Locale.ROOT,
+                  "File \"%1$s\" has incorrect indentation in comment. "
+                      + "Line %2$d: comment:%3$d, actual:%4$d.",
+                  aFileName,
+                  lineNumber,
+                  warn.getIndent(),
+                  actualIndent));
 
-          if (!isCommentConsistent(warn)) {
-            throw new IllegalStateException(
-                String.format(
-                    Locale.ROOT,
-                    "File \"%1$s\" has inconsistent comment on line %2$d",
-                    aFileName,
-                    lineNumber));
-          }
+          checkState(
+              isCommentConsistent(warn),
+              String.format(
+                  Locale.ROOT,
+                  "File \"%1$s\" has inconsistent comment on line %2$d",
+                  aFileName,
+                  lineNumber));
 
           if (warn.isWarning()) {
             result.add(warn);
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheckTest.java
@@ -26,7 +26,7 @@ import static com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocChec
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck.MSG_JAVADOC_WRONG_SINGLETON_TAG;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocTypeCheck.MSG_TAG_FORMAT;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.SummaryJavadocCheck.MSG_SUMMARY_FIRST_SENTENCE;
-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
+import static org.assertj.core.api.Assertions.assertThatCode;
 
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
@@ -351,7 +351,7 @@ public class AbstractJavadocCheckTest extends AbstractModuleTestSupport {
           }
         };
     check.setJavadocTokens("RETURN_LITERAL");
-    assertDoesNotThrow(check::init);
+    assertThatCode(check::init).doesNotThrowAnyException();
   }
 
   @Test
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheckTest.java
@@ -23,12 +23,12 @@ import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocPackageCheck.MSG_LEGACY_PACKAGE_HTML;
 import static com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocPackageCheck.MSG_PACKAGE_INFO;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
 import java.io.File;
-import java.util.Collections;
 import org.junit.jupiter.api.Test;
 
 public class JavadocPackageCheckTest extends AbstractModuleTestSupport {
@@ -107,7 +107,7 @@ public class JavadocPackageCheckTest extends AbstractModuleTestSupport {
   public void testCheckstyleExceptionIfFailedToGetCanonicalPathToFile() {
     final JavadocPackageCheck check = new JavadocPackageCheck();
     final File fileWithInvalidPath = new File("\u0000\u0000\u0000");
-    final FileText mockFileText = new FileText(fileWithInvalidPath, Collections.emptyList());
+    final FileText mockFileText = new FileText(fileWithInvalidPath, ImmutableList.of());
     final String expectedExceptionMessage =
         "Exception while getting canonical path to file " + fileWithInvalidPath.getPath();
     try {
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/ClassFanOutComplexityCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/ClassFanOutComplexityCheckTest.java
@@ -293,7 +293,7 @@ public class ClassFanOutComplexityCheckTest extends AbstractModuleTestSupport {
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
                 check,
-                importAst.get(),
+                importAst.orElseThrow(),
                 "importedClassPackages",
                 importedClssPackage -> ((Map<String, String>) importedClssPackage).isEmpty()))
         .isTrue();
@@ -320,7 +320,7 @@ public class ClassFanOutComplexityCheckTest extends AbstractModuleTestSupport {
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
                 check,
-                classDef.get(),
+                classDef.orElseThrow(),
                 "classesContexts",
                 classContexts -> ((Collection<?>) classContexts).size() == 1))
         .isTrue();
@@ -347,7 +347,7 @@ public class ClassFanOutComplexityCheckTest extends AbstractModuleTestSupport {
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
                 check,
-                packageDef.get(),
+                packageDef.orElseThrow(),
                 "packageName",
                 packageName -> ((String) packageName).isEmpty()))
         .isTrue();
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheckTest.java
@@ -188,7 +188,7 @@ public class NPathComplexityCheckTest extends AbstractModuleTestSupport {
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
                 check,
-                question.get(),
+                question.orElseThrow(),
                 "processingTokenEnd",
                 processingTokenEnd -> {
                   return TestUtil.<Integer>getInternalState(processingTokenEnd, "endLineNo") == 0
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheckTest.java
@@ -24,6 +24,7 @@ import static com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck.MSG_DUPL
 import static com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck.MSG_ILLEGAL_REGEXP;
 import static com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck.MSG_REQUIRED_REGEXP;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
 import java.util.List;
@@ -263,9 +264,9 @@ public class RegexpCheckTest extends AbstractModuleTestSupport {
     final String file1 = getPath("InputRegexpCheckB2.java");
     final String file2 = getPath("InputRegexpCheckB1.java");
     final List<String> expectedFromFile1 =
-        List.of("12: " + getCheckMessage(MSG_ILLEGAL_REGEXP, "^import"));
+        ImmutableList.of("12: " + getCheckMessage(MSG_ILLEGAL_REGEXP, "^import"));
     final List<String> expectedFromFile2 =
-        List.of("12: " + getCheckMessage(MSG_ILLEGAL_REGEXP, "^import"));
+        ImmutableList.of("12: " + getCheckMessage(MSG_ILLEGAL_REGEXP, "^import"));
     verifyWithInlineConfigParser(file1, file2, expectedFromFile1, expectedFromFile2);
   }
 
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheckTest.java
@@ -24,13 +24,13 @@ import static com.puppycrawl.tools.checkstyle.checks.regexp.RegexpOnFilenameChec
 import static com.puppycrawl.tools.checkstyle.checks.regexp.RegexpOnFilenameCheck.MSG_MISMATCH;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.api.FileText;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
 import java.io.File;
-import java.util.Collections;
 import java.util.regex.Pattern;
 import org.junit.jupiter.api.Test;
 
@@ -244,7 +244,7 @@ public class RegexpOnFilenameCheckTest extends AbstractModuleTestSupport {
     final CheckstyleException ex =
         assertThrows(
             CheckstyleException.class,
-            () -> check.process(file, new FileText(file, Collections.emptyList())),
+            () -> check.process(file, new FileText(file, ImmutableList.of())),
             "CheckstyleException expected");
     assertWithMessage("Invalid exception message")
         .that(ex)
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheckTest.java
@@ -123,14 +123,17 @@ public class OuterTypeNumberCheckTest extends AbstractModuleTestSupport {
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
                 check,
-                classDef.get(),
+                classDef.orElseThrow(),
                 "currentDepth",
                 currentDepth -> ((Number) currentDepth).intValue() == 0))
         .isTrue();
     assertWithMessage("State is not cleared on beginTree")
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
-                check, classDef.get(), "outerNum", outerNum -> ((Number) outerNum).intValue() == 0))
+                check,
+                classDef.orElseThrow(),
+                "outerNum",
+                outerNum -> ((Number) outerNum).intValue() == 0))
         .isTrue();
   }
 }
--- a/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java
@@ -240,7 +240,10 @@ public class GenericWhitespaceCheckTest extends AbstractModuleTestSupport {
     assertWithMessage("State is not cleared on beginTree")
         .that(
             TestUtil.isStatefulFieldClearedDuringBeginTree(
-                check, genericStart.get(), "depth", depth -> ((Number) depth).intValue() == 0))
+                check,
+                genericStart.orElseThrow(),
+                "depth",
+                depth -> ((Number) depth).intValue() == 0))
         .isTrue();
   }
 
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java
@@ -22,6 +22,7 @@ package com.puppycrawl.tools.checkstyle.filters;
 import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.MSG_INVALID_PATTERN;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
 import com.puppycrawl.tools.checkstyle.TreeWalker;
@@ -37,7 +38,6 @@ import com.puppycrawl.tools.checkstyle.internal.utils.TestUtil;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
 import java.io.File;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import nl.jqno.equalsverifier.EqualsVerifier;
 import nl.jqno.equalsverifier.EqualsVerifierReport;
@@ -441,8 +441,7 @@ public class SuppressWithNearbyCommentFilterTest extends AbstractModuleTestSuppo
     final SuppressWithNearbyCommentFilter filter = new SuppressWithNearbyCommentFilter();
     final FileContents contents =
         new FileContents(
-            new FileText(
-                new File("filename"), Collections.singletonList("//SUPPRESS CHECKSTYLE ignore")));
+            new FileText(new File("filename"), ImmutableList.of("//SUPPRESS CHECKSTYLE ignore")));
     contents.reportSingleLineComment(1, 0);
     final TreeWalkerAuditEvent auditEvent = new TreeWalkerAuditEvent(contents, null, null, null);
     assertWithMessage("Filter should accept null violation")
--- a/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionXpathFilterTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionXpathFilterTest.java
@@ -23,12 +23,12 @@ import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck.MSG_KEY;
 import static com.puppycrawl.tools.checkstyle.checks.naming.AbstractNameCheck.MSG_INVALID_PATTERN;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
 import com.puppycrawl.tools.checkstyle.checks.coding.IllegalTokenTextCheck;
 import com.puppycrawl.tools.checkstyle.checks.naming.ConstantNameCheck;
 import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
-import java.util.Collections;
 import java.util.Set;
 import nl.jqno.equalsverifier.EqualsVerifier;
 import nl.jqno.equalsverifier.EqualsVerifierReport;
@@ -160,7 +160,7 @@ public class SuppressionXpathFilterTest extends AbstractModuleTestSupport {
     final boolean optional = false;
     final String fileName = getPath("InputSuppressionXpathFilterIdAndQuery.xml");
     final SuppressionXpathFilter filter = createSuppressionXpathFilter(fileName, optional);
-    final Set<String> expected = Collections.singleton(fileName);
+    final Set<String> expected = ImmutableSet.of(fileName);
     final Set<String> actual = filter.getExternalResourceLocations();
     assertWithMessage("Invalid external resource").that(actual).isEqualTo(expected);
   }
--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitSuperClassTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/ArchUnitSuperClassTest.java
@@ -134,7 +134,7 @@ public class ArchUnitSuperClassTest {
     public void check(JavaClass item, ConditionEvents events) {
       final Optional<JavaType> superclassOptional = item.getSuperclass();
       if (superclassOptional.isPresent()) {
-        final JavaClass superclass = superclassOptional.get().toErasure();
+        final JavaClass superclass = superclassOptional.orElseThrow().toErasure();
         if (!superclass.isEquivalentTo(expectedSuperclass)) {
           final String format = "<%s> is subclass of <%s> instead of <%s>";
           final String message =
--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/CommitValidationTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/CommitValidationTest.java
@@ -21,6 +21,7 @@ package com.puppycrawl.tools.checkstyle.internal;
 
 import static com.google.common.truth.Truth.assertWithMessage;
 
+import com.google.common.collect.ImmutableList;
 import java.io.IOException;
 import java.util.Collections;
 import java.util.Iterator;
@@ -62,7 +63,7 @@ import org.junit.jupiter.api.Test;
 public class CommitValidationTest {
 
   private static final List<String> USERS_EXCLUDED_FROM_VALIDATION =
-      Collections.singletonList("dependabot[bot]");
+      ImmutableList.of("dependabot[bot]");
 
   private static final String ISSUE_COMMIT_MESSAGE_REGEX_PATTERN = "^Issue #\\d+: .*$";
   private static final String PR_COMMIT_MESSAGE_REGEX_PATTERN = "^Pull #\\d+: .*$";
--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/ImmutabilityTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/ImmutabilityTest.java
@@ -26,6 +26,7 @@ import static com.tngtech.archunit.lang.conditions.ArchPredicates.have;
 import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.classes;
 import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.fields;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.FileStatefulCheck;
 import com.puppycrawl.tools.checkstyle.GlobalStatefulCheck;
 import com.puppycrawl.tools.checkstyle.StatelessCheck;
@@ -99,7 +100,7 @@ public class ImmutabilityTest {
 
   /** List of fields not following {@link #testUtilClassesImmutability()} rule. */
   private static final Set<String> SUPPRESSED_FIELDS_IN_UTIL_CLASSES =
-      Set.of(
+      ImmutableSet.of(
           "com.puppycrawl.tools.checkstyle.utils.TokenUtil.TOKEN_IDS",
           "com.puppycrawl.tools.checkstyle.utils.XpathUtil.TOKEN_TYPES_WITH_TEXT_ATTRIBUTE");
 
@@ -164,7 +165,7 @@ public class ImmutabilityTest {
 
   /** List of classes not following {@link #testClassesWithMutableFieldsShouldBeStateful()} rule. */
   private static final Set<String> SUPPRESSED_CLASSES_FOR_STATEFUL_CHECK_RULE =
-      Set.of("com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck");
+      ImmutableSet.of("com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck");
 
   private static final JavaClasses CHECKSTYLE_CHECKS =
       new ClassFileImporter()
--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsMobileWrapperTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XdocsMobileWrapperTest.java
@@ -21,6 +21,7 @@ package com.puppycrawl.tools.checkstyle.internal;
 
 import static com.google.common.truth.Truth.assertWithMessage;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.internal.utils.XdocUtil;
 import com.puppycrawl.tools.checkstyle.internal.utils.XmlUtil;
 import java.io.File;
@@ -34,7 +35,7 @@ import org.w3c.dom.NodeList;
 
 public class XdocsMobileWrapperTest {
 
-  private static final Set<String> NODES_TO_WRAP = Set.of("pre", "table", "svg", "img");
+  private static final Set<String> NODES_TO_WRAP = ImmutableSet.of("pre", "table", "svg", "img");
 
   @Test
   public void testAllCheckSectionMobileWrapper() throws Exception {
--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/XpathRegressionTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/XpathRegressionTest.java
@@ -21,6 +21,7 @@ package com.puppycrawl.tools.checkstyle.internal;
 
 import static com.google.common.truth.Truth.assertWithMessage;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.Definitions;
 import com.puppycrawl.tools.checkstyle.checks.javadoc.AbstractJavadocCheck;
@@ -49,7 +50,7 @@ public class XpathRegressionTest extends AbstractModuleTestSupport {
 
   // Checks that not compatible with SuppressionXpathFilter
   public static final Set<String> INCOMPATIBLE_CHECK_NAMES =
-      Set.of(
+      ImmutableSet.of(
           "NoCodeInFile (reason is that AST is not generated for a file not containing code)",
           "Regexp (reason is at  #7759)",
           "RegexpSinglelineJava (reason is at  #7759)");
@@ -79,7 +80,7 @@ public class XpathRegressionTest extends AbstractModuleTestSupport {
   // Older regex-based checks that are under INCOMPATIBLE_JAVADOC_CHECK_NAMES
   // but not subclasses of AbstractJavadocCheck.
   private static final Set<Class<?>> REGEXP_JAVADOC_CHECKS =
-      Set.of(
+      ImmutableSet.of(
           JavadocStyleCheck.class,
           JavadocMethodCheck.class,
           JavadocTypeCheck.class,
@@ -110,7 +111,7 @@ public class XpathRegressionTest extends AbstractModuleTestSupport {
           "VisibilityModifier");
 
   // Modules that will never have xpath support ever because they not report violations
-  private static final Set<String> NO_VIOLATION_MODULES = Set.of("SuppressWarningsHolder");
+  private static final Set<String> NO_VIOLATION_MODULES = ImmutableSet.of("SuppressWarningsHolder");
 
   private static final Set<String> SIMPLE_CHECK_NAMES = getSimpleCheckNames();
   private static final Map<String, String> ALLOWED_DIRECTORY_AND_CHECKS =
@@ -226,7 +227,7 @@ public class XpathRegressionTest extends AbstractModuleTestSupport {
     final Set<String> allChecks = new HashSet<>(SIMPLE_CHECK_NAMES);
     allChecks.removeAll(INCOMPATIBLE_JAVADOC_CHECK_NAMES);
     allChecks.removeAll(INCOMPATIBLE_CHECK_NAMES);
-    allChecks.removeAll(Set.of("Regexp", "RegexpSinglelineJava", "NoCodeInFile"));
+    allChecks.removeAll(ImmutableSet.of("Regexp", "RegexpSinglelineJava", "NoCodeInFile"));
     allChecks.removeAll(MISSING_CHECK_NAMES);
     allChecks.removeAll(NO_VIOLATION_MODULES);
     allChecks.removeAll(compatibleChecks);
--- a/src/test/java/com/puppycrawl/tools/checkstyle/internal/testmodules/CheckstyleAntTaskStub.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/internal/testmodules/CheckstyleAntTaskStub.java
@@ -19,16 +19,16 @@
 
 package com.puppycrawl.tools.checkstyle.internal.testmodules;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.ant.CheckstyleAntTask;
 import java.io.File;
-import java.util.Collections;
 import java.util.List;
 
 public class CheckstyleAntTaskStub extends CheckstyleAntTask {
 
   @Override
   protected List<File> scanFileSets() {
-    return Collections.singletonList(new MockFile());
+    return ImmutableList.of(new MockFile());
   }
 
   private static final class MockFile extends File {
--- a/src/test/java/com/puppycrawl/tools/checkstyle/meta/MetadataGeneratorUtilTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/meta/MetadataGeneratorUtilTest.java
@@ -22,6 +22,7 @@ package com.puppycrawl.tools.checkstyle.meta;
 import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.meta.JavadocMetadataScraper.MSG_DESC_MISSING;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.internal.utils.CheckUtil;
 import java.nio.file.Files;
@@ -43,7 +44,7 @@ import org.junit.jupiter.api.extension.ExtendWith;
 public final class MetadataGeneratorUtilTest extends AbstractModuleTestSupport {
 
   private final Set<String> modulesContainingNoMetadataFile =
-      Set.of(
+      ImmutableSet.of(
           "Checker",
           "TreeWalker",
           "JavadocMetadataScraper",
--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtilTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtilTest.java
@@ -23,6 +23,7 @@ import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.checks.annotation.SuppressWarningsCheck.MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED;
 import static com.puppycrawl.tools.checkstyle.internal.utils.TestUtil.isUtilsClassHasPrivateConstructor;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.DetailAstImpl;
 import com.puppycrawl.tools.checkstyle.api.DetailAST;
@@ -175,7 +176,7 @@ public class AnnotationUtilTest extends AbstractModuleTestSupport {
   @Test
   public void testContainsAnnotationListWithNullAst() {
     try {
-      AnnotationUtil.containsAnnotation(null, Set.of("Override"));
+      AnnotationUtil.containsAnnotation(null, ImmutableSet.of("Override"));
       assertWithMessage("IllegalArgumentException is expected").fail();
     } catch (IllegalArgumentException ex) {
       assertWithMessage("Invalid exception message")
@@ -201,7 +202,7 @@ public class AnnotationUtilTest extends AbstractModuleTestSupport {
   @Test
   public void testContainsAnnotationListWithEmptyList() {
     final DetailAST ast = new DetailAstImpl();
-    final Set<String> annotations = Set.of();
+    final Set<String> annotations = ImmutableSet.of();
     final boolean result = AnnotationUtil.containsAnnotation(ast, annotations);
     assertWithMessage("An empty set should lead to a false result").that(result).isFalse();
   }
@@ -212,7 +213,7 @@ public class AnnotationUtilTest extends AbstractModuleTestSupport {
     final DetailAstImpl modifiersAst = new DetailAstImpl();
     modifiersAst.setType(TokenTypes.MODIFIERS);
     ast.addChild(modifiersAst);
-    final Set<String> annotations = Set.of("Override");
+    final Set<String> annotations = ImmutableSet.of("Override");
     final boolean result = AnnotationUtil.containsAnnotation(ast, annotations);
     assertWithMessage("An empty ast should lead to a false result").that(result).isFalse();
   }
@@ -227,7 +228,7 @@ public class AnnotationUtilTest extends AbstractModuleTestSupport {
                 TokenTypes.ANNOTATION,
                 create(TokenTypes.DOT, create(TokenTypes.IDENT, "Override"))));
     ast.addChild(modifiersAst);
-    final Set<String> annotations = Set.of("Deprecated");
+    final Set<String> annotations = ImmutableSet.of("Deprecated");
     final boolean result = AnnotationUtil.containsAnnotation(ast, annotations);
     assertWithMessage("No matching annotation found").that(result).isFalse();
   }
--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/BlockCommentPositionTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/BlockCommentPositionTest.java
@@ -19,6 +19,7 @@
 
 package com.puppycrawl.tools.checkstyle.utils;
 
+import static com.google.common.base.Preconditions.checkState;
 import static com.google.common.truth.Truth.assertWithMessage;
 
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
@@ -113,9 +114,7 @@ public class BlockCommentPositionTest extends AbstractModuleTestSupport {
     DetailAST node = detailAST;
     while (node != null) {
       if (node.getType() == TokenTypes.BLOCK_COMMENT_BEGIN && JavadocUtil.isJavadocComment(node)) {
-        if (!assertion.apply(node)) {
-          throw new IllegalStateException("Position of comment is defined correctly");
-        }
+        checkState(assertion.apply(node), "Position of comment is defined correctly");
         matchFound++;
       }
       matchFound += getJavadocsCount(node.getFirstChild(), assertion);
--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/CheckUtilTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/CheckUtilTest.java
@@ -402,6 +402,6 @@ public class CheckUtilTest extends AbstractModuleTestSupport {
         .that(node.isPresent())
         .isTrue();
 
-    return node.get();
+    return node.orElseThrow();
   }
 }
--- a/src/test/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtilTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/utils/ModuleReflectionUtilTest.java
@@ -23,6 +23,7 @@ import static com.google.common.truth.Truth.assertWithMessage;
 import static com.puppycrawl.tools.checkstyle.PackageObjectFactory.BASE_PACKAGE;
 import static com.puppycrawl.tools.checkstyle.internal.utils.TestUtil.isUtilsClassHasPrivateConstructor;
 
+import com.google.common.collect.ImmutableSet;
 import com.puppycrawl.tools.checkstyle.AbstractAutomaticBean;
 import com.puppycrawl.tools.checkstyle.DefaultLogger;
 import com.puppycrawl.tools.checkstyle.TreeWalkerAuditEvent;
@@ -38,7 +39,6 @@ import com.puppycrawl.tools.checkstyle.api.Filter;
 import com.puppycrawl.tools.checkstyle.api.RootModule;
 import java.io.File;
 import java.io.IOException;
-import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 import org.junit.jupiter.api.Test;
@@ -85,7 +85,7 @@ public class ModuleReflectionUtilTest {
   @Test
   public void testGetCheckStyleModules() throws IOException {
     final ClassLoader classLoader = ClassLoader.getSystemClassLoader();
-    final Set<String> packages = Collections.singleton(BASE_PACKAGE + ".checks.javadoc.utils");
+    final Set<String> packages = ImmutableSet.of(BASE_PACKAGE + ".checks.javadoc.utils");
 
     assertWithMessage("specified package has no checkstyle modules")
         .that(ModuleReflectionUtil.getCheckstyleModules(packages, classLoader))
--- a/src/test/java/com/puppycrawl/tools/checkstyle/xpath/XpathQueryGeneratorTest.java
+++ b/src/test/java/com/puppycrawl/tools/checkstyle/xpath/XpathQueryGeneratorTest.java
@@ -21,6 +21,7 @@ package com.puppycrawl.tools.checkstyle.xpath;
 
 import static com.google.common.truth.Truth.assertWithMessage;
 
+import com.google.common.collect.ImmutableList;
 import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
 import com.puppycrawl.tools.checkstyle.JavaParser;
 import com.puppycrawl.tools.checkstyle.TreeWalkerAuditEvent;
@@ -32,7 +33,6 @@ import com.puppycrawl.tools.checkstyle.api.Violation;
 import java.io.File;
 import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -133,7 +133,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(rootAst, lineNumber, columnNumber, fileText, DEFAULT_TAB_WIDTH);
     final List<String> actual = queryGenerator.generate();
     final List<String> expected =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text='InputXpathQueryGenerator']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='Label']]/SLIST/LITERAL_SWITCH/LCURLY");
     assertWithMessage("Generated queries do not match expected ones")
@@ -149,7 +149,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(rootAst, lineNumber, columnNumber, fileText, DEFAULT_TAB_WIDTH);
     final List<String> actual = queryGenerator.generate();
     final List<String> expected =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text='InputXpathQueryGenerator']]/OBJBLOCK"
                 + "/INSTANCE_INIT/SLIST/RCURLY");
     assertWithMessage("Generated queries do not match expected ones")
@@ -183,7 +183,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(rootAst, lineNumber, columnNumber, fileText, DEFAULT_TAB_WIDTH);
     final List<String> actual = queryGenerator.generate();
     final List<String> expected =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text='InputXpathQueryGenerator']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='callSomeMethod']]/LPAREN");
     assertWithMessage("Generated queries do not match expected ones")
@@ -223,7 +223,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(rootAst, lineNumber, columnNumber, fileText, DEFAULT_TAB_WIDTH);
     final List<String> actual = queryGenerator.generate();
     final List<String> expected =
-        Collections.singletonList("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='File']]");
+        ImmutableList.of("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='File']]");
     assertWithMessage("Generated queries do not match expected ones")
         .that(actual)
         .isEqualTo(expected);
@@ -269,7 +269,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(rootAst, lineNumber, columnNumber, fileText, DEFAULT_TAB_WIDTH);
     final List<String> actual = queryGenerator.generate();
     final List<String> expected =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text='InputXpathQueryGenerator']]"
                 + "/OBJBLOCK/METHOD_DEF[./IDENT[@text='Label']]/SLIST/LITERAL_SWITCH");
     assertWithMessage("Generated queries do not match expected ones")
@@ -327,7 +327,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(rootAst, lineNumber, columnNumber, fileText, DEFAULT_TAB_WIDTH);
     final List<String> actual = queryGenerator.generate();
     final List<String> expected =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='InputXpathQueryGenerator']]/OBJBLOCK/METHOD_DEF["
                 + "./IDENT[@text='foo']]/SLIST/LITERAL_FOR/FOR_ITERATOR/ELIST/COMMA");
@@ -362,7 +362,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(rootAst, lineNumber, columnNumber, fileText, DEFAULT_TAB_WIDTH);
     final List<String> actual = queryGenerator.generate();
     final List<String> expected =
-        Collections.singletonList("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='JToolBar']]");
+        ImmutableList.of("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='JToolBar']]");
     assertWithMessage("Generated queries do not match expected ones")
         .that(actual)
         .isEqualTo(expected);
@@ -376,7 +376,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(rootAst, lineNumber, columnNumber, fileText, DEFAULT_TAB_WIDTH);
     final List<String> actual = queryGenerator.generate();
     final List<String> expected =
-        Collections.singletonList("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='Iterator']]");
+        ImmutableList.of("/COMPILATION_UNIT/IMPORT[./DOT/IDENT[@text='Iterator']]");
     assertWithMessage("Generated queries do not match expected ones")
         .that(actual)
         .isEqualTo(expected);
@@ -390,7 +390,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(rootAst, lineNumber, columnNumber, fileText, DEFAULT_TAB_WIDTH);
     final List<String> actual = queryGenerator.generate();
     final List<String> expected =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/IMPORT/DOT[./IDENT[@text='JToolBar']]/DOT/IDENT[@text='javax']");
     assertWithMessage("Generated queries do not match expected ones")
         .that(actual)
@@ -405,8 +405,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(rootAst, lineNumber, columnNumber, fileText, DEFAULT_TAB_WIDTH);
     final List<String> actual = queryGenerator.generate();
     final List<String> expected =
-        Collections.singletonList(
-            "/COMPILATION_UNIT/CLASS_DEF/IDENT[@text='InputXpathQueryGenerator']");
+        ImmutableList.of("/COMPILATION_UNIT/CLASS_DEF/IDENT[@text='InputXpathQueryGenerator']");
     assertWithMessage("Generated queries do not match expected ones")
         .that(actual)
         .isEqualTo(expected);
@@ -475,7 +474,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(detailAst, lineNumber, columnNumber, testFileText, tabWidth);
     final List<String> actual = queryGenerator.generate();
     final List<String> expected =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='InputXpathQueryGeneratorTabWidth']]/OBJBLOCK"
                 + "/METHOD_DEF[./IDENT[@text='tabAfterMe']]/SLIST");
@@ -496,7 +495,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(detailAst, lineNumber, columnNumber, testFileText, tabWidth);
     final List<String> actual = queryGenerator.generate();
     final List<String> expected =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text='InputXpathQueryGeneratorTabWidth']]"
                 + "/OBJBLOCK/VARIABLE_DEF[./IDENT[@text='endLineTab']]/SEMI");
     assertWithMessage("Generated queries do not match expected ones")
@@ -513,8 +512,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
             rootAst, lineNumber, columnNumber, TokenTypes.CLASS_DEF, fileText, DEFAULT_TAB_WIDTH);
     final List<String> actual = queryGenerator.generate();
     final List<String> expected =
-        Collections.singletonList(
-            "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text='InputXpathQueryGenerator']]");
+        ImmutableList.of("/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text='InputXpathQueryGenerator']]");
     assertWithMessage("Generated queries do not match expected ones")
         .that(actual)
         .isEqualTo(expected);
@@ -601,7 +599,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(detailAst, lineNumber, columnNumber, testFileText, tabWidth);
     final List<String> actual = queryGenerator.generate();
     final List<String> expected =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='InputXpathQueryGeneratorTextBlock']]/OBJBLOCK/"
                 + "VARIABLE_DEF[./IDENT[@text='testOne']]/ASSIGN/EXPR/"
@@ -626,7 +624,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(detailAst, lineNumber, columnNumber, testFileText, tabWidth);
     final List<String> actual = queryGenerator.generate();
     final List<String> expected =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='InputXpathQueryGeneratorTextBlockNewLine']]/OBJBLOCK/"
                 + "VARIABLE_DEF[./IDENT[@text='testOne']]/ASSIGN/EXPR/"
@@ -651,7 +649,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(detailAst, lineNumber, columnNumber, testFileText, tabWidth);
     final List<String> actual = queryGenerator.generate();
     final List<String> expected =
-        Collections.singletonList(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='InputXpathQueryGeneratorTextBlockCrlf']]/OBJBLOCK/"
                 + "VARIABLE_DEF[./IDENT[@text='testOne']]/ASSIGN/EXPR/"
@@ -676,7 +674,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(detailAst, lineNumberOne, columnNumberOne, testFileText, tabWidth);
     final List<String> actualTestOne = queryGeneratorOne.generate();
     final List<String> expectedTestOne =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF"
                 + "[./IDENT[@text='InputXpathQueryGenerator2']]"
                 + "/OBJBLOCK/ENUM_DEF[./IDENT[@text='Foo3']]/OBJBLOCK/COMMA[2]");
@@ -698,7 +696,7 @@ public class XpathQueryGeneratorTest extends AbstractModuleTestSupport {
         new XpathQueryGenerator(detailAst, lineNumber3, columnNumber3, testFileText, tabWidth);
     final List<String> actualTest3 = queryGenerator3.generate();
     final List<String> expectedTest3 =
-        List.of(
+        ImmutableList.of(
             "/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text='InputXpathQueryGenerator3']]"
                 + "/OBJBLOCK/SEMI[1]");
     assertWithMessage("Generated queries do not match expected ones")
